---
name: RHEL

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      archive-name:
        required: true
        type: string
      artifacts:
        required: false
        type: string
      target:
        required: true
        type: string
      debug_or_release:
        required: true
        type: string
      database:
        required: true
        type: string
      features:
        required: false
        type: string

env:
  OPENSSL_DIR: /usr/local/openssl

jobs:
  rhel9-tests:
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mariadb:
        image: mariadb
        env:
          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    name: ${{ inputs.archive-name }}-${{ inputs.database }}
    if: inputs.debug_or_release == 'release' || inputs.database == 'redis-findex'
    runs-on: ubuntu-22.04
    container:
      image: redhat/ubi9

    steps:
      - name: Display cpuinfo
        run: cat /proc/cpuinfo

      - uses: actions/checkout@v3

      - name: RHEL 9 prerequisites
        run: |
          set -x

          yum -y install python-devel
          yum -y install wget
          yum -y install perl-IPC-Cmd perl-Digest-SHA1 perl-CPAN perl-devel

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          components: rustfmt, clippy

      - name: Local OpenSSL FIPS Install
        run: |
          bash .github/scripts/local_ossl_instl.sh ${{ env.OPENSSL_DIR }}

      - name: Pre-cleanup
        run: |
          set -x
          rm -rf /tmp/sqlite-data /tmp/tmp.json

      - name: Build and tests
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}

          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
          KMS_POSTGRES_URL: postgres://kms:kms@postgres/kms

          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms
          KMS_MYSQL_URL: mysql://root:kms@mariadb/kms

          KMS_SQLITE_PATH: data/shared

          REDIS_HOST: redis

          # Google variables
          TEST_GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_ID }}
          TEST_GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_SECRET }}
          TEST_GOOGLE_OAUTH_REFRESH_TOKEN: ${{ secrets.TEST_GOOGLE_OAUTH_REFRESH_TOKEN }}
          GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY }}

          TARGET: ${{ inputs.target }}
          DEBUG_OR_RELEASE: ${{ inputs.debug_or_release }}
          KMS_TEST_DB: ${{ inputs.database }}
          FEATURES: ${{ inputs.features }}
        run: |
          bash .github/scripts/cargo_build.sh

      - name: Remove large files before saving cache
        run: |
          find target/ -type f -size ++100M -delete

      - name: Upload KMS for RHEL 9
        if: inputs.database == 'redis-findex'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}
          path: |
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/ckms
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_kms_server
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/libckms_pkcs11.*
            target/${{ inputs.target }}/generate-rpm/cosmian_kms_server-*
            target/${{ inputs.target }}/generate-rpm/cosmian_kms_cli-*
            ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error

  kms-test:
    if: inputs.database == 'redis-findex'
    needs: rhel9-tests
    name: Clean env test ${{ inputs.archive-name }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}

      - run: find .
        if: contains(runner.os, 'linux')

      - name: Launch ckms and cosmian_kms_server
        if: contains(runner.os, 'Linux') || contains(runner.os, 'macos')
        run: |
          # The current path should be /home/runner/work/kms/kms
          pwd
          find . -type f
          # There are 2 subdirectories in the current path
          #   usr/local/openssl/
          #   __w/kms/kms/target/
          KMS_PATH="__w/kms/kms/target/${{ inputs.target }}/${{ inputs.debug_or_release }}"
          chmod u+x ./$KMS_PATH/ckms
          chmod u+x ./$KMS_PATH/cosmian_kms_server

          ./$KMS_PATH/ckms -V

          # Copy openssl build for FIPS mode
          sudo mkdir /usr/local/openssl
          sudo chown -R $USER /usr/local/openssl
          rsync -ru usr/local/openssl/ /usr/local/openssl/
          find /usr/local/openssl
          chmod u+x /usr/local/openssl/lib64/ossl-modules/*.so
          ./$KMS_PATH/cosmian_kms_server --info
