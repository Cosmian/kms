---
name: Docker KMS SGX

on:
  workflow_call:

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/cosmian/enclave-kms-insecure
  KMS_USE_BOOTSTRAP_SERVER: true
  KMS_USE_CERTBOT: true
  KMS_CERTBOT_HOSTNAME: kms.sgx.ci.cosmian.dev
  KMS_CERTBOT_EMAIL: tech@cosmian.com
  KMS_CERTBOT_USE_TEE_KEY: abcdef0123456789
  TESTS_CONTAINER_NETWORK: # dynamic variable retrieved during the tests
  OPENSSL_DIR: /tmp/openssl_fips

jobs:
  build-push-image-and-tests:
    runs-on: [self-hosted, sgx]
    container:
      image: ubuntu:22.04
      ports:
        - 4431:443
        - 8081:80

    steps:
      - name: Install tools
        run: |
          apt update
          apt install --no-install-recommends -qq -y \
            docker.io \
            curl \
            ca-certificates \
            wget \
            build-essential

      - uses: actions/checkout@v3

      # Following job from `docker_kms_sgx_tests.yml` will overwrite
      # this file, but for unknown reason sometimes permissions are denied to do so.
      - name: Fix permissions on JSON file
        run: chmod o+w ./ci/sgx/kms-test-ci.json

      - name: Login to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Specify staging features to use Let's Encrypt staging environment in order to be able to request more than 5 certificates by week
      # Documentation : https://letsencrypt.org/docs/duplicate-certificate-limit/
      - name: Build and tag docker container
        uses: docker/build-push-action@v3
        with:
          file: ./ci/sgx/Dockerfile.sgx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          network: host
          build-args: |
            FEATURES=--features staging

      #########
      # Tests #
      #########
      - name: Retrieve current Docker network
        run: echo "TESTS_CONTAINER_NETWORK=$(docker network ls |grep github_network | head -n1 | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Docker start container
        run: |
          docker run \
            --pull always \
            --network "${{ env.TESTS_CONTAINER_NETWORK }}" \
            --device /dev/sgx_enclave \
            --device /dev/sgx_provision \
            -e KMS_USE_BOOTSTRAP_SERVER="${{ env.KMS_USE_BOOTSTRAP_SERVER }}" \
            -e KMS_USE_CERTBOT="${{ env.KMS_USE_CERTBOT }}" \
            -e KMS_CERTBOT_HOSTNAME="${{ env.KMS_CERTBOT_HOSTNAME }}" \
            -e KMS_CERTBOT_EMAIL="${{ env.KMS_CERTBOT_EMAIL }}" \
            -e KMS_CERTBOT_USE_TEE_KEY="${{ env.KMS_CERTBOT_USE_TEE_KEY }}" \
            -v /var/run/aesmd:/var/run/aesmd/ \
            -v /opt/cosmian-internal:/opt/cosmian-internal \
            -p 80:80 \
            -p 9998:9998 \
            -d --rm --name enclave-kms-insecure ghcr.io/cosmian/enclave-kms-insecure:${{ steps.meta.outputs.version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Local OpenSSL FIPS Install
        run: |
          bash ./scripts/local_ossl_instl.sh ${{ env.OPENSSL_DIR }}

      - name: Install ckms
        run: cargo install --locked --path crate/cli
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}

      - name: Bootstrap
        run: |
          KMS_CLI_CONF=$PWD/ci/sgx/kms-test-ci.json ckms bootstrap-start --sqlite-path private_data/  --database-type sqlite
          sleep 20

      - name: Verify
        run: KMS_CLI_CONF=$PWD/ci/sgx/kms-test-ci.json ckms verify

      - name: Symmetric key create
        run: KMS_CLI_CONF=$PWD/ci/sgx/kms-test-ci.json ckms sym keys create

      - name: Docker stop container
        if: success() || failure()
        run: |
          docker logs --tail 20 enclave-kms-insecure
          docker stop enclave-kms-insecure
