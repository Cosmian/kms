---
name: Cargo tests

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string

jobs:
  # Cleanup task is required for self-hosted runner since docker user is root and all files in target folder are under root permissions
  cleanup:
    runs-on: self-hosted
    steps:
      - name: Chown user
        run: |
          echo "USER: $USER"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE

  kms-tests:
    needs: cleanup
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mariadb:
        image: mariadb
        env:
          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    runs-on: ubuntu-22.04
    # runs-on: [self-hosted, not-sgx] # currently not needed.
    container:
      image: iyxd/centos7-rust

    steps:
      - name: Display cpuinfo
        run: cat /proc/cpuinfo

      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          components: rustfmt, clippy

      - name: Centos 7 prerequisites
        run: |
          yum -y groupinstall "Development Tools"
          yum -y install openssl openssl-devel

      - name: Tests in debug
        run: |
          rm -rf /tmp/sqlite-data /tmp/tmp.json
          export RUST_BACKTRACE=1 CARGO_INCREMENTAL=0
          cargo build --no-default-features
          cargo test  --no-default-features -- --nocapture
          cargo test --bins -- --nocapture
        env:
          POSTGRES_USER: kms
          PGUSER: kms
          POSTGRES_PASSWORD: kms
          POSTGRES_DB: kms
          KMS_POSTGRES_URL: postgres://kms:kms@postgres/kms

          MYSQL_DATABASE: kms
          MYSQL_ROOT_PASSWORD: kms
          KMS_MYSQL_URL: mysql://root:kms@mariadb/kms

          KMS_ENCLAVE_DIR_PATH: data/public
          KMS_SQLITE_PATH: data/shared
          KMS_CERTBOT_SSL_PATH: data/private

          REDIS_HOST: redis

  kms-centos7:
    needs: cleanup
    runs-on: ubuntu-22.04
    # runs-on: [self-hosted, not-sgx] # currently not needed.
    container:
      image: iyxd/centos7-rust

    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          components: rustfmt, clippy

      - name: Centos 7 prerequisites
        run: |
          yum -y groupinstall "Development Tools"
          yum -y install openssl openssl-devel

      - name: Build with Auth0 feature
        run: |
          cargo build --release --bin ckms
          cargo build --release --bin cosmian_kms_server
        env:
          # Speeds up Ristretto 25519 multiplication x 2
          RUSTFLAGS: --cfg curve25519_dalek_backend="simd" -C target-cpu=native

      - name: Upload KMS for Centos7
        uses: actions/upload-artifact@v3
        with:
          name: kms_centos7
          path: |
            target/release/ckms
            target/release/cosmian_kms_server
          retention-days: 1
          if-no-files-found: error

  kms-ubuntu-20:
    needs: cleanup
    uses: ./.github/workflows/cargo_build.yml
    with:
      toolchain: ${{ inputs.toolchain }}
      distribution: ubuntu-20.04
      archive-name: kms_ubuntu_20_04
      commands: |
        cargo build --release --bin ckms
        cargo build --release --bin cosmian_kms_server
      artifacts: |
        target/release/ckms
        target/release/cosmian_kms_server

  kms-ubuntu-22:
    needs: cleanup
    uses: ./.github/workflows/cargo_build.yml
    with:
      toolchain: ${{ inputs.toolchain }}
      distribution: ubuntu-22.04
      archive-name: kms_ubuntu_22_04
      commands: |
        cargo build --release --bin ckms
        cargo build --release --bin cosmian_kms_server
      artifacts: |
        target/release/ckms
        target/release/cosmian_kms_server

  kms-windows:
    needs: cleanup
    uses: ./.github/workflows/cargo_build.yml
    with:
      toolchain: ${{ inputs.toolchain }}
      distribution: ubuntu-20.04
      archive-name: kms_windows
      commands: |
        sudo apt-get install --no-install-recommends -qq libclang-dev gcc-mingw-w64-x86-64
        rustup target add x86_64-pc-windows-gnu
        cargo build --release --bin ckms --target x86_64-pc-windows-gnu
        cargo build --release --bin cosmian_kms_server --target x86_64-pc-windows-gnu
      artifacts: |
        target/x86_64-pc-windows-gnu/release/ckms.exe
        target/x86_64-pc-windows-gnu/release/cosmian_kms_server.exe

  kms-mac:
    needs: cleanup
    uses: ./.github/workflows/cargo_build.yml
    with:
      toolchain: ${{ inputs.toolchain }}
      distribution: macos-12
      archive-name: kms_macos
      commands: |
        rustup target add x86_64-apple-darwin
        cargo build --release --bin ckms --target x86_64-apple-darwin
        cargo build --release --bin cosmian_kms_server --target x86_64-apple-darwin
      artifacts: |
        target/x86_64-apple-darwin/release/ckms
        target/x86_64-apple-darwin/release/cosmian_kms_server
