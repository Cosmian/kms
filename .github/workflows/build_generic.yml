---
name: KMS cargo build - no docker

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      distribution:
        required: true
        type: string
      archive-name:
        required: true
        type: string
      artifacts:
        required: false
        type: string
      target:
        required: true
        type: string
      debug_or_release:
        required: true
        type: string
      features:
        required: false
        type: string
      skip_services_tests:
        required: false
        type: string

env:
  OPENSSL_DIR: /usr/local/openssl

jobs:
  kms-build:
    name: ${{ inputs.archive-name }}
    runs-on: ${{ inputs.distribution }}
    steps:
      - name: Display cpuinfo
        if: contains(runner.os, 'Linux')
        run: cat /proc/cpuinfo

      - run: |
          sudo mkdir -p ${{ env.OPENSSL_DIR }}/ssl
          sudo mkdir -p ${{ env.OPENSSL_DIR }}/lib64/ossl-modules
          sudo chown -R $USER ${{ env.OPENSSL_DIR }}

      - uses: actions/checkout@v3

      - name: Cache dependencies
        id: cargo_cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ inputs.distribution }}
          cache-directories: |
            /usr/local/openssl/lib64/ossl-modules/fips.so
            /usr/local/openssl/ssl/openssl.cnf
            /usr/local/openssl/ssl/fipsmodule.cnf

      - name: Display cache-hit (${{ steps.cargo_cache.outputs.cache-hit }})
        run: |
          echo "CACHE_HIT=${{ steps.cargo_cache.outputs.cache-hit }}" >> "$GITHUB_OUTPUT"
          echo "${CACHE_HIT}"

      - uses: dtolnay/rust-toolchain@master
        if: steps.cargo_cache.outputs.cache-hit != 'true'
        with:
          toolchain: ${{ inputs.toolchain }}
          components: rustfmt, clippy

      - name: Local OpenSSL FIPS Install
        if: steps.cargo_cache.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p ${{ env.OPENSSL_DIR }}
          sudo chown -R $USER ${{ env.OPENSSL_DIR }}
          bash ./scripts/local_ossl_instl.sh ${{ env.OPENSSL_DIR }}

      - name: Build
        if: steps.cargo_cache.outputs.cache-hit != 'true'
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          TEST_GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_ID }}
          TEST_GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_SECRET }}
          TEST_GOOGLE_OAUTH_REFRESH_TOKEN: ${{ secrets.TEST_GOOGLE_OAUTH_REFRESH_TOKEN }}
          TARGET: ${{ inputs.target }}
          DEBUG_OR_RELEASE: ${{ inputs.debug_or_release }}
          FEATURES: ${{ inputs.features }}
          SKIP_SERVICES_TESTS: ${{ inputs.skip_services_tests }}
        run: |
          bash .github/scripts/cargo_build.sh

      - name: Remove large files before saving cache
        run: |
          find target/ -type f -size +100M -delete

      - name: Upload KMS for ${{ inputs.distribution }}
        if: steps.cargo_cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}
          path: |
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/ckms
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_kms_server
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/libckms_pkcs11.*
            target/${{ inputs.target }}/debian/*.deb
            ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error

    outputs:
      cache-hit: ${{ steps.cargo_cache.outputs.cache-hit }}

  kms-test:
    needs: kms-build
    if: needs.kms-build.outputs.cache-hit != 'true'
    name: Clean env. ${{ inputs.archive-name }}
    runs-on: ${{ inputs.distribution }}
    steps:
      - name: Display cache-hit (${{ needs.kms-build.outputs.cache-hit }})
        run: |
          echo "${{ needs.kms-build.outputs.cache-hit }}"

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}

      - run: find .
        if: contains(runner.os, 'linux')

      - name: Launch ckms and cosmian_kms_server
        if: contains(runner.os, 'Linux') || contains(runner.os, 'macos')
        run: |
          set -ex

          if [ "${{ inputs.features }}" = "fips" ]; then
            KMS_PATH="home/runner/work/kms/kms/target/${{ inputs.target }}/${{ inputs.debug_or_release }}"
          else
            KMS_PATH="${{ inputs.debug_or_release }}"
          fi
          chmod u+x ./$KMS_PATH/ckms
          chmod u+x ./$KMS_PATH/cosmian_kms_server

          ./$KMS_PATH/ckms -V

          # Copy openssl build for FIPS mode
          if [ -d "usr/local/openssl" ]; then
            sudo mkdir /usr/local/openssl
            sudo chown -R $USER /usr/local/openssl
            rsync -ru usr/local/openssl/ /usr/local/openssl/
            chmod u+x /usr/local/openssl/lib64/ossl-modules/fips.so
            ldd /usr/local/openssl/lib64/ossl-modules/fips.so
          fi
          ./$KMS_PATH/cosmian_kms_server -V
