---
name: KMS cargo build - no docker

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      distribution:
        required: true
        type: string
      archive-name:
        required: true
        type: string
      artifacts:
        required: false
        type: string
      target:
        required: true
        type: string
      debug_or_release:
        required: true
        type: string
      features:
        required: false
        type: string
      skip_services_tests:
        required: false
        type: string

env:
  OPENSSL_DIR: /usr/local/openssl

jobs:
  kms-build:
    name: ${{ inputs.archive-name }}
    runs-on: ${{ inputs.distribution }}
    steps:
      - name: Display cpuinfo
        if: contains(runner.os, 'Linux')
        run: cat /proc/cpuinfo

      - uses: actions/checkout@v3

      - run: |
          sudo mkdir -p ${{ env.OPENSSL_DIR }}/ssl
          sudo mkdir -p ${{ env.OPENSSL_DIR }}/lib64/ossl-modules
          sudo chown -R $USER ${{ env.OPENSSL_DIR }}
          bash .github/scripts/get_openssl_binaries.sh
        env:
          OS_NAME: ${{ inputs.archive-name }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.toolchain }}
          components: rustfmt, clippy

      - name: Build
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          TEST_GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_ID }}
          TEST_GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.TEST_GOOGLE_OAUTH_CLIENT_SECRET }}
          TEST_GOOGLE_OAUTH_REFRESH_TOKEN: ${{ secrets.TEST_GOOGLE_OAUTH_REFRESH_TOKEN }}
          TARGET: ${{ inputs.target }}
          DEBUG_OR_RELEASE: ${{ inputs.debug_or_release }}
          FEATURES: ${{ inputs.features }}
          SKIP_SERVICES_TESTS: ${{ inputs.skip_services_tests }}
        run: |
          bash .github/scripts/cargo_build.sh

      - name: Remove large files before saving cache
        run: |
          find target/ -type f -size +100M -delete

      - name: Upload KMS for ${{ inputs.distribution }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}
          path: |
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/ckms
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/cosmian_kms
            target/${{ inputs.target }}/${{ inputs.debug_or_release }}/libckms_pkcs11.*
            target/${{ inputs.target }}/debian/*.deb
            ${{ inputs.artifacts }}
          retention-days: 1
          if-no-files-found: error

  kms-test:
    needs: kms-build
    name: Clean env. ${{ inputs.archive-name }}
    runs-on: ${{ inputs.distribution }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.archive-name }}-${{ inputs.debug_or_release }}

      - run: find .
        if: contains(runner.os, 'linux')

      - name: Linux launch ckms and cosmian_kms
        if: contains(runner.os, 'Linux')
        run: |
          set -ex
          # The current path should be /home/runner/work/kms/kms
          pwd
          find . -type f
          # There are 2 subdirectories in the current path
          #   usr/local/openssl/
          #   home/runner/work/kms/kms/target/
          KMS_PATH="home/runner/work/kms/kms/target/${{ inputs.target }}/${{ inputs.debug_or_release }}"
          chmod u+x ./$KMS_PATH/ckms
          chmod u+x ./$KMS_PATH/cosmian_kms

          ./$KMS_PATH/ckms -V

          # Copy openssl build for Legacy mode
          sudo mkdir /usr/local/openssl
          sudo chown -R $USER /usr/local/openssl
          rsync -ru usr/local/openssl/ /usr/local/openssl/
          find /usr/local/openssl
          chmod u+x /usr/local/openssl/lib64/ossl-modules/*.so
          ./$KMS_PATH/cosmian_kms --info

      - name: MacOS launch ckms and cosmian_kms
        if: contains(runner.os, 'macos')
        run: |
          set -ex
          # The current path should be /Users/runner/work/kms/kms
          pwd
          ls -lah
          find . -type f
          # There are 2 subdirectories in the current path
          #   usr/local/openssl/
          #   Users/runner/work/kms/kms/target/
          KMS_PATH="Users/runner/work/kms/kms/target/${{ inputs.target }}/${{ inputs.debug_or_release }}"
          chmod u+x ./$KMS_PATH/ckms
          chmod u+x ./$KMS_PATH/cosmian_kms

          ./$KMS_PATH/ckms -V

          # Copy openssl build for Legacy mode
          sudo mkdir /usr/local/openssl
          sudo chown -R $USER /usr/local/openssl
          rsync -ru usr/local/openssl/ /usr/local/openssl/
          find /usr/local/openssl
          chmod u+x /usr/local/openssl/lib/ossl-modules/*.dylib
          ./$KMS_PATH/cosmian_kms --info

  hsm-test:
    name: KMS HSM tests
    needs: kms-build
    if: inputs.distribution == 'ubuntu-24.04'
    services:
      hsm:
        image: ubuntu
        ports:
          - 3001:3001

    runs-on: ubuntu-24.04
    steps:
      - name: Download hsm simulator
        run: |
            set -ex
            sudo dpkg --add-architecture i386
            sudo apt update && sudo apt-get install libc6:i386 libstdc++6:i386

            wget "https://package.cosmian.com/ci/hsm-simulator.tar.xz"
            echo -n Extracting compressed archive...
            tar -xvf hsm-simulator.tar.xz
            find .
            rm hsm-simulator.tar.xz
            ./hsm-simulator/sim5_linux/bin/bl_sim5 -h -o -d ./hsm-simulator/sim5_linux/devices &

      - name: Configure the PKCS#11 connection on the KMS server
        run: |
            sudo telnet localhost 3001
            sudo cp ./hsm-simulator/libcs_pkcs11_R3.so /lib directory
            sudo mkdir -p /etc/utimaco
            sudo chmod 755 /etc/utimaco
            sudo cp ./hsm-simulator/cs_pkcs11_R3.cfg /etc/utimaco/
            sudo echo -e "...\nLogpath = /tmp\n...\nLogging = 3\n...\nDevice = 3001@localhost \n..." > /etc/utimaco/cs_pkcs11_R3.cfg
            export CS_PKCS11_R3_CFG=/etc/utimaco/cs_pkcs11_R3.cfg

      - name: Test the PKCS#11 configuration using ./p11tool2 Slot=0 GetSlotInfo
        run: |
            cd hsm-simulator/Administration
            ./p11tool2 Slot=0 GetSlotInfo
            cargo test -p utimaco_pkcs11_loader --features utimaco
