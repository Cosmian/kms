use std::{fs::File, io::prelude::*, path::PathBuf};

use clap::{Parser, ValueEnum};
use cosmian_kms_client::{
    cosmian_kmip::crypto::generic::kmip_requests::build_encryption_request,
    kmip::kmip_types::{BlockCipherMode, CryptographicAlgorithm, CryptographicParameters},
    read_bytes_from_file, KmsClient,
};
use cosmian_kms_client::cosmian_kmip::crypto::symmetric::symmetric_ciphers::SymCipher;
use crate::{
    actions::console,
    cli_bail,
    error::{
        result::{CliResult, CliResultHelper},
        CliError,
    },
};

#[derive(ValueEnum, Debug, Clone, Copy)]
pub(crate) enum DataEncryptionAlgorithm {
    #[cfg(not(feature = "fips"))]
    Chacha20Poly1305,
    AesGcm,
    AesXts,
    AesGcmSiv,
}

impl From<DataEncryptionAlgorithm> for CryptographicParameters {
    fn from(value: DataEncryptionAlgorithm) -> Self {
        match value {
            #[cfg(not(feature = "fips"))]
            DataEncryptionAlgorithm::Chacha20Poly1305 => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::ChaCha20Poly1305),
                ..Self::default()
            },
            DataEncryptionAlgorithm::AesGcm => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::GCM),
                ..Self::default()
            },
            DataEncryptionAlgorithm::AesXts => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::XTS),
                ..Self::default()
            },
            #[cfg(not(feature = "fips"))]
            DataEncryptionAlgorithm::AesGcmSiv => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::GCMSIV),
                ..Self::default()
            },
        }
    }
}

#[derive(ValueEnum, Debug, Clone, Copy)]
pub(crate) enum KeyEncryptionAlgorithm {
    #[cfg(not(feature = "fips"))]
    Chacha20Poly1305,
    AesGcm,
    AesXts,
    AesGcmSiv,
    RFC5649,
}

impl From<KeyEncryptionAlgorithm> for CryptographicParameters {
    fn from(value: KeyEncryptionAlgorithm) -> Self {
        match value {
            #[cfg(not(feature = "fips"))]
            KeyEncryptionAlgorithm::Chacha20Poly1305 => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::ChaCha20Poly1305),
                ..Self::default()
            },
            KeyEncryptionAlgorithm::AesGcm => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::GCM),
                ..Self::default()
            },
            KeyEncryptionAlgorithm::AesXts => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::XTS),
                ..Self::default()
            },
            KeyEncryptionAlgorithm::AesGcmSiv => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::GCMSIV),
                ..Self::default()
            },
            KeyEncryptionAlgorithm::RFC5649 => CryptographicParameters {
                cryptographic_algorithm: Some(CryptographicAlgorithm::AES),
                block_cipher_mode: Some(BlockCipherMode::NISTKeyWrap),
                ..Self::default()
            },
        }
    }
}

/// Encrypt a file using a symmetric cipher
///
/// Encryption can happen in two ways:
///  - server side: the data is sent to the server and encrypted server side
///  - client side: the data is encrypted client side using a randomly generated ephemeral key
///  called the data encryption key (DEK). The DEK is encrypted server side using the key encryption
/// algorithm and the key encryption key (KEK) identified by the key id. The ephemeral key has
/// a size of 256 bits (512 bits for XTS).
///
/// To encrypt the data server side, do not specify the key encryption algorithm.
///
/// The bytes written to the output file are the concatenation of
///   - the encapsulated DEK if client side encryption is used
///   - the nonce used for data encryption (or tweak for XTS)
///   - the encrypted data (same size as the plaintext)
///   - the authentication tag generated by the data encryption algorithm (none, for XTS)
///
/// Note: server side encryption is not a streaming call:
/// the data is entirely loaded in memory before being encrypted.
#[derive(Parser, Debug)]
#[clap(verbatim_doc_comment)]
pub struct EncryptAction {
    /// The file to encrypt
    #[clap(required = true, name = "FILE")]
    input_file: PathBuf,

    /// The symmetric key unique identifier.
    /// If not specified, tags should be specified
    #[clap(long = "key-id", short = 'k', group = "key-tags")]
    key_id: Option<String>,

    /// The data encryption algorithm.
    /// If not specified, aes-gcm is used.
    ///
    /// If no key encryption algorithm is specified, the data will be sent to the server
    /// and will be encrypted server side.
    #[clap(
        long = "data-encryption-algorithm",
        short = 'd',
        default_value = "aes-gcm"
    )]
    data_encryption_algorithm: DataEncryptionAlgorithm,

    /// The optional key encryption algorithm.
    /// This is the algorithm used to encrypt the data encryption key.
    /// If not specified:
    ///   - the encryption of the data is performed server side.
    ///   - the key id is that of the data encryption key.
    /// If specified:
    ///  - the data is encrypted client side with the data encryption alogrithm, and using
    ///    a randomly generated ephemeral key called the data encryption key (DEK).
    ///  - the DEK is encrypted server side using the key encryption algorithm and the key
    ///    identified by the key id.
    #[clap(long = "key-encryption-algorithm", short = 'e', verbatim_doc_comment)]
    key_encryption_algorithm: Option<KeyEncryptionAlgorithm>,

    /// Tag to use to retrieve the key when no key id is specified.
    /// To specify multiple tags, use the option multiple times.
    #[clap(long = "tag", short = 't', value_name = "TAG", group = "key-tags")]
    tags: Option<Vec<String>>,

    /// The encrypted output file path
    #[clap(required = false, long, short = 'o')]
    output_file: Option<PathBuf>,

    /// Optional Nonce/IV (or tweak for XTS) as a hex string.
    /// If not provided, a random nonce is generated.
    #[clap(required = false, long, short = 'a')]
    nonce: Option<String>,

    /// Optional authentication data as a hex string.
    /// This data needs to be provided back for decryption.
    #[clap(required = false, long, short = 'a')]
    authentication_data: Option<String>,
}

impl EncryptAction {
    pub async fn run(&self, kms_rest_client: &KmsClient) -> CliResult<()> {
        // Read the file to encrypt
        let data = read_bytes_from_file(&self.input_file)
            .with_context(|| "Cannot read bytes from the file to encrypt")?;

        // Recover the unique identifier or set of tags
        let id = if let Some(key_id) = &self.key_id {
            key_id.clone()
        } else if let Some(tags) = &self.tags {
            serde_json::to_string(&tags)?
        } else {
            cli_bail!("Either `--key-id` or one or more `--tag` must be specified")
        };

        let nonce = self
            .nonce
            .as_deref()
            .map(|s| hex::decode(s))
            .transpose()
            .with_context(|| "failed to decode the nonce")?;

        let authentication_data = self
            .authentication_data
            .as_deref()
            .map(|s| hex::decode(s))
            .transpose()
            .with_context(|| "failed to decode the authentication data")?;

        let output_file = self
            .output_file
            .clone()
            .unwrap_or_else(|| self.input_file.with_extension("enc"));
        let mut buffer =
            File::create(&output_file).with_context(|| "failed to write the encrypted file")?;

        if let Some(key_encryption_algorithm) = self.key_encryption_algorithm {
            cli_bail!(
                "Key encryption algorithm {:?} is not supported",
                key_encryption_algorithm
            );
        } else {
            let (nonce, data, authentication_tag) = self
                .encrypt_server_side(
                    kms_rest_client,
                    &id,
                    self.data_encryption_algorithm.into(),
                    nonce,
                    data,
                    authentication_data,
                )
                .await?;
            buffer
                .write_all(&nonce)
                .with_context(|| "failed to write the nonce")?;
            buffer
                .write_all(&data)
                .context("failed to write the ciphertext")?;
            buffer
                .write_all(&authentication_tag)
                .context("failed to write the authentication tag")?;
        }

        let stdout = format!("The encrypted file is available at {output_file:?}");
        console::Stdout::new(&stdout).write()?;

        Ok(())
    }

    /// Encrypt the data using the specified key server side
    /// Returns the nonce, the encrypted data, and the authentication tag
    async fn encrypt_server_side(
        &self,
        kms_rest_client: &KmsClient,
        key_id: &str,
        cryptographic_parameters: CryptographicParameters,
        nonce: Option<Vec<u8>>,
        data: Vec<u8>,
        authenticated_data: Option<Vec<u8>>,
    ) -> Result<(Vec<u8>, Vec<u8>, Vec<u8>), CliError> {
        // Create the kmip query
        let encrypt_request = build_encryption_request(
            key_id,
            None,
            data,
            None,
            nonce,
            authenticated_data,
            Some(cryptographic_parameters),
        )?;

        // Query the KMS with your kmip data and get the key pair ids
        let encrypt_response = kms_rest_client
            .encrypt(encrypt_request)
            .await
            .with_context(|| "Can't execute the query on the kms server")?;

        // extract the nonce and write it
        let nonce = encrypt_response
            .iv_counter_nonce
            .context("the nonce is empty")?;

        // extract the ciphertext and write it
        let data = encrypt_response
            .data
            .context("The encrypted data is empty")?;

        // extract the authentication tag and write it
        let authentication_tag = encrypt_response
            .authenticated_encryption_tag
            .context("the authentication tag is empty")?;
        Ok((nonce, data, authentication_tag))
    }
}

fn encrypt_client_side(
    data_encryption_algorithm: DataEncryptionAlgorithm,
    nonce: Option<Vec<u8>,
    data: Vec<u8>,
    authenticated_data: Option<Vec<u8>,
) -> CliResult<(Vec<u8>, Vec<u8>, Vec<u8>)> {
    
    let key_size = match data_encryption_algorithm {
        DataEncryptionAlgorithm::AesGcm | DataEncryptionAlgorithm::Chacha20Poly1305 | DataEncryptionAlgorithm::AesGcmSiv => 32,
        DataEncryptionAlgorithm::AesXts => 64,
    };
    
    let cryptographic_parameters = data_encryption_algorithm.into();
    let cipher = SymCipher::from_algorithm_and_key_size(
        cryptographic_parameters.cryptographic_algorithm.as_ref().unwrap(),
        cryptographic_parameters.key_block_size.as_ref().unwrap(),
        key_size
    )?;
    
    cipher.
    
    cli_bail!("Client side encryption is not implemented yet")
}

