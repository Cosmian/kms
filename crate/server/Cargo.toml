[package]
name = "cosmian_kms_server"
version = "4.15.1"
authors = ["Bruno Grieder <bruno.grieder@cosmian.com>"]
edition = "2021"
license-file = "../../LICENSE"
description = "Cosmian Key Management Service"

[[bin]]
name = "cosmian_kms_server"
path = "src/main.rs"
test = false

[lib]
# doc test linking as a separate binary is extremely slow
# and is not needed for internal lib
doctest = false

[features]
# Do not verify auth0 token expiration date and https ssl is auto-signed (to avoid to be banned by letsencrypt)
insecure = []
# The binary won't start after a date chosen at compile-time
timeout = []

# Enable all the feature even insecure but timeout
staging = ["insecure"]

# Enable FIPS module feature build. KMS builds in FIPS mode when this is enabled.
fips = ["cosmian_kmip/fips"]

# No features (insecure, timeout or staging) and contain non FIPS approved libraries (e.g. Rust Crypto)
default = []
prod = []

[dependencies]
actix-cors = "0.6"
actix-identity = "0.6"
actix-rt = { workspace = true }
actix-service = "2.0"
actix-tls = "3.3"
actix-web = { workspace = true, features = ["macros", "openssl"] }
alcoholic_jwt = "4091"
async-recursion = "1.1"
async-trait = "0.1"
base64 = { workspace = true }
chrono = { workspace = true }
clap = { workspace = true, features = [
  "help",
  "env",
  "std",
  "usage",
  "error-context",
  "derive",
  "cargo",
] }
cloudproof = { workspace = true }
cloudproof_findex = { version = "5.0", features = ["findex-redis"] }
cosmian_kmip = { path = "../kmip", features = ["openssl"] }
cosmian_kms_client = { path = "../client" }
dotenvy = "0.15"
env_logger = { workspace = true }
futures = "0.3"
hex = { workspace = true, features = ["serde"] }
http = { workspace = true }
lazy_static = "1.4"
num-bigint-dig = { workspace = true, features = [
  "std",
  "rand",
  "serde",
  "zeroize",
] }
openssl = { workspace = true }
rawsql = "0.1"
redis = { version = "0.23", features = [
  "aio",
  "ahash",
  "script",
  "connection-manager",
  "tokio-comp",
] }
# Important: align the rustls version with reqwest rustls dependency
# When using client certificate authentication, reqwest will use the
# native-tls crate to create an Identity; this will be different backend
# implementations depending on the operating system. On linux, it will
# use openssl
# The default features is to guarantee that the native-tls crate will be used
reqwest = { workspace = true, features = [
  "json",
  "multipart",
  "native-tls",
  "stream",
  "blocking",
] }
serde = { workspace = true }
serde_json = { workspace = true }
sqlx = { version = "0.7.4", default-features = false, features = [
  "json",
  "runtime-tokio-native-tls",
  "mysql",
  "postgres",
  "sqlite",
] }
thiserror = { workspace = true }
time = { workspace = true, features = ["local-offset", "formatting"] }
# this version of tokio should be the same as the one used in actix-web
# run `cargo tree -i tokio` to check
tokio = { workspace = true, features = ["full"] }
toml = "0.8"
tracing = { workspace = true }
url = { workspace = true }
uuid = { workspace = true, features = ["v4"] }
x509-parser = { workspace = true }
zeroize = { workspace = true }

[dev-dependencies]
actix-http = "3.6"
pem = "3.0.3"
cosmian_logger = { path = "../logger" }

[build-dependencies]
actix-http = "3.6"
time = { workspace = true, features = ["local-offset", "formatting"] }
