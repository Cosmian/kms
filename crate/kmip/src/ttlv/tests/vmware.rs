#![allow(unused)]
use cosmian_logger::log_init;
use tracing::info;

use crate::{
    kmip_0::kmip_messages::RequestMessage,
    ttlv::{from_ttlv, KmipFlavor, TTLV},
};

const DISCOVER_VERSIONS: &str = "42007801000000604200770100000038420069010000002042006a02000000040000000100000000\
42006b0200000004000000010000000042000d02000000040000000100000000\
42000f010000001842005c05000000040000001e000000004200790100000000";

const DISCOVER_VERSIONS_RESPONSE: &str = "42007b010000017042007a01000000484200690100000020\
42006a0200000004000000010000000042006b02000000040000000100000000\
42009209000000080000000067ea85f542000d02000000040000000100000000\
42000f010000011842005c05000000040000001e0000000042007f05000000040000000000000000\
42007c01000000f0420069010000002042006a0200000004000000020000000042006b02000000040000000000000000\
420069010000002042006a0200000004000000010000000042006b02000000040000000400000000\
420069010000002042006a0200000004000000010000000042006b02000000040000000300000000\
420069010000002042006a0200000004000000010000000042006b02000000040000000200000000\
420069010000002042006a0200000004000000010000000042006b02000000040000000100000000\
420069010000002042006a0200000004000000010000000042006b02000000040000000000000000";

#[test]
fn request_1() {
    log_init(Some("debug"));
    let request = hex::decode(DISCOVER_VERSIONS).unwrap();

    let (major, minor) = TTLV::find_version(&request).unwrap();
    assert_eq!(major, 1);
    assert_eq!(minor, 1);

    let ttlv = TTLV::from_bytes(&request, KmipFlavor::Kmip1).unwrap();
    info!("request: {:#?}", ttlv);
    let request_message: RequestMessage = from_ttlv(ttlv).unwrap();
    info!("request: {:#?}", request_message);
}
