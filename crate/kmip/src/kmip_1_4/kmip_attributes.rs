use serde::{Deserialize, Serialize};

use crate::{
    kmip_1_4::{
        kmip_data_structures::CryptographicParameters,
        kmip_types::{
            AlternativeName, ApplicationSpecificInformation, CertificateType,
            CryptographicAlgorithm, CryptographicDomainParameters, CryptographicUsageMask, Digest,
            DigitalSignatureAlgorithm, KeyValueLocationType, Link, Name, ObjectType,
            RandomNumberGenerator, RevocationReason, State, UsageLimits, X509CertificateIdentifier,
        },
    },
    kmip_2_1::kmip_types::VendorAttribute,
};

/// Attributes structure containing all KMIP 1.4 attributes (51 total)
/// as specified in Chapter 3, paragraphs 3.1 to 3.51
#[derive(Serialize, Deserialize, Clone, Debug, Eq, PartialEq, Default)]
#[serde(rename_all = "PascalCase")]
pub struct Attributes {
    /// The Unique Identifier is generated by the server to uniquely identify a
    /// Managed Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unique_identifier: Option<String>,

    /// The Name attribute is a text string used to identify a Managed Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<Name>>,

    /// The Object Type attribute describes the type of Managed Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub object_type: Option<ObjectType>,

    /// The Cryptographic Algorithm attribute specifies the algorithm to be used
    /// with the Cryptographic Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cryptographic_algorithm: Option<CryptographicAlgorithm>,

    /// The Cryptographic Length attribute specifies the length in bits of the
    /// Cryptographic Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cryptographic_length: Option<i32>,

    /// The Cryptographic Parameters attribute is a structure that contains
    /// various cryptographic parameters to be used with the Cryptographic Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cryptographic_parameters: Option<CryptographicParameters>,

    /// The Cryptographic Domain Parameters attribute is a structure that contains
    /// various cryptographic domain parameters to be used with the Cryptographic Object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cryptographic_domain_parameters: Option<CryptographicDomainParameters>,

    /// The Certificate Type attribute is a type of certificate (e.g., X.509).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certificate_type: Option<CertificateType>,

    /// The Certificate Length attribute specifies the length in bits of the certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certificate_length: Option<i32>,

    /// The X.509 Certificate Identifier attribute specifies the X.509 certificate identifier.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x_509_certificate_identifier: Option<X509CertificateIdentifier>,

    /// The X.509 Certificate Subject attribute specifies the subject of the X.509 certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x_509_certificate_subject: Option<String>,

    /// The X.509 Certificate Issuer attribute specifies the issuer of the X.509 certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x_509_certificate_issuer: Option<String>,

    /// The Certificate Identifier attribute specifies the identifier of the certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certificate_identifier: Option<String>,

    /// The Certificate Subject attribute specifies the subject of the certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certificate_subject: Option<String>,

    /// The Certificate Issuer attribute specifies the issuer of the certificate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub certificate_issuer: Option<String>,

    /// The Digital Signature Algorithm attribute specifies the algorithm used
    /// to generate the digital signature.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub digital_signature_algorithm: Option<DigitalSignatureAlgorithm>,

    /// The Digest attribute specifies the digest value computed for the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub digest: Option<Digest>,

    /// The Operation Policy Name attribute specifies the operation policy for the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation_policy_name: Option<String>,

    /// The Cryptographic Usage Mask attribute specifies the cryptographic operations
    /// that may be performed using the key.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub cryptographic_usage_mask: Option<CryptographicUsageMask>,

    /// The Lease Time attribute specifies the time period during which the client
    /// expects to maintain its interest in the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lease_time: Option<i64>,

    /// The Usage Limits attribute specifies limitations on usage of the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage_limits: Option<UsageLimits>,

    /// The State attribute specifies the state of the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,

    /// The Initial Date attribute specifies when the object was initially created.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub initial_date: Option<i64>,

    /// The Activation Date attribute specifies when the object becomes active.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub activation_date: Option<i64>,

    /// The Process Start Date attribute specifies the start date for a cryptographic process.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub process_start_date: Option<i64>,

    /// The Protect Stop Date attribute specifies the stop date for a cryptographic process.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub protect_stop_date: Option<i64>,

    /// The Deactivation Date attribute specifies when the object becomes inactive.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deactivation_date: Option<i64>,

    /// The Destroy Date attribute specifies when the object was destroyed.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destroy_date: Option<i64>,

    /// The Compromise Occurrence Date attribute specifies when a compromise of
    /// the object was detected.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compromise_occurrence_date: Option<i64>,

    /// The Compromise Date attribute specifies when a compromise of the object
    /// might have occurred.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compromise_date: Option<i64>,

    /// The Revocation Reason attribute specifies the reason for revocation of the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revocation_reason: Option<RevocationReason>,

    /// The Archive Date attribute specifies when the object was archived.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub archive_date: Option<i64>,

    /// The Object Group attribute specifies the object group to which the object belongs.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub object_group: Option<String>,

    /// The Fresh attribute specifies whether the object is fresh or not.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fresh: Option<bool>,

    /// The Link attribute specifies links to related objects.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub link: Option<Vec<Link>>,

    /// The Application Specific Information attribute specifies information
    /// specific to the application.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub application_specific_information: Option<ApplicationSpecificInformation>,

    /// The Contact Information attribute specifies contact information for the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub contact_information: Option<String>,

    ///A Custom Attribute is a client- or server-defined attribute intended for vendor-specific purposes.
    /// It is created by the client and not interpreted by the server,
    /// or is created by the server and MAY be interpreted by the client.
    /// All custom attributes created by the client SHALL adhere to a naming scheme,
    /// where the name of the attribute SHALL have a prefix of 'x-'.
    /// All custom attributes created by the key management server SHALL adhere to a naming scheme
    /// where the name of the attribute SHALL have a prefix of 'y-'.
    /// The server SHALL NOT accept a client-created or modified attribute,
    /// where the name of the attribute has a prefix of ‘y-‘.
    /// The tag type Custom Attribute is not able to identify the particular attribute;
    /// hence such an attribute SHALL only appear in an Attribute Structure with
    /// its name as defined in Section 2.1.1.
    /// Note: Cosmian implementation: we map it to a 2.1 VendorAttribute
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custome_attribute: Option<VendorAttribute>,

    /// The Last Change Date attribute specifies the date and time of the last change.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub last_change_date: Option<i64>,

    /// The Alternative Name attribute specifies alternative names for the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alternative_name: Option<AlternativeName>,

    /// The Key Value Present attribute indicates whether the key value is present
    /// in the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key_value_present: Option<bool>,

    /// The Key Value Location attribute indicates the location of the key value.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub key_value_location: Option<KeyValueLocationType>,

    /// The Original Creation Date attribute specifies the date and time of the
    /// original creation of the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub original_creation_date: Option<i64>,

    /// The Random Number Generator attribute specifies the random number generator
    /// used to create the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub random_number_generator: Option<RandomNumberGenerator>,

    /// The PKCS#12 Friendly Name attribute specifies the friendly name of the object.
    #[serde(skip_serializing_if = "Option::is_none", rename = "PKCS12FriendlyName")]
    pub pkcs12_friendly_name: Option<String>,

    /// The Description attribute specifies a description of the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// The Comment attribute specifies a comment for the object.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,

    /// The Sensitive attribute indicates whether the object is sensitive.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sensitive: Option<bool>,

    /// The Always Sensitive attribute indicates whether the object has always
    /// been sensitive.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub always_sensitive: Option<bool>,

    /// The Extractable attribute indicates whether the object is extractable.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub extractable: Option<bool>,

    /// The Never Extractable attribute indicates whether the object has ever
    /// been extractable.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub never_extractable: Option<bool>,
}

impl Attributes {
    pub fn to_kmip_2_1(&self) -> crate::kmip_2_1::kmip_attributes::Attributes {
        crate::kmip_2_1::kmip_attributes::Attributes {
            unique_identifier: self.unique_identifier.as_ref().map(|s| s.to_kmip_2_1()),
            name: self
                .name
                .as_ref()
                .map(|v| v.iter().map(|n| n.to_kmip_2_1()).collect()),
            never_extractable: self.never_extractable.clone(),
            object_type: self.object_type.clone(),
            cryptographic_algorithm: self.cryptographic_algorithm.clone(),
            cryptographic_length: self.cryptographic_length.clone(),
            cryptographic_parameters: self.cryptographic_parameters.clone(),
            cryptographic_domain_parameters: self.cryptographic_domain_parameters.clone(),
            certificate_type: self.certificate_type.clone(),
            certificate_length: self.certificate_length.clone(),
            x_509_certificate_identifier: self.x_509_certificate_identifier.clone(),
            x_509_certificate_subject: self.x_509_certificate_subject.clone(),
            x_509_certificate_issuer: self.x_509_certificate_issuer.clone(),
            digital_signature_algorithm: self.digital_signature_algorithm.clone(),
            cryptographic_usage_mask: self.cryptographic_usage_mask.clone(),
            lease_time: self.lease_time.clone(),
            usage_limits: self.usage_limits.clone(),
            state: self.state.clone(),
            initial_date: self.initial_date.clone(),
            activation_date: self.activation_date.clone(),
            process_start_date: self.process_start_date.clone(),
            protect_stop_date: self.protect_stop_date.clone(),
            protection_level: None,
            protection_period: None,
            protection_storage_masks: None,
            deactivation_date: self.deactivation_date.clone(),
            destroy_date: self.destroy_date.clone(),
            compromise_occurrence_date: self.compromise_occurrence_date.clone(),
            compromise_date: self.compromise_date.clone(),
            revocation_reason: self.revocation_reason.clone(),
            rotate_date: None,
            rotate_generation: None,
            rotate_interval: None,
            rotate_latest: None,
            rotate_name: None,
            rotate_offset: None,
            sensitive: false,
            archive_date: self.archive_date.clone(),
            attribute_index: None,
            object_group: self.object_group.clone(),
            fresh: self.fresh.clone(),
            link: self.link.clone(),
            application_specific_information: self.application_specific_information.clone(),
            contact_information: self.contact_information.clone(),
            last_change_date: self.last_change_date.clone(),
            alternative_name: self.alternative_name.clone(),
            key_value_present: self.key_value_present.clone(),
            key_value_location: self.key_value_location.clone(),
            original_creation_date: self.original_creation_date.clone(),
            random_number_generator: self.random_number_generator.clone(),
            description: self.description.clone(),
            comment: self.comment.clone(),
            always_sensitive: None,
            certificate_attributes: None,
            critical: None,
            extractable: None,
            key_format_type: None,
            nist_key_type: None,
            object_group_member: None,
            opaque_data_type: None,
            pkcs_12_friendly_name: None,
            quantum_safe: None,
            short_unique_identifier: None,
            vendor_attributes: None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Attribute {
    UniqueIdentifier(String),
    Name(Vec<Name>),
    ObjectType(ObjectType),
    CryptographicAlgorithm(CryptographicAlgorithm),
    CryptographicLength(i32),
    CryptographicParameters(CryptographicParameters),
    CryptographicDomainParameters(CryptographicDomainParameters),
    CertificateType(CertificateType),
    CertificateLength(i32),
    X509CertificateIdentifier(X509CertificateIdentifier),
    X509CertificateSubject(String),
    X509CertificateIssuer(String),
    CertificateIdentifier(String),
    CertificateSubject(String),
    CertificateIssuer(String),
    DigitalSignatureAlgorithm(DigitalSignatureAlgorithm),
    Digest(Digest),
    OperationPolicyName(String),
    CryptographicUsageMask(CryptographicUsageMask),
    LeaseTime(i64),
    UsageLimits(UsageLimits),
    State(State),
    InitialDate(i64),
    ActivationDate(i64),
    ProcessStartDate(i64),
    ProtectStopDate(i64),
    DeactivationDate(i64),
    DestroyDate(i64),
    CompromiseOccurrenceDate(i64),
    CompromiseDate(i64),
    RevocationReason(RevocationReason),
    ArchiveDate(i64),
    ObjectGroup(String),
    Fresh(bool),
    Link(Vec<Link>),
    ApplicationSpecificInformation(ApplicationSpecificInformation),
    ContactInformation(String),
    LastChangeDate(i64),
    CustomAttribute(VendorAttribute),
    AlternativeName(AlternativeName),
    KeyValuePresent(bool),
    KeyValueLocation(KeyValueLocationType),
    OriginalCreationDate(i64),
    RandomNumberGenerator(RandomNumberGenerator),
    Pkcs12FriendlyName(String),
    Description(String),
    Comment(String),
    Sensitive(bool),
    AlwaysSensitive(bool),
    Extractable(bool),
    NeverExtractable(bool),
}
