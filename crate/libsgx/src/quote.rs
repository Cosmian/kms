use std::{
    fmt,
    fs::{File, OpenOptions},
    io::{BufReader, Read, Write},
};

use hex::encode;
use openssl::{error::ErrorStack, sha::Sha256};
use tracing::debug;

use crate::error::SgxError;

const SGX_REPORT_DATA_SIZE: usize = 64;
const SGX_QUOTE_MAX_SIZE: usize = 8192;
const SIZE_OF_QUOTE: usize = 437;
const SGX_CPUSVN_SIZE: usize = 16;

const SGX_REPORT_BODY_RESERVED1_BYTES: usize = 12;
const SGX_REPORT_BODY_RESERVED2_BYTES: usize = 32;
const SGX_REPORT_BODY_RESERVED3_BYTES: usize = 32;
const SGX_REPORT_BODY_RESERVED4_BYTES: usize = 42;

const SGX_TARGET_INFO_RESERVED1_BYTES: usize = 2;
const SGX_TARGET_INFO_RESERVED2_BYTES: usize = 8;
const SGX_TARGET_INFO_RESERVED3_BYTES: usize = 384;

const SGX_ISVEXT_PROD_ID_SIZE: usize = 16;
const SGX_ISV_FAMILY_ID_SIZE: usize = 16;

const SGX_HASH_SIZE: usize = 32;
const SGX_CONFIGID_SIZE: usize = 64;

const EPID: u16 = 2;
const DCAP: u16 = 3;

#[repr(C)]
#[derive(Debug)]
pub struct Attributes {
    pub flags: u64,
    pub xfrm: u64,
}

#[repr(C)]
pub struct ReportBody {
    /// (  0) Security Version of the CPU
    pub cpu_svn: [u8; SGX_CPUSVN_SIZE],
    /// ( 16) Which fields defined in SSA.MISC
    pub misc_select: u32,
    /// ( 20)
    pub reserved1: [u8; SGX_REPORT_BODY_RESERVED1_BYTES],
    /// ( 32) ISV assigned Extended Product ID
    pub isv_ext_prod_id: [u8; SGX_ISVEXT_PROD_ID_SIZE],
    /// ( 48) Any special Capabilities the Enclave possess
    pub attributes: Attributes,
    /// ( 64) The value of the enclave's ENCLAVE measurement
    pub mr_enclave: [u8; SGX_HASH_SIZE],
    /// ( 96)
    pub reserved2: [u8; SGX_REPORT_BODY_RESERVED2_BYTES],
    /// (128) The value of the enclave's SIGNER measurement
    pub mr_signer: [u8; SGX_HASH_SIZE],
    /// (160)
    pub reserved3: [u8; SGX_REPORT_BODY_RESERVED3_BYTES],
    /// (192) CONFIGID
    pub config_id: [u8; SGX_CONFIGID_SIZE],
    /// (256) Product ID of the Enclave
    pub isv_prod_id: u16,
    /// (258) Security Version of the Enclave
    pub isv_svn: u16,
    /// (260) CONFIGSVN
    pub config_svn: u16,
    /// (262)
    pub reserved4: [u8; SGX_REPORT_BODY_RESERVED4_BYTES],
    /// (304) ISV assigned Family ID
    pub isv_family_id: [u8; SGX_ISV_FAMILY_ID_SIZE],
    /// (320) Data provided by the user
    pub report_data: [u8; SGX_REPORT_DATA_SIZE],
}

impl fmt::Debug for ReportBody {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("ReportBody")
            .field("cpu_svn", &encode(&self.cpu_svn))
            .field("misc_select", &self.misc_select)
            .field("isv_ext_prod_id", &encode(&self.isv_ext_prod_id))
            .field("attributes", &self.attributes)
            .field("mr_enclave", &encode(&self.mr_enclave))
            .field("mr_signer", &encode(&self.mr_signer))
            .field("config_id", &encode(&self.config_id))
            .field("isv_prod_id", &self.isv_prod_id)
            .field("config_svn", &self.config_svn)
            .field("isv_family_id", &encode(&self.isv_family_id))
            .field("report_data", &encode(&self.report_data))
            .finish()
    }
}

#[repr(C)]
pub struct Quote {
    /// 0   
    pub version: u16,
    /// 2   
    pub sign_type: u16,
    /// 4   
    pub epid_group_id: [u8; 4],
    /// 8   
    pub qe_svn: u16,
    /// 10  
    pub pce_svn: u16,
    /// 12  
    pub xeid: u32,
    /// 16  
    pub basename: [u8; 32],
    /// 48  
    pub report_body: ReportBody,
    /// 432
    pub signature_len: u32,
    /// 436
    pub signature: [u8],
}

impl fmt::Debug for Quote {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct("Quote")
            .field("sign_type", &self.version)
            .field("epid_group_id", &encode(&self.epid_group_id))
            .field("qe_svn", &self.qe_svn)
            .field("pce_svn", &self.pce_svn)
            .field("basename", &encode(&self.basename))
            .field("report_body", &self.report_body)
            .field("signature_len", &self.signature_len)
            .field("signature", &encode(&self.signature))
            .finish()
    }
}

#[repr(C)]
pub struct TargetInfo {
    /// (  0) The MRENCLAVE of the target enclave
    pub mr_enclave: [u8; SGX_HASH_SIZE],
    /// ( 32) The ATTRIBUTES field of the target enclave
    pub attributes: Attributes,
    /// ( 48) Reserved
    pub reserved1: [u8; SGX_TARGET_INFO_RESERVED1_BYTES],
    /// ( 50) CONFIGSVN field
    pub config_svn: u16,
    /// ( 52) The MISCSELECT of the target enclave
    pub misc_select: u32,
    /// ( 56) Reserved
    pub reserved2: [u8; SGX_TARGET_INFO_RESERVED2_BYTES],
    /// ( 64) CONFIGID
    pub config_id: [u8; SGX_CONFIGID_SIZE],
    /// (128) Struct size is 512 bytes
    pub reserved3: [u8; SGX_TARGET_INFO_RESERVED3_BYTES],
}

/// Hash the quote
pub fn hash(quote: &[u8]) -> [u8; 32] {
    let mut hash = Sha256::new();
    hash.update(quote);
    hash.finish()
}

/// Build the report data to use in the quote
pub fn prepare_report_data(certificate: Option<String>, nonce: String) -> Vec<u8> {
    match certificate {
        Some(a) => [a.as_bytes(), nonce.as_bytes()].concat(),
        None => nonce.into_bytes(),
    }
}

/// # Safety
///
/// Convert a C-struct as bytes array to a rust struct
pub unsafe fn from_bytes(quote: &[u8]) -> &Quote {
    let typed_quote: &Quote = std::mem::transmute_copy(&quote);
    typed_quote
}

/// Compute the `MR_SIGNER` from the public enclave certificate (PEM format)
pub fn compute_mr_signer(public_enclave_cert: &str) -> Result<[u8; 32], ErrorStack> {
    let public_key = openssl::rsa::Rsa::public_key_from_pem(public_enclave_cert.as_bytes())?;

    let modulus = public_key.n();
    let mut modulus_bytes = modulus.to_vec();
    modulus_bytes.reverse();
    Ok(hash(&modulus_bytes))
}

/// Get the quote using a arbitrary user report data
/// The result is the base64 encoded quote
pub fn get_quote(user_report_data_slice: &[u8]) -> Result<String, SgxError> {
    if user_report_data_slice.len() > SGX_REPORT_DATA_SIZE {
        return Err(SgxError::QuoteReportDataMalformed(
            "user_report_data is too large".to_string(),
        ))
    }

    let mut user_report_data = vec![0; SGX_REPORT_DATA_SIZE];
    user_report_data.splice(
        0..user_report_data_slice.len(),
        user_report_data_slice.iter().copied(),
    );

    /* 1. write some custom data to `user_report_data` file */
    debug!("Writing /dev/attestation/user_report_data");
    {
        let mut file = OpenOptions::new()
            .write(true)
            .open("/dev/attestation/user_report_data")?;
        let size = file.write(user_report_data.as_slice())?;

        if size != user_report_data.len() {
            return Err(SgxError::EnclaveIOError(
                "Didn't write all the data ({size} / {SGX_REPORT_DATA_SIZE})".to_string(),
            ))
        }

        // We have to release the file descriptor.
        // If we don't, the user_report_data won't be in the quote
        // Done by leaving that scope
    }

    /* 2. read `quote` file */
    debug!("Reading /dev/attestation/quote");
    let mut reader = BufReader::new(File::open("/dev/attestation/quote")?);
    let mut buffer = Vec::with_capacity(SGX_QUOTE_MAX_SIZE);
    let size = reader.read_to_end(&mut buffer)?;

    /* 3. verify report data read from `quote` */
    debug!("Deserialize the quote");

    // we can't use mem::size_of::<Quote>(); because signature has unknown sized at compiled time
    if size < SIZE_OF_QUOTE {
        return Err(SgxError::EnclaveIOError(
            "Obtained SGX quote is too small: {size}B (must be at least {quote_size}B)".to_string(),
        ))
    }

    // Convert bytes array to Quote struct
    let typed_quote: &Quote = unsafe { from_bytes(&buffer) };

    debug!("Checking the quote");
    if typed_quote.version != EPID && typed_quote.version != DCAP {
        return Err(SgxError::EnclaveIOError(
            "Version of SGX quote is not EPID (2) and not ECDSA/DCAP (3)".to_string(),
        ))
    }

    if typed_quote.report_body.report_data != user_report_data.as_slice() {
        return Err(SgxError::EnclaveIOError(
            "Comparison of report data in SGX quote failed".to_string(),
        ))
    }

    debug!("base64-encode quote");
    Ok(base64::encode(&buffer))
}

#[cfg(test)]
mod tests {
    use hex::{self, encode};

    use super::{from_bytes, hash, prepare_report_data};
    use crate::quote::compute_mr_signer;
    #[test]
    pub fn test_hash() {
        assert_eq!(
            hash("123456".as_bytes()),
            hex::decode("8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92")
                .unwrap()
                .as_slice()
        )
    }

    #[test]
    pub fn test_prepare_report_data() {
        assert_eq!(
            prepare_report_data(Some(String::from("2")), String::from("1")),
            [50, 49]
        );
    }

    #[test]
    pub fn test_compute_mr_signer() {
        assert_eq!(
            encode(
                compute_mr_signer(
                    "-----BEGIN PUBLIC KEY-----
MIIBoDANBgkqhkiG9w0BAQEFAAOCAY0AMIIBiAKCAYEA2YzUlbbI7SY73icXh0vm
iIPBW6il9UVfYkTgN/FaMe5sFR2bWaQ9JhRaoXfF8ghx44z/WigkFjCQr/TacYPc
jUpNyDgOte3TbJGOIKR0riXesJAeXVHwoesZdB4QZ0ZMDoGshe5k2bl9+/4nzK0z
1BdgkpCTGFaXCTw/GlluxHoczBtTm2Gjo7feX+ETGymwiYvscje/dUERJ1NWSgT/
DxF2mRkf5nP+bKeeZ/pLtcSxZsZJMtKic5xlcEIavYm7i8fMtqAjYduPobIKwKyg
Z9vhBP2bFMzOBD0yAsifoSdZRnGDFs+KnKpCoIfB1Tjqj+OLj4l86XAC1A0rc/Xe
FqQQenlM8XhvNRjxbX59tjpXUXhTTxOtQlI7DnNxU8+RwcIIlJbm0iFnSIW3U6At
/T3feHCwPk417zjJAIMJYvjdCDfDLnw3ZM+Q1aYnzPLmScRiaUtbDnm4dJZPWed7
4+qnTOgBm+8QGug3ksh6C6hnsbZ0DtkRLOQ1u+DMexwXAgED
-----END PUBLIC KEY-----\n"
                )
                .unwrap()
            ),
            "2a6fbd91d09d26e5541a4060b0cc456827fd4d41e1928c98d89364557d40bff3"
        );
    }

    #[test]
    pub fn test_from_bytes() {
        let quote = [
            3, 0, 2, 0, 0, 0, 0, 0, 7, 0, 12, 0, 147, 154, 114, 51, 247, 156, 76, 169, 148, 10, 13,
            179, 149, 127, 6, 7, 102, 50, 72, 8, 217, 21, 248, 153, 164, 194, 93, 185, 199, 11,
            107, 224, 0, 0, 0, 0, 5, 5, 12, 12, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,
            0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 231, 107, 158, 80, 183, 172, 72, 128,
            184, 69, 47, 181, 172, 179, 142, 95, 172, 158, 211, 209, 61, 77, 22, 17, 173, 104, 192,
            104, 165, 111, 236, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 111, 189, 145, 208, 157, 38, 229, 84, 26, 64, 96,
            176, 204, 69, 104, 39, 253, 77, 65, 225, 146, 140, 152, 216, 147, 100, 85, 125, 64,
            191, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 118, 150, 58, 160, 248, 197,
            101, 2, 121, 177, 136, 240, 112, 84, 21, 252, 8, 217, 121, 136, 0, 149, 84, 77, 71,
            133, 49, 77, 89, 69, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 16, 0, 0, 220, 231, 18, 12, 173, 111, 116, 248,
            199, 149, 121, 224, 59, 56, 106, 68, 246, 147, 229, 27, 15, 168, 156, 34, 64, 11, 223,
            188, 150, 253, 5, 48, 122, 136, 129, 227, 251, 154, 100, 76, 102, 212, 85, 240, 134,
            190, 8, 97, 149, 87, 84, 221, 80, 162, 156, 241, 145, 80, 221, 159, 105, 27, 168, 60,
            182, 56, 252, 182, 248, 31, 168, 95, 197, 39, 125, 228, 177, 212, 142, 50, 25, 100, 24,
            181, 101, 57, 142, 244, 249, 121, 118, 200, 157, 93, 194, 205, 107, 176, 74, 220, 132,
            169, 109, 115, 20, 121, 26, 197, 138, 192, 176, 163, 231, 218, 188, 160, 225, 239, 180,
            129, 211, 255, 45, 108, 2, 34, 194, 207, 5, 5, 12, 12, 255, 255, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 174, 18, 60, 191,
            169, 108, 38, 133, 96, 223, 213, 223, 254, 72, 84, 206, 68, 61, 228, 224, 250, 81, 210,
            129, 24, 76, 148, 40, 215, 163, 64, 251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 79, 87, 117, 215, 150, 80, 62,
            150, 19, 127, 119, 198, 138, 130, 154, 0, 86, 172, 141, 237, 112, 20, 11, 8, 27, 9, 68,
            144, 197, 123, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 81, 251, 195,
            156, 137, 196, 142, 68, 215, 153, 255, 71, 189, 100, 84, 229, 118, 156, 100, 43, 85,
            41, 115, 211, 2, 211, 243, 188, 86, 86, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 175, 177, 30, 150, 196, 211,
            62, 248, 109, 94, 60, 24, 150, 235, 90, 188, 219, 125, 192, 85, 199, 140, 142, 137,
            208, 54, 236, 254, 57, 66, 208, 29, 128, 194, 176, 149, 20, 69, 254, 106, 55, 234, 185,
            158, 164, 44, 235, 139, 24, 51, 63, 156, 31, 184, 244, 174, 147, 105, 103, 1, 242, 146,
            177, 32, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 5, 0, 98, 14, 0, 0, 45, 45, 45, 45, 45, 66,
            69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10,
            77, 73, 73, 69, 56, 122, 67, 67, 66, 74, 109, 103, 65, 119, 73, 66, 65, 103, 73, 86,
            65, 78, 99, 99, 54, 109, 56, 98, 53, 108, 53, 118, 67, 49, 101, 98, 111, 49, 108, 56,
            69, 71, 100, 100, 115, 112, 75, 107, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57,
            66, 65, 77, 67, 10, 77, 72, 65, 120, 73, 106, 65, 103, 66, 103, 78, 86, 66, 65, 77, 77,
            71, 85, 108, 117, 100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 81, 81, 48, 115, 103,
            85, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 103, 81, 48, 69, 120, 71, 106, 65, 89,
            66, 103, 78, 86, 66, 65, 111, 77, 10, 69, 85, 108, 117, 100, 71, 86, 115, 73, 69, 78,
            118, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89,
            68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121,
            89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 10, 67, 65, 119, 67, 81, 48, 69, 120,
            67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108, 86, 84, 77, 66, 52, 88, 68,
            84, 73, 120, 77, 84, 73, 120, 78, 106, 65, 122, 77, 68, 103, 48, 77, 49, 111, 88, 68,
            84, 73, 52, 77, 84, 73, 120, 78, 106, 65, 122, 77, 68, 103, 48, 10, 77, 49, 111, 119,
            99, 68, 69, 105, 77, 67, 65, 71, 65, 49, 85, 69, 65, 119, 119, 90, 83, 87, 53, 48, 90,
            87, 119, 103, 85, 48, 100, 89, 73, 70, 66, 68, 83, 121, 66, 68, 90, 88, 74, 48, 97, 87,
            90, 112, 89, 50, 70, 48, 90, 84, 69, 97, 77, 66, 103, 71, 65, 49, 85, 69, 10, 67, 103,
            119, 82, 83, 87, 53, 48, 90, 87, 119, 103, 81, 50, 57, 121, 99, 71, 57, 121, 89, 88,
            82, 112, 98, 50, 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 99, 77, 67, 49, 78,
            104, 98, 110, 82, 104, 73, 69, 78, 115, 89, 88, 74, 104, 77, 81, 115, 119, 67, 81, 89,
            68, 10, 86, 81, 81, 73, 68, 65, 74, 68, 81, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85,
            69, 66, 104, 77, 67, 86, 86, 77, 119, 87, 84, 65, 84, 66, 103, 99, 113, 104, 107, 106,
            79, 80, 81, 73, 66, 66, 103, 103, 113, 104, 107, 106, 79, 80, 81, 77, 66, 66, 119, 78,
            67, 65, 65, 81, 99, 10, 43, 74, 89, 69, 117, 78, 87, 118, 84, 119, 55, 52, 52, 65, 56,
            72, 80, 85, 104, 52, 77, 69, 75, 72, 67, 87, 105, 112, 81, 115, 99, 106, 110, 90, 117,
            107, 52, 75, 98, 87, 97, 105, 70, 100, 57, 53, 118, 49, 112, 68, 100, 71, 90, 109, 103,
            78, 112, 71, 118, 65, 97, 81, 71, 83, 10, 55, 103, 48, 99, 89, 88, 71, 57, 55, 101, 77,
            57, 121, 121, 106, 77, 101, 118, 75, 51, 111, 52, 73, 68, 68, 106, 67, 67, 65, 119,
            111, 119, 72, 119, 89, 68, 86, 82, 48, 106, 66, 66, 103, 119, 70, 111, 65, 85, 108, 87,
            57, 100, 122, 98, 48, 98, 52, 101, 108, 65, 83, 99, 110, 85, 10, 57, 68, 80, 79, 65,
            86, 99, 76, 51, 108, 81, 119, 97, 119, 89, 68, 86, 82, 48, 102, 66, 71, 81, 119, 89,
            106, 66, 103, 111, 70, 54, 103, 88, 73, 90, 97, 97, 72, 82, 48, 99, 72, 77, 54, 76,
            121, 57, 104, 99, 71, 107, 117, 100, 72, 74, 49, 99, 51, 82, 108, 90, 72, 78, 108, 10,
            99, 110, 90, 112, 89, 50, 86, 122, 76, 109, 108, 117, 100, 71, 86, 115, 76, 109, 78,
            118, 98, 83, 57, 122, 90, 51, 103, 118, 89, 50, 86, 121, 100, 71, 108, 109, 97, 87, 78,
            104, 100, 71, 108, 118, 98, 105, 57, 50, 77, 121, 57, 119, 89, 50, 116, 106, 99, 109,
            119, 47, 89, 50, 69, 57, 10, 99, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 109, 90,
            87, 53, 106, 98, 50, 82, 112, 98, 109, 99, 57, 90, 71, 86, 121, 77, 66, 48, 71, 65, 49,
            85, 100, 68, 103, 81, 87, 66, 66, 84, 108, 88, 109, 89, 101, 103, 101, 112, 52, 105,
            90, 115, 65, 52, 122, 78, 49, 54, 53, 56, 109, 10, 105, 110, 105, 65, 50, 106, 65, 79,
            66, 103, 78, 86, 72, 81, 56, 66, 65, 102, 56, 69, 66, 65, 77, 67, 66, 115, 65, 119, 68,
            65, 89, 68, 86, 82, 48, 84, 65, 81, 72, 47, 66, 65, 73, 119, 65, 68, 67, 67, 65, 106,
            115, 71, 67, 83, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 10, 65, 81, 83, 67, 65, 105,
            119, 119, 103, 103, 73, 111, 77, 66, 52, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81,
            69, 78, 65, 81, 69, 69, 69, 78, 70, 87, 107, 100, 115, 120, 66, 75, 86, 108, 76, 75,
            112, 101, 69, 51, 83, 49, 70, 68, 89, 119, 103, 103, 70, 108, 66, 103, 111, 113, 10,
            104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 77, 73, 73, 66, 86, 84, 65, 81, 66,
            103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 65, 81, 73, 66, 66,
            68, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 67, 65,
            103, 73, 66, 10, 66, 68, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71, 43, 69, 48, 66,
            68, 81, 69, 67, 65, 119, 73, 66, 65, 122, 65, 81, 66, 103, 115, 113, 104, 107, 105, 71,
            43, 69, 48, 66, 68, 81, 69, 67, 66, 65, 73, 66, 65, 122, 65, 82, 66, 103, 115, 113,
            104, 107, 105, 71, 43, 69, 48, 66, 10, 68, 81, 69, 67, 66, 81, 73, 67, 65, 80, 56, 119,
            69, 81, 89, 76, 75, 111, 90, 73, 104, 118, 104, 78, 65, 81, 48, 66, 65, 103, 89, 67,
            65, 103, 68, 47, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65,
            81, 73, 72, 65, 103, 69, 65, 77, 66, 65, 71, 10, 67, 121, 113, 71, 83, 73, 98, 52, 84,
            81, 69, 78, 65, 81, 73, 73, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73,
            98, 52, 84, 81, 69, 78, 65, 81, 73, 74, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113,
            71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 75, 10, 65, 103, 69, 65, 77, 66, 65,
            71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 76, 65, 103, 69, 65,
            77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 77, 65,
            103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 10, 84, 81, 69, 78, 65,
            81, 73, 78, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81,
            69, 78, 65, 81, 73, 79, 65, 103, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98,
            52, 84, 81, 69, 78, 65, 81, 73, 80, 65, 103, 69, 65, 77, 66, 65, 71, 10, 67, 121, 113,
            71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 81, 65, 103, 69, 65, 77, 66, 65, 71,
            67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 82, 65, 103, 69, 76, 77,
            66, 56, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 73, 83, 10, 66,
            66, 65, 69, 66, 65, 77, 68, 47, 47, 56, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
            65, 77, 66, 65, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 77, 69,
            65, 103, 65, 65, 77, 66, 81, 71, 67, 105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 10,
            65, 81, 81, 69, 66, 103, 66, 103, 97, 103, 65, 65, 65, 68, 65, 80, 66, 103, 111, 113,
            104, 107, 105, 71, 43, 69, 48, 66, 68, 81, 69, 70, 67, 103, 69, 66, 77, 66, 52, 71, 67,
            105, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 89, 69, 69, 75, 109, 70, 49, 84,
            83, 57, 10, 113, 54, 118, 47, 119, 119, 53, 122, 116, 73, 54, 82, 50, 86, 48, 119, 82,
            65, 89, 75, 75, 111, 90, 73, 104, 118, 104, 78, 65, 81, 48, 66, 66, 122, 65, 50, 77,
            66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81, 99, 66, 65, 81,
            72, 47, 77, 66, 65, 71, 10, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69, 78, 65, 81,
            99, 67, 65, 81, 69, 65, 77, 66, 65, 71, 67, 121, 113, 71, 83, 73, 98, 52, 84, 81, 69,
            78, 65, 81, 99, 68, 65, 81, 72, 47, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57,
            66, 65, 77, 67, 65, 48, 103, 65, 10, 77, 69, 85, 67, 73, 81, 67, 100, 103, 84, 85, 71,
            86, 82, 80, 77, 78, 74, 68, 121, 54, 83, 69, 79, 100, 90, 52, 105, 84, 85, 103, 108,
            83, 70, 122, 122, 122, 89, 82, 66, 86, 54, 71, 103, 85, 47, 72, 82, 80, 103, 73, 103,
            68, 43, 116, 90, 55, 70, 109, 107, 56, 48, 56, 90, 10, 51, 102, 115, 97, 102, 100, 52,
            51, 104, 88, 52, 76, 89, 90, 80, 100, 48, 110, 80, 74, 81, 119, 43, 52, 111, 84, 121,
            111, 101, 100, 85, 61, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70,
            73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32,
            67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67,
            108, 106, 67, 67, 65, 106, 50, 103, 65, 119, 73, 66, 65, 103, 73, 86, 65, 74, 86, 118,
            88, 99, 50, 57, 71, 43, 72, 112, 81, 69, 110, 74, 49, 80, 81, 122, 122, 103, 70, 88,
            67, 57, 53, 85, 77, 65, 111, 71, 67, 67, 113, 71, 83, 77, 52, 57, 66, 65, 77, 67, 10,
            77, 71, 103, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 77, 77, 69, 85, 108, 117,
            100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 83, 98, 50, 57, 48, 73, 69, 78, 66, 77,
            82, 111, 119, 71, 65, 89, 68, 86, 81, 81, 75, 68, 66, 70, 74, 98, 110, 82, 108, 98, 67,
            66, 68, 10, 98, 51, 74, 119, 98, 51, 74, 104, 100, 71, 108, 118, 98, 106, 69, 85, 77,
            66, 73, 71, 65, 49, 85, 69, 66, 119, 119, 76, 85, 50, 70, 117, 100, 71, 69, 103, 81,
            50, 120, 104, 99, 109, 69, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 103, 77, 65,
            107, 78, 66, 77, 81, 115, 119, 10, 67, 81, 89, 68, 86, 81, 81, 71, 69, 119, 74, 86, 85,
            122, 65, 101, 70, 119, 48, 120, 79, 68, 65, 49, 77, 106, 69, 120, 77, 68, 85, 119, 77,
            84, 66, 97, 70, 119, 48, 122, 77, 122, 65, 49, 77, 106, 69, 120, 77, 68, 85, 119, 77,
            84, 66, 97, 77, 72, 65, 120, 73, 106, 65, 103, 10, 66, 103, 78, 86, 66, 65, 77, 77, 71,
            85, 108, 117, 100, 71, 86, 115, 73, 70, 78, 72, 87, 67, 66, 81, 81, 48, 115, 103, 85,
            71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66,
            103, 78, 86, 66, 65, 111, 77, 69, 85, 108, 117, 100, 71, 86, 115, 10, 73, 69, 78, 118,
            99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68,
            86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89,
            84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 67, 65, 119, 67, 81, 48, 69, 120, 10, 67,
            122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65, 108, 86, 84, 77, 70, 107, 119, 69,
            119, 89, 72, 75, 111, 90, 73, 122, 106, 48, 67, 65, 81, 89, 73, 75, 111, 90, 73, 122,
            106, 48, 68, 65, 81, 99, 68, 81, 103, 65, 69, 78, 83, 66, 47, 55, 116, 50, 49, 108, 88,
            83, 79, 10, 50, 67, 117, 122, 112, 120, 119, 55, 52, 101, 74, 66, 55, 50, 69, 121, 68,
            71, 103, 87, 53, 114, 88, 67, 116, 120, 50, 116, 86, 84, 76, 113, 54, 104, 75, 107, 54,
            122, 43, 85, 105, 82, 90, 67, 110, 113, 82, 55, 112, 115, 79, 118, 103, 113, 70, 101,
            83, 120, 108, 109, 84, 108, 74, 108, 10, 101, 84, 109, 105, 50, 87, 89, 122, 51, 113,
            79, 66, 117, 122, 67, 66, 117, 68, 65, 102, 66, 103, 78, 86, 72, 83, 77, 69, 71, 68,
            65, 87, 103, 66, 81, 105, 90, 81, 122, 87, 87, 112, 48, 48, 105, 102, 79, 68, 116, 74,
            86, 83, 118, 49, 65, 98, 79, 83, 99, 71, 114, 68, 66, 83, 10, 66, 103, 78, 86, 72, 82,
            56, 69, 83, 122, 66, 74, 77, 69, 101, 103, 82, 97, 66, 68, 104, 107, 70, 111, 100, 72,
            82, 119, 99, 122, 111, 118, 76, 50, 78, 108, 99, 110, 82, 112, 90, 109, 108, 106, 89,
            88, 82, 108, 99, 121, 53, 48, 99, 110, 86, 122, 100, 71, 86, 107, 99, 50, 86, 121, 10,
            100, 109, 108, 106, 90, 88, 77, 117, 97, 87, 53, 48, 90, 87, 119, 117, 89, 50, 57, 116,
            76, 48, 108, 117, 100, 71, 86, 115, 85, 48, 100, 89, 85, 109, 57, 118, 100, 69, 78, 66,
            76, 109, 82, 108, 99, 106, 65, 100, 66, 103, 78, 86, 72, 81, 52, 69, 70, 103, 81, 85,
            108, 87, 57, 100, 10, 122, 98, 48, 98, 52, 101, 108, 65, 83, 99, 110, 85, 57, 68, 80,
            79, 65, 86, 99, 76, 51, 108, 81, 119, 68, 103, 89, 68, 86, 82, 48, 80, 65, 81, 72, 47,
            66, 65, 81, 68, 65, 103, 69, 71, 77, 66, 73, 71, 65, 49, 85, 100, 69, 119, 69, 66, 47,
            119, 81, 73, 77, 65, 89, 66, 10, 65, 102, 56, 67, 65, 81, 65, 119, 67, 103, 89, 73, 75,
            111, 90, 73, 122, 106, 48, 69, 65, 119, 73, 68, 82, 119, 65, 119, 82, 65, 73, 103, 88,
            115, 86, 107, 105, 48, 119, 43, 105, 54, 86, 89, 71, 87, 51, 85, 70, 47, 50, 50, 117,
            97, 88, 101, 48, 89, 74, 68, 106, 49, 85, 101, 10, 110, 65, 43, 84, 106, 68, 49, 97,
            105, 53, 99, 67, 73, 67, 89, 98, 49, 83, 65, 109, 68, 53, 120, 107, 102, 84, 86, 112,
            118, 111, 52, 85, 111, 121, 105, 83, 89, 120, 114, 68, 87, 76, 109, 85, 82, 52, 67, 73,
            57, 78, 75, 121, 102, 80, 78, 43, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82,
            84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 45, 45, 45, 45, 45, 66, 69, 71,
            73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73,
            73, 67, 106, 122, 67, 67, 65, 106, 83, 103, 65, 119, 73, 66, 65, 103, 73, 85, 73, 109,
            85, 77, 49, 108, 113, 100, 78, 73, 110, 122, 103, 55, 83, 86, 85, 114, 57, 81, 71, 122,
            107, 110, 66, 113, 119, 119, 67, 103, 89, 73, 75, 111, 90, 73, 122, 106, 48, 69, 65,
            119, 73, 119, 10, 97, 68, 69, 97, 77, 66, 103, 71, 65, 49, 85, 69, 65, 119, 119, 82,
            83, 87, 53, 48, 90, 87, 119, 103, 85, 48, 100, 89, 73, 70, 74, 118, 98, 51, 81, 103,
            81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69, 85, 108, 117,
            100, 71, 86, 115, 73, 69, 78, 118, 10, 99, 110, 66, 118, 99, 109, 70, 48, 97, 87, 57,
            117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89, 87, 53, 48,
            89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 67,
            65, 119, 67, 81, 48, 69, 120, 67, 122, 65, 74, 10, 66, 103, 78, 86, 66, 65, 89, 84, 65,
            108, 86, 84, 77, 66, 52, 88, 68, 84, 69, 52, 77, 68, 85, 121, 77, 84, 69, 119, 78, 68,
            85, 120, 77, 70, 111, 88, 68, 84, 81, 53, 77, 84, 73, 122, 77, 84, 73, 122, 78, 84,
            107, 49, 79, 86, 111, 119, 97, 68, 69, 97, 77, 66, 103, 71, 10, 65, 49, 85, 69, 65,
            119, 119, 82, 83, 87, 53, 48, 90, 87, 119, 103, 85, 48, 100, 89, 73, 70, 74, 118, 98,
            51, 81, 103, 81, 48, 69, 120, 71, 106, 65, 89, 66, 103, 78, 86, 66, 65, 111, 77, 69,
            85, 108, 117, 100, 71, 86, 115, 73, 69, 78, 118, 99, 110, 66, 118, 99, 109, 70, 48, 10,
            97, 87, 57, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 72, 68, 65, 116, 84, 89,
            87, 53, 48, 89, 83, 66, 68, 98, 71, 70, 121, 89, 84, 69, 76, 77, 65, 107, 71, 65, 49,
            85, 69, 67, 65, 119, 67, 81, 48, 69, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89,
            84, 10, 65, 108, 86, 84, 77, 70, 107, 119, 69, 119, 89, 72, 75, 111, 90, 73, 122, 106,
            48, 67, 65, 81, 89, 73, 75, 111, 90, 73, 122, 106, 48, 68, 65, 81, 99, 68, 81, 103, 65,
            69, 67, 54, 110, 69, 119, 77, 68, 73, 89, 90, 79, 106, 47, 105, 80, 87, 115, 67, 122,
            97, 69, 75, 105, 55, 10, 49, 79, 105, 79, 83, 76, 82, 70, 104, 87, 71, 106, 98, 110,
            66, 86, 74, 102, 86, 110, 107, 89, 52, 117, 51, 73, 106, 107, 68, 89, 89, 76, 48, 77,
            120, 79, 52, 109, 113, 115, 121, 89, 106, 108, 66, 97, 108, 84, 86, 89, 120, 70, 80,
            50, 115, 74, 66, 75, 53, 122, 108, 75, 79, 66, 10, 117, 122, 67, 66, 117, 68, 65, 102,
            66, 103, 78, 86, 72, 83, 77, 69, 71, 68, 65, 87, 103, 66, 81, 105, 90, 81, 122, 87, 87,
            112, 48, 48, 105, 102, 79, 68, 116, 74, 86, 83, 118, 49, 65, 98, 79, 83, 99, 71, 114,
            68, 66, 83, 66, 103, 78, 86, 72, 82, 56, 69, 83, 122, 66, 74, 10, 77, 69, 101, 103, 82,
            97, 66, 68, 104, 107, 70, 111, 100, 72, 82, 119, 99, 122, 111, 118, 76, 50, 78, 108,
            99, 110, 82, 112, 90, 109, 108, 106, 89, 88, 82, 108, 99, 121, 53, 48, 99, 110, 86,
            122, 100, 71, 86, 107, 99, 50, 86, 121, 100, 109, 108, 106, 90, 88, 77, 117, 97, 87,
            53, 48, 10, 90, 87, 119, 117, 89, 50, 57, 116, 76, 48, 108, 117, 100, 71, 86, 115, 85,
            48, 100, 89, 85, 109, 57, 118, 100, 69, 78, 66, 76, 109, 82, 108, 99, 106, 65, 100, 66,
            103, 78, 86, 72, 81, 52, 69, 70, 103, 81, 85, 73, 109, 85, 77, 49, 108, 113, 100, 78,
            73, 110, 122, 103, 55, 83, 86, 10, 85, 114, 57, 81, 71, 122, 107, 110, 66, 113, 119,
            119, 68, 103, 89, 68, 86, 82, 48, 80, 65, 81, 72, 47, 66, 65, 81, 68, 65, 103, 69, 71,
            77, 66, 73, 71, 65, 49, 85, 100, 69, 119, 69, 66, 47, 119, 81, 73, 77, 65, 89, 66, 65,
            102, 56, 67, 65, 81, 69, 119, 67, 103, 89, 73, 10, 75, 111, 90, 73, 122, 106, 48, 69,
            65, 119, 73, 68, 83, 81, 65, 119, 82, 103, 73, 104, 65, 79, 87, 47, 53, 81, 107, 82,
            43, 83, 57, 67, 105, 83, 68, 99, 78, 111, 111, 119, 76, 117, 80, 82, 76, 115, 87, 71,
            102, 47, 89, 105, 55, 71, 83, 88, 57, 52, 66, 103, 119, 84, 119, 103, 10, 65, 105, 69,
            65, 52, 74, 48, 108, 114, 72, 111, 77, 115, 43, 88, 111, 53, 111, 47, 115, 88, 54, 79,
            57, 81, 87, 120, 72, 82, 65, 118, 90, 85, 71, 79, 100, 82, 81, 55, 99, 118, 113, 82,
            88, 97, 113, 73, 61, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70,
            73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 0,
        ];

        let struct_quote = unsafe { from_bytes(&quote) };

        assert_eq!(
            struct_quote.report_body.mr_enclave,
            [
                231, 107, 158, 80, 183, 172, 72, 128, 184, 69, 47, 181, 172, 179, 142, 95, 172,
                158, 211, 209, 61, 77, 22, 17, 173, 104, 192, 104, 165, 111, 236, 104
            ]
        );
        assert_eq!(
            struct_quote.report_body.mr_signer,
            [
                42, 111, 189, 145, 208, 157, 38, 229, 84, 26, 64, 96, 176, 204, 69, 104, 39, 253,
                77, 65, 225, 146, 140, 152, 216, 147, 100, 85, 125, 64, 191, 243
            ]
        );
    }
}
