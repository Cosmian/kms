/* automatically generated by rust-bindgen 0.69.4 */

// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pub const NULL_PTR: u32 = 0;
pub const CRYPTOKI_VERSION_MAJOR: CK_BYTE = 3;
pub const CRYPTOKI_VERSION_MINOR: CK_BYTE = 1;
pub const CRYPTOKI_VERSION_AMENDMENT: CK_BYTE = 0;
pub const CK_TRUE: CK_BBOOL = 1;
pub const CK_FALSE: CK_BBOOL = 0;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const CK_UNAVAILABLE_INFORMATION: CK_ULONG = 18446744073709551615;
pub const CK_EFFECTIVELY_INFINITE: CK_ULONG = 0;
pub const CK_INVALID_HANDLE: CK_ULONG = 0;
pub const CKN_SURRENDER: CK_NOTIFICATION = 0;
pub const CKN_OTP_CHANGED: CK_NOTIFICATION = 1;
pub const CKF_TOKEN_PRESENT: CK_FLAGS = 1;
pub const CKF_REMOVABLE_DEVICE: CK_FLAGS = 2;
pub const CKF_HW_SLOT: CK_FLAGS = 4;
pub const CKF_RNG: CK_FLAGS = 1;
pub const CKF_WRITE_PROTECTED: CK_FLAGS = 2;
pub const CKF_LOGIN_REQUIRED: CK_FLAGS = 4;
pub const CKF_USER_PIN_INITIALIZED: CK_FLAGS = 8;
pub const CKF_RESTORE_KEY_NOT_NEEDED: CK_FLAGS = 32;
pub const CKF_CLOCK_ON_TOKEN: CK_FLAGS = 64;
pub const CKF_PROTECTED_AUTHENTICATION_PATH: CK_FLAGS = 256;
pub const CKF_DUAL_CRYPTO_OPERATIONS: CK_FLAGS = 512;
pub const CKF_TOKEN_INITIALIZED: CK_FLAGS = 1024;
pub const CKF_SECONDARY_AUTHENTICATION: CK_FLAGS = 2048;
pub const CKF_USER_PIN_COUNT_LOW: CK_FLAGS = 65536;
pub const CKF_USER_PIN_FINAL_TRY: CK_FLAGS = 131072;
pub const CKF_USER_PIN_LOCKED: CK_FLAGS = 262144;
pub const CKF_USER_PIN_TO_BE_CHANGED: CK_FLAGS = 524288;
pub const CKF_SO_PIN_COUNT_LOW: CK_FLAGS = 1048576;
pub const CKF_SO_PIN_FINAL_TRY: CK_FLAGS = 2097152;
pub const CKF_SO_PIN_LOCKED: CK_FLAGS = 4194304;
pub const CKF_SO_PIN_TO_BE_CHANGED: CK_FLAGS = 8388608;
pub const CKF_ERROR_STATE: CK_FLAGS = 16777216;
pub const CKU_SO: CK_USER_TYPE = 0;
pub const CKU_USER: CK_USER_TYPE = 1;
pub const CKU_CONTEXT_SPECIFIC: CK_USER_TYPE = 2;
pub const CKS_RO_PUBLIC_SESSION: CK_STATE = 0;
pub const CKS_RO_USER_FUNCTIONS: CK_STATE = 1;
pub const CKS_RW_PUBLIC_SESSION: CK_STATE = 2;
pub const CKS_RW_USER_FUNCTIONS: CK_STATE = 3;
pub const CKS_RW_SO_FUNCTIONS: CK_STATE = 4;
pub const CKF_RW_SESSION: CK_FLAGS = 2;
pub const CKF_SERIAL_SESSION: CK_FLAGS = 4;
pub const CKO_DATA: CK_OBJECT_CLASS = 0;
pub const CKO_CERTIFICATE: CK_OBJECT_CLASS = 1;
pub const CKO_PUBLIC_KEY: CK_OBJECT_CLASS = 2;
pub const CKO_PRIVATE_KEY: CK_OBJECT_CLASS = 3;
pub const CKO_SECRET_KEY: CK_OBJECT_CLASS = 4;
pub const CKO_HW_FEATURE: CK_OBJECT_CLASS = 5;
pub const CKO_DOMAIN_PARAMETERS: CK_OBJECT_CLASS = 6;
pub const CKO_MECHANISM: CK_OBJECT_CLASS = 7;
pub const CKO_OTP_KEY: CK_OBJECT_CLASS = 8;
pub const CKO_PROFILE: CK_OBJECT_CLASS = 9;
pub const CKO_VENDOR_DEFINED: CK_OBJECT_CLASS = 2147483648;
pub const CKP_INVALID_ID: CK_PROFILE_ID = 0;
pub const CKP_BASELINE_PROVIDER: CK_PROFILE_ID = 1;
pub const CKP_EXTENDED_PROVIDER: CK_PROFILE_ID = 2;
pub const CKP_AUTHENTICATION_TOKEN: CK_PROFILE_ID = 3;
pub const CKP_PUBLIC_CERTIFICATES_TOKEN: CK_PROFILE_ID = 4;
pub const CKP_COMPLETE_PROVIDER: CK_PROFILE_ID = 5;
pub const CKP_HKDF_TLS_TOKEN: CK_PROFILE_ID = 6;
pub const CKP_VENDOR_DEFINED: CK_PROFILE_ID = 2147483648;
pub const CKH_MONOTONIC_COUNTER: CK_HW_FEATURE_TYPE = 1;
pub const CKH_CLOCK: CK_HW_FEATURE_TYPE = 2;
pub const CKH_USER_INTERFACE: CK_HW_FEATURE_TYPE = 3;
pub const CKH_VENDOR_DEFINED: CK_HW_FEATURE_TYPE = 2147483648;
pub const CKK_RSA: CK_KEY_TYPE = 0;
pub const CKK_DSA: CK_KEY_TYPE = 1;
pub const CKK_DH: CK_KEY_TYPE = 2;
pub const CKK_ECDSA: CK_KEY_TYPE = 3;
pub const CKK_EC: CK_KEY_TYPE = 3;
pub const CKK_X9_42_DH: CK_KEY_TYPE = 4;
pub const CKK_KEA: CK_KEY_TYPE = 5;
pub const CKK_GENERIC_SECRET: CK_KEY_TYPE = 16;
pub const CKK_RC2: CK_KEY_TYPE = 17;
pub const CKK_RC4: CK_KEY_TYPE = 18;
pub const CKK_DES: CK_KEY_TYPE = 19;
pub const CKK_DES2: CK_KEY_TYPE = 20;
pub const CKK_DES3: CK_KEY_TYPE = 21;
pub const CKK_CAST: CK_KEY_TYPE = 22;
pub const CKK_CAST3: CK_KEY_TYPE = 23;
pub const CKK_CAST5: CK_KEY_TYPE = 24;
pub const CKK_CAST128: CK_KEY_TYPE = 24;
pub const CKK_RC5: CK_KEY_TYPE = 25;
pub const CKK_IDEA: CK_KEY_TYPE = 26;
pub const CKK_SKIPJACK: CK_KEY_TYPE = 27;
pub const CKK_BATON: CK_KEY_TYPE = 28;
pub const CKK_JUNIPER: CK_KEY_TYPE = 29;
pub const CKK_CDMF: CK_KEY_TYPE = 30;
pub const CKK_AES: CK_KEY_TYPE = 31;
pub const CKK_BLOWFISH: CK_KEY_TYPE = 32;
pub const CKK_TWOFISH: CK_KEY_TYPE = 33;
pub const CKK_SECURID: CK_KEY_TYPE = 34;
pub const CKK_HOTP: CK_KEY_TYPE = 35;
pub const CKK_ACTI: CK_KEY_TYPE = 36;
pub const CKK_CAMELLIA: CK_KEY_TYPE = 37;
pub const CKK_ARIA: CK_KEY_TYPE = 38;
pub const CKK_MD5_HMAC: CK_KEY_TYPE = 39;
pub const CKK_SHA_1_HMAC: CK_KEY_TYPE = 40;
pub const CKK_RIPEMD128_HMAC: CK_KEY_TYPE = 41;
pub const CKK_RIPEMD160_HMAC: CK_KEY_TYPE = 42;
pub const CKK_SHA256_HMAC: CK_KEY_TYPE = 43;
pub const CKK_SHA384_HMAC: CK_KEY_TYPE = 44;
pub const CKK_SHA512_HMAC: CK_KEY_TYPE = 45;
pub const CKK_SHA224_HMAC: CK_KEY_TYPE = 46;
pub const CKK_SEED: CK_KEY_TYPE = 47;
pub const CKK_GOSTR3410: CK_KEY_TYPE = 48;
pub const CKK_GOSTR3411: CK_KEY_TYPE = 49;
pub const CKK_GOST28147: CK_KEY_TYPE = 50;
pub const CKK_CHACHA20: CK_KEY_TYPE = 51;
pub const CKK_POLY1305: CK_KEY_TYPE = 52;
pub const CKK_AES_XTS: CK_KEY_TYPE = 53;
pub const CKK_SHA3_224_HMAC: CK_KEY_TYPE = 54;
pub const CKK_SHA3_256_HMAC: CK_KEY_TYPE = 55;
pub const CKK_SHA3_384_HMAC: CK_KEY_TYPE = 56;
pub const CKK_SHA3_512_HMAC: CK_KEY_TYPE = 57;
pub const CKK_BLAKE2B_160_HMAC: CK_KEY_TYPE = 58;
pub const CKK_BLAKE2B_256_HMAC: CK_KEY_TYPE = 59;
pub const CKK_BLAKE2B_384_HMAC: CK_KEY_TYPE = 60;
pub const CKK_BLAKE2B_512_HMAC: CK_KEY_TYPE = 61;
pub const CKK_SALSA20: CK_KEY_TYPE = 62;
pub const CKK_X2RATCHET: CK_KEY_TYPE = 63;
pub const CKK_EC_EDWARDS: CK_KEY_TYPE = 64;
pub const CKK_EC_MONTGOMERY: CK_KEY_TYPE = 65;
pub const CKK_HKDF: CK_KEY_TYPE = 66;
pub const CKK_SHA512_224_HMAC: CK_KEY_TYPE = 67;
pub const CKK_SHA512_256_HMAC: CK_KEY_TYPE = 68;
pub const CKK_SHA512_T_HMAC: CK_KEY_TYPE = 69;
pub const CKK_HSS: CK_KEY_TYPE = 70;
pub const CKK_VENDOR_DEFINED: CK_KEY_TYPE = 2147483648;
pub const CK_CERTIFICATE_CATEGORY_UNSPECIFIED: CK_ULONG = 0;
pub const CK_CERTIFICATE_CATEGORY_TOKEN_USER: CK_ULONG = 1;
pub const CK_CERTIFICATE_CATEGORY_AUTHORITY: CK_ULONG = 2;
pub const CK_CERTIFICATE_CATEGORY_OTHER_ENTITY: CK_ULONG = 3;
pub const CK_SECURITY_DOMAIN_UNSPECIFIED: CK_ULONG = 0;
pub const CK_SECURITY_DOMAIN_MANUFACTURER: CK_ULONG = 1;
pub const CK_SECURITY_DOMAIN_OPERATOR: CK_ULONG = 2;
pub const CK_SECURITY_DOMAIN_THIRD_PARTY: CK_ULONG = 3;
pub const CKC_X_509: CK_CERTIFICATE_TYPE = 0;
pub const CKC_X_509_ATTR_CERT: CK_CERTIFICATE_TYPE = 1;
pub const CKC_WTLS: CK_CERTIFICATE_TYPE = 2;
pub const CKC_VENDOR_DEFINED: CK_CERTIFICATE_TYPE = 2147483648;
pub const CKF_ARRAY_ATTRIBUTE: CK_FLAGS = 1073741824;
pub const CK_OTP_FORMAT_DECIMAL: CK_ULONG = 0;
pub const CK_OTP_FORMAT_HEXADECIMAL: CK_ULONG = 1;
pub const CK_OTP_FORMAT_ALPHANUMERIC: CK_ULONG = 2;
pub const CK_OTP_FORMAT_BINARY: CK_ULONG = 3;
pub const CK_OTP_PARAM_IGNORED: CK_ULONG = 0;
pub const CK_OTP_PARAM_OPTIONAL: CK_ULONG = 1;
pub const CK_OTP_PARAM_MANDATORY: CK_ULONG = 2;
pub const CKA_CLASS: CK_ATTRIBUTE_TYPE = 0;
pub const CKA_TOKEN: CK_ATTRIBUTE_TYPE = 1;
pub const CKA_PRIVATE: CK_ATTRIBUTE_TYPE = 2;
pub const CKA_LABEL: CK_ATTRIBUTE_TYPE = 3;
pub const CKA_UNIQUE_ID: CK_ATTRIBUTE_TYPE = 4;
pub const CKA_APPLICATION: CK_ATTRIBUTE_TYPE = 16;
pub const CKA_VALUE: CK_ATTRIBUTE_TYPE = 17;
pub const CKA_OBJECT_ID: CK_ATTRIBUTE_TYPE = 18;
pub const CKA_CERTIFICATE_TYPE: CK_ATTRIBUTE_TYPE = 128;
pub const CKA_ISSUER: CK_ATTRIBUTE_TYPE = 129;
pub const CKA_SERIAL_NUMBER: CK_ATTRIBUTE_TYPE = 130;
pub const CKA_AC_ISSUER: CK_ATTRIBUTE_TYPE = 131;
pub const CKA_OWNER: CK_ATTRIBUTE_TYPE = 132;
pub const CKA_ATTR_TYPES: CK_ATTRIBUTE_TYPE = 133;
pub const CKA_TRUSTED: CK_ATTRIBUTE_TYPE = 134;
pub const CKA_CERTIFICATE_CATEGORY: CK_ATTRIBUTE_TYPE = 135;
pub const CKA_JAVA_MIDP_SECURITY_DOMAIN: CK_ATTRIBUTE_TYPE = 136;
pub const CKA_URL: CK_ATTRIBUTE_TYPE = 137;
pub const CKA_HASH_OF_SUBJECT_PUBLIC_KEY: CK_ATTRIBUTE_TYPE = 138;
pub const CKA_HASH_OF_ISSUER_PUBLIC_KEY: CK_ATTRIBUTE_TYPE = 139;
pub const CKA_NAME_HASH_ALGORITHM: CK_ATTRIBUTE_TYPE = 140;
pub const CKA_CHECK_VALUE: CK_ATTRIBUTE_TYPE = 144;
pub const CKA_KEY_TYPE: CK_ATTRIBUTE_TYPE = 256;
pub const CKA_SUBJECT: CK_ATTRIBUTE_TYPE = 257;
pub const CKA_ID: CK_ATTRIBUTE_TYPE = 258;
pub const CKA_SENSITIVE: CK_ATTRIBUTE_TYPE = 259;
pub const CKA_ENCRYPT: CK_ATTRIBUTE_TYPE = 260;
pub const CKA_DECRYPT: CK_ATTRIBUTE_TYPE = 261;
pub const CKA_WRAP: CK_ATTRIBUTE_TYPE = 262;
pub const CKA_UNWRAP: CK_ATTRIBUTE_TYPE = 263;
pub const CKA_SIGN: CK_ATTRIBUTE_TYPE = 264;
pub const CKA_SIGN_RECOVER: CK_ATTRIBUTE_TYPE = 265;
pub const CKA_VERIFY: CK_ATTRIBUTE_TYPE = 266;
pub const CKA_VERIFY_RECOVER: CK_ATTRIBUTE_TYPE = 267;
pub const CKA_DERIVE: CK_ATTRIBUTE_TYPE = 268;
pub const CKA_START_DATE: CK_ATTRIBUTE_TYPE = 272;
pub const CKA_END_DATE: CK_ATTRIBUTE_TYPE = 273;
pub const CKA_MODULUS: CK_ATTRIBUTE_TYPE = 288;
pub const CKA_MODULUS_BITS: CK_ATTRIBUTE_TYPE = 289;
pub const CKA_PUBLIC_EXPONENT: CK_ATTRIBUTE_TYPE = 290;
pub const CKA_PRIVATE_EXPONENT: CK_ATTRIBUTE_TYPE = 291;
pub const CKA_PRIME_1: CK_ATTRIBUTE_TYPE = 292;
pub const CKA_PRIME_2: CK_ATTRIBUTE_TYPE = 293;
pub const CKA_EXPONENT_1: CK_ATTRIBUTE_TYPE = 294;
pub const CKA_EXPONENT_2: CK_ATTRIBUTE_TYPE = 295;
pub const CKA_COEFFICIENT: CK_ATTRIBUTE_TYPE = 296;
pub const CKA_PUBLIC_KEY_INFO: CK_ATTRIBUTE_TYPE = 297;
pub const CKA_PRIME: CK_ATTRIBUTE_TYPE = 304;
pub const CKA_SUBPRIME: CK_ATTRIBUTE_TYPE = 305;
pub const CKA_BASE: CK_ATTRIBUTE_TYPE = 306;
pub const CKA_PRIME_BITS: CK_ATTRIBUTE_TYPE = 307;
pub const CKA_SUBPRIME_BITS: CK_ATTRIBUTE_TYPE = 308;
pub const CKA_SUB_PRIME_BITS: CK_ATTRIBUTE_TYPE = 308;
pub const CKA_VALUE_BITS: CK_ATTRIBUTE_TYPE = 352;
pub const CKA_VALUE_LEN: CK_ATTRIBUTE_TYPE = 353;
pub const CKA_EXTRACTABLE: CK_ATTRIBUTE_TYPE = 354;
pub const CKA_LOCAL: CK_ATTRIBUTE_TYPE = 355;
pub const CKA_NEVER_EXTRACTABLE: CK_ATTRIBUTE_TYPE = 356;
pub const CKA_ALWAYS_SENSITIVE: CK_ATTRIBUTE_TYPE = 357;
pub const CKA_KEY_GEN_MECHANISM: CK_ATTRIBUTE_TYPE = 358;
pub const CKA_MODIFIABLE: CK_ATTRIBUTE_TYPE = 368;
pub const CKA_COPYABLE: CK_ATTRIBUTE_TYPE = 369;
pub const CKA_DESTROYABLE: CK_ATTRIBUTE_TYPE = 370;
pub const CKA_ECDSA_PARAMS: CK_ATTRIBUTE_TYPE = 384;
pub const CKA_EC_PARAMS: CK_ATTRIBUTE_TYPE = 384;
pub const CKA_EC_POINT: CK_ATTRIBUTE_TYPE = 385;
pub const CKA_SECONDARY_AUTH: CK_ATTRIBUTE_TYPE = 512;
pub const CKA_AUTH_PIN_FLAGS: CK_ATTRIBUTE_TYPE = 513;
pub const CKA_ALWAYS_AUTHENTICATE: CK_ATTRIBUTE_TYPE = 514;
pub const CKA_WRAP_WITH_TRUSTED: CK_ATTRIBUTE_TYPE = 528;
pub const CKA_WRAP_TEMPLATE: CK_ATTRIBUTE_TYPE = 1073742353;
pub const CKA_UNWRAP_TEMPLATE: CK_ATTRIBUTE_TYPE = 1073742354;
pub const CKA_DERIVE_TEMPLATE: CK_ATTRIBUTE_TYPE = 1073742355;
pub const CKA_OTP_FORMAT: CK_ATTRIBUTE_TYPE = 544;
pub const CKA_OTP_LENGTH: CK_ATTRIBUTE_TYPE = 545;
pub const CKA_OTP_TIME_INTERVAL: CK_ATTRIBUTE_TYPE = 546;
pub const CKA_OTP_USER_FRIENDLY_MODE: CK_ATTRIBUTE_TYPE = 547;
pub const CKA_OTP_CHALLENGE_REQUIREMENT: CK_ATTRIBUTE_TYPE = 548;
pub const CKA_OTP_TIME_REQUIREMENT: CK_ATTRIBUTE_TYPE = 549;
pub const CKA_OTP_COUNTER_REQUIREMENT: CK_ATTRIBUTE_TYPE = 550;
pub const CKA_OTP_PIN_REQUIREMENT: CK_ATTRIBUTE_TYPE = 551;
pub const CKA_OTP_COUNTER: CK_ATTRIBUTE_TYPE = 558;
pub const CKA_OTP_TIME: CK_ATTRIBUTE_TYPE = 559;
pub const CKA_OTP_USER_IDENTIFIER: CK_ATTRIBUTE_TYPE = 554;
pub const CKA_OTP_SERVICE_IDENTIFIER: CK_ATTRIBUTE_TYPE = 555;
pub const CKA_OTP_SERVICE_LOGO: CK_ATTRIBUTE_TYPE = 556;
pub const CKA_OTP_SERVICE_LOGO_TYPE: CK_ATTRIBUTE_TYPE = 557;
pub const CKA_GOSTR3410_PARAMS: CK_ATTRIBUTE_TYPE = 592;
pub const CKA_GOSTR3411_PARAMS: CK_ATTRIBUTE_TYPE = 593;
pub const CKA_GOST28147_PARAMS: CK_ATTRIBUTE_TYPE = 594;
pub const CKA_HW_FEATURE_TYPE: CK_ATTRIBUTE_TYPE = 768;
pub const CKA_RESET_ON_INIT: CK_ATTRIBUTE_TYPE = 769;
pub const CKA_HAS_RESET: CK_ATTRIBUTE_TYPE = 770;
pub const CKA_PIXEL_X: CK_ATTRIBUTE_TYPE = 1024;
pub const CKA_PIXEL_Y: CK_ATTRIBUTE_TYPE = 1025;
pub const CKA_RESOLUTION: CK_ATTRIBUTE_TYPE = 1026;
pub const CKA_CHAR_ROWS: CK_ATTRIBUTE_TYPE = 1027;
pub const CKA_CHAR_COLUMNS: CK_ATTRIBUTE_TYPE = 1028;
pub const CKA_COLOR: CK_ATTRIBUTE_TYPE = 1029;
pub const CKA_BITS_PER_PIXEL: CK_ATTRIBUTE_TYPE = 1030;
pub const CKA_CHAR_SETS: CK_ATTRIBUTE_TYPE = 1152;
pub const CKA_ENCODING_METHODS: CK_ATTRIBUTE_TYPE = 1153;
pub const CKA_MIME_TYPES: CK_ATTRIBUTE_TYPE = 1154;
pub const CKA_MECHANISM_TYPE: CK_ATTRIBUTE_TYPE = 1280;
pub const CKA_REQUIRED_CMS_ATTRIBUTES: CK_ATTRIBUTE_TYPE = 1281;
pub const CKA_DEFAULT_CMS_ATTRIBUTES: CK_ATTRIBUTE_TYPE = 1282;
pub const CKA_SUPPORTED_CMS_ATTRIBUTES: CK_ATTRIBUTE_TYPE = 1283;
pub const CKA_ALLOWED_MECHANISMS: CK_ATTRIBUTE_TYPE = 1073743360;
pub const CKA_PROFILE_ID: CK_ATTRIBUTE_TYPE = 1537;
pub const CKA_X2RATCHET_BAG: CK_ATTRIBUTE_TYPE = 1538;
pub const CKA_X2RATCHET_BAGSIZE: CK_ATTRIBUTE_TYPE = 1539;
pub const CKA_X2RATCHET_BOBS1STMSG: CK_ATTRIBUTE_TYPE = 1540;
pub const CKA_X2RATCHET_CKR: CK_ATTRIBUTE_TYPE = 1541;
pub const CKA_X2RATCHET_CKS: CK_ATTRIBUTE_TYPE = 1542;
pub const CKA_X2RATCHET_DHP: CK_ATTRIBUTE_TYPE = 1543;
pub const CKA_X2RATCHET_DHR: CK_ATTRIBUTE_TYPE = 1544;
pub const CKA_X2RATCHET_DHS: CK_ATTRIBUTE_TYPE = 1545;
pub const CKA_X2RATCHET_HKR: CK_ATTRIBUTE_TYPE = 1546;
pub const CKA_X2RATCHET_HKS: CK_ATTRIBUTE_TYPE = 1547;
pub const CKA_X2RATCHET_ISALICE: CK_ATTRIBUTE_TYPE = 1548;
pub const CKA_X2RATCHET_NHKR: CK_ATTRIBUTE_TYPE = 1549;
pub const CKA_X2RATCHET_NHKS: CK_ATTRIBUTE_TYPE = 1550;
pub const CKA_X2RATCHET_NR: CK_ATTRIBUTE_TYPE = 1551;
pub const CKA_X2RATCHET_NS: CK_ATTRIBUTE_TYPE = 1552;
pub const CKA_X2RATCHET_PNS: CK_ATTRIBUTE_TYPE = 1553;
pub const CKA_X2RATCHET_RK: CK_ATTRIBUTE_TYPE = 1554;
pub const CKA_HSS_LEVELS: CK_ATTRIBUTE_TYPE = 1559;
pub const CKA_HSS_LMS_TYPE: CK_ATTRIBUTE_TYPE = 1560;
pub const CKA_HSS_LMOTS_TYPE: CK_ATTRIBUTE_TYPE = 1561;
pub const CKA_HSS_LMS_TYPES: CK_ATTRIBUTE_TYPE = 1562;
pub const CKA_HSS_LMOTS_TYPES: CK_ATTRIBUTE_TYPE = 1563;
pub const CKA_HSS_KEYS_REMAINING: CK_ATTRIBUTE_TYPE = 1564;
pub const CKA_VENDOR_DEFINED: CK_ATTRIBUTE_TYPE = 2147483648;
pub const CKM_RSA_PKCS_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 0;
pub const CKM_RSA_PKCS: CK_MECHANISM_TYPE = 1;
pub const CKM_RSA_9796: CK_MECHANISM_TYPE = 2;
pub const CKM_RSA_X_509: CK_MECHANISM_TYPE = 3;
pub const CKM_MD2_RSA_PKCS: CK_MECHANISM_TYPE = 4;
pub const CKM_MD5_RSA_PKCS: CK_MECHANISM_TYPE = 5;
pub const CKM_SHA1_RSA_PKCS: CK_MECHANISM_TYPE = 6;
pub const CKM_RIPEMD128_RSA_PKCS: CK_MECHANISM_TYPE = 7;
pub const CKM_RIPEMD160_RSA_PKCS: CK_MECHANISM_TYPE = 8;
pub const CKM_RSA_PKCS_OAEP: CK_MECHANISM_TYPE = 9;
pub const CKM_RSA_X9_31_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 10;
pub const CKM_RSA_X9_31: CK_MECHANISM_TYPE = 11;
pub const CKM_SHA1_RSA_X9_31: CK_MECHANISM_TYPE = 12;
pub const CKM_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 13;
pub const CKM_SHA1_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 14;
pub const CKM_DSA_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 16;
pub const CKM_DSA: CK_MECHANISM_TYPE = 17;
pub const CKM_DSA_SHA1: CK_MECHANISM_TYPE = 18;
pub const CKM_DSA_SHA224: CK_MECHANISM_TYPE = 19;
pub const CKM_DSA_SHA256: CK_MECHANISM_TYPE = 20;
pub const CKM_DSA_SHA384: CK_MECHANISM_TYPE = 21;
pub const CKM_DSA_SHA512: CK_MECHANISM_TYPE = 22;
pub const CKM_DSA_SHA3_224: CK_MECHANISM_TYPE = 24;
pub const CKM_DSA_SHA3_256: CK_MECHANISM_TYPE = 25;
pub const CKM_DSA_SHA3_384: CK_MECHANISM_TYPE = 26;
pub const CKM_DSA_SHA3_512: CK_MECHANISM_TYPE = 27;
pub const CKM_DH_PKCS_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 32;
pub const CKM_DH_PKCS_DERIVE: CK_MECHANISM_TYPE = 33;
pub const CKM_X9_42_DH_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 48;
pub const CKM_X9_42_DH_DERIVE: CK_MECHANISM_TYPE = 49;
pub const CKM_X9_42_DH_HYBRID_DERIVE: CK_MECHANISM_TYPE = 50;
pub const CKM_X9_42_MQV_DERIVE: CK_MECHANISM_TYPE = 51;
pub const CKM_SHA256_RSA_PKCS: CK_MECHANISM_TYPE = 64;
pub const CKM_SHA384_RSA_PKCS: CK_MECHANISM_TYPE = 65;
pub const CKM_SHA512_RSA_PKCS: CK_MECHANISM_TYPE = 66;
pub const CKM_SHA256_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 67;
pub const CKM_SHA384_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 68;
pub const CKM_SHA512_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 69;
pub const CKM_SHA224_RSA_PKCS: CK_MECHANISM_TYPE = 70;
pub const CKM_SHA224_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 71;
pub const CKM_SHA512_224: CK_MECHANISM_TYPE = 72;
pub const CKM_SHA512_224_HMAC: CK_MECHANISM_TYPE = 73;
pub const CKM_SHA512_224_HMAC_GENERAL: CK_MECHANISM_TYPE = 74;
pub const CKM_SHA512_224_KEY_DERIVATION: CK_MECHANISM_TYPE = 75;
pub const CKM_SHA512_256: CK_MECHANISM_TYPE = 76;
pub const CKM_SHA512_256_HMAC: CK_MECHANISM_TYPE = 77;
pub const CKM_SHA512_256_HMAC_GENERAL: CK_MECHANISM_TYPE = 78;
pub const CKM_SHA512_256_KEY_DERIVATION: CK_MECHANISM_TYPE = 79;
pub const CKM_SHA512_T: CK_MECHANISM_TYPE = 80;
pub const CKM_SHA512_T_HMAC: CK_MECHANISM_TYPE = 81;
pub const CKM_SHA512_T_HMAC_GENERAL: CK_MECHANISM_TYPE = 82;
pub const CKM_SHA512_T_KEY_DERIVATION: CK_MECHANISM_TYPE = 83;
pub const CKM_SHA3_256_RSA_PKCS: CK_MECHANISM_TYPE = 96;
pub const CKM_SHA3_384_RSA_PKCS: CK_MECHANISM_TYPE = 97;
pub const CKM_SHA3_512_RSA_PKCS: CK_MECHANISM_TYPE = 98;
pub const CKM_SHA3_256_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 99;
pub const CKM_SHA3_384_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 100;
pub const CKM_SHA3_512_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 101;
pub const CKM_SHA3_224_RSA_PKCS: CK_MECHANISM_TYPE = 102;
pub const CKM_SHA3_224_RSA_PKCS_PSS: CK_MECHANISM_TYPE = 103;
pub const CKM_RC2_KEY_GEN: CK_MECHANISM_TYPE = 256;
pub const CKM_RC2_ECB: CK_MECHANISM_TYPE = 257;
pub const CKM_RC2_CBC: CK_MECHANISM_TYPE = 258;
pub const CKM_RC2_MAC: CK_MECHANISM_TYPE = 259;
pub const CKM_RC2_MAC_GENERAL: CK_MECHANISM_TYPE = 260;
pub const CKM_RC2_CBC_PAD: CK_MECHANISM_TYPE = 261;
pub const CKM_RC4_KEY_GEN: CK_MECHANISM_TYPE = 272;
pub const CKM_RC4: CK_MECHANISM_TYPE = 273;
pub const CKM_DES_KEY_GEN: CK_MECHANISM_TYPE = 288;
pub const CKM_DES_ECB: CK_MECHANISM_TYPE = 289;
pub const CKM_DES_CBC: CK_MECHANISM_TYPE = 290;
pub const CKM_DES_MAC: CK_MECHANISM_TYPE = 291;
pub const CKM_DES_MAC_GENERAL: CK_MECHANISM_TYPE = 292;
pub const CKM_DES_CBC_PAD: CK_MECHANISM_TYPE = 293;
pub const CKM_DES2_KEY_GEN: CK_MECHANISM_TYPE = 304;
pub const CKM_DES3_KEY_GEN: CK_MECHANISM_TYPE = 305;
pub const CKM_DES3_ECB: CK_MECHANISM_TYPE = 306;
pub const CKM_DES3_CBC: CK_MECHANISM_TYPE = 307;
pub const CKM_DES3_MAC: CK_MECHANISM_TYPE = 308;
pub const CKM_DES3_MAC_GENERAL: CK_MECHANISM_TYPE = 309;
pub const CKM_DES3_CBC_PAD: CK_MECHANISM_TYPE = 310;
pub const CKM_DES3_CMAC_GENERAL: CK_MECHANISM_TYPE = 311;
pub const CKM_DES3_CMAC: CK_MECHANISM_TYPE = 312;
pub const CKM_CDMF_KEY_GEN: CK_MECHANISM_TYPE = 320;
pub const CKM_CDMF_ECB: CK_MECHANISM_TYPE = 321;
pub const CKM_CDMF_CBC: CK_MECHANISM_TYPE = 322;
pub const CKM_CDMF_MAC: CK_MECHANISM_TYPE = 323;
pub const CKM_CDMF_MAC_GENERAL: CK_MECHANISM_TYPE = 324;
pub const CKM_CDMF_CBC_PAD: CK_MECHANISM_TYPE = 325;
pub const CKM_DES_OFB64: CK_MECHANISM_TYPE = 336;
pub const CKM_DES_OFB8: CK_MECHANISM_TYPE = 337;
pub const CKM_DES_CFB64: CK_MECHANISM_TYPE = 338;
pub const CKM_DES_CFB8: CK_MECHANISM_TYPE = 339;
pub const CKM_MD2: CK_MECHANISM_TYPE = 512;
pub const CKM_MD2_HMAC: CK_MECHANISM_TYPE = 513;
pub const CKM_MD2_HMAC_GENERAL: CK_MECHANISM_TYPE = 514;
pub const CKM_MD5: CK_MECHANISM_TYPE = 528;
pub const CKM_MD5_HMAC: CK_MECHANISM_TYPE = 529;
pub const CKM_MD5_HMAC_GENERAL: CK_MECHANISM_TYPE = 530;
pub const CKM_SHA_1: CK_MECHANISM_TYPE = 544;
pub const CKM_SHA_1_HMAC: CK_MECHANISM_TYPE = 545;
pub const CKM_SHA_1_HMAC_GENERAL: CK_MECHANISM_TYPE = 546;
pub const CKM_RIPEMD128: CK_MECHANISM_TYPE = 560;
pub const CKM_RIPEMD128_HMAC: CK_MECHANISM_TYPE = 561;
pub const CKM_RIPEMD128_HMAC_GENERAL: CK_MECHANISM_TYPE = 562;
pub const CKM_RIPEMD160: CK_MECHANISM_TYPE = 576;
pub const CKM_RIPEMD160_HMAC: CK_MECHANISM_TYPE = 577;
pub const CKM_RIPEMD160_HMAC_GENERAL: CK_MECHANISM_TYPE = 578;
pub const CKM_SHA256: CK_MECHANISM_TYPE = 592;
pub const CKM_SHA256_HMAC: CK_MECHANISM_TYPE = 593;
pub const CKM_SHA256_HMAC_GENERAL: CK_MECHANISM_TYPE = 594;
pub const CKM_SHA224: CK_MECHANISM_TYPE = 597;
pub const CKM_SHA224_HMAC: CK_MECHANISM_TYPE = 598;
pub const CKM_SHA224_HMAC_GENERAL: CK_MECHANISM_TYPE = 599;
pub const CKM_SHA384: CK_MECHANISM_TYPE = 608;
pub const CKM_SHA384_HMAC: CK_MECHANISM_TYPE = 609;
pub const CKM_SHA384_HMAC_GENERAL: CK_MECHANISM_TYPE = 610;
pub const CKM_SHA512: CK_MECHANISM_TYPE = 624;
pub const CKM_SHA512_HMAC: CK_MECHANISM_TYPE = 625;
pub const CKM_SHA512_HMAC_GENERAL: CK_MECHANISM_TYPE = 626;
pub const CKM_SECURID_KEY_GEN: CK_MECHANISM_TYPE = 640;
pub const CKM_SECURID: CK_MECHANISM_TYPE = 642;
pub const CKM_HOTP_KEY_GEN: CK_MECHANISM_TYPE = 656;
pub const CKM_HOTP: CK_MECHANISM_TYPE = 657;
pub const CKM_ACTI: CK_MECHANISM_TYPE = 672;
pub const CKM_ACTI_KEY_GEN: CK_MECHANISM_TYPE = 673;
pub const CKM_SHA3_256: CK_MECHANISM_TYPE = 688;
pub const CKM_SHA3_256_HMAC: CK_MECHANISM_TYPE = 689;
pub const CKM_SHA3_256_HMAC_GENERAL: CK_MECHANISM_TYPE = 690;
pub const CKM_SHA3_256_KEY_GEN: CK_MECHANISM_TYPE = 691;
pub const CKM_SHA3_224: CK_MECHANISM_TYPE = 693;
pub const CKM_SHA3_224_HMAC: CK_MECHANISM_TYPE = 694;
pub const CKM_SHA3_224_HMAC_GENERAL: CK_MECHANISM_TYPE = 695;
pub const CKM_SHA3_224_KEY_GEN: CK_MECHANISM_TYPE = 696;
pub const CKM_SHA3_384: CK_MECHANISM_TYPE = 704;
pub const CKM_SHA3_384_HMAC: CK_MECHANISM_TYPE = 705;
pub const CKM_SHA3_384_HMAC_GENERAL: CK_MECHANISM_TYPE = 706;
pub const CKM_SHA3_384_KEY_GEN: CK_MECHANISM_TYPE = 707;
pub const CKM_SHA3_512: CK_MECHANISM_TYPE = 720;
pub const CKM_SHA3_512_HMAC: CK_MECHANISM_TYPE = 721;
pub const CKM_SHA3_512_HMAC_GENERAL: CK_MECHANISM_TYPE = 722;
pub const CKM_SHA3_512_KEY_GEN: CK_MECHANISM_TYPE = 723;
pub const CKM_CAST_KEY_GEN: CK_MECHANISM_TYPE = 768;
pub const CKM_CAST_ECB: CK_MECHANISM_TYPE = 769;
pub const CKM_CAST_CBC: CK_MECHANISM_TYPE = 770;
pub const CKM_CAST_MAC: CK_MECHANISM_TYPE = 771;
pub const CKM_CAST_MAC_GENERAL: CK_MECHANISM_TYPE = 772;
pub const CKM_CAST_CBC_PAD: CK_MECHANISM_TYPE = 773;
pub const CKM_CAST3_KEY_GEN: CK_MECHANISM_TYPE = 784;
pub const CKM_CAST3_ECB: CK_MECHANISM_TYPE = 785;
pub const CKM_CAST3_CBC: CK_MECHANISM_TYPE = 786;
pub const CKM_CAST3_MAC: CK_MECHANISM_TYPE = 787;
pub const CKM_CAST3_MAC_GENERAL: CK_MECHANISM_TYPE = 788;
pub const CKM_CAST3_CBC_PAD: CK_MECHANISM_TYPE = 789;
pub const CKM_CAST5_KEY_GEN: CK_MECHANISM_TYPE = 800;
pub const CKM_CAST128_KEY_GEN: CK_MECHANISM_TYPE = 800;
pub const CKM_CAST5_ECB: CK_MECHANISM_TYPE = 801;
pub const CKM_CAST128_ECB: CK_MECHANISM_TYPE = 801;
pub const CKM_CAST5_CBC: CK_MECHANISM_TYPE = 802;
pub const CKM_CAST128_CBC: CK_MECHANISM_TYPE = 802;
pub const CKM_CAST5_MAC: CK_MECHANISM_TYPE = 803;
pub const CKM_CAST128_MAC: CK_MECHANISM_TYPE = 803;
pub const CKM_CAST5_MAC_GENERAL: CK_MECHANISM_TYPE = 804;
pub const CKM_CAST128_MAC_GENERAL: CK_MECHANISM_TYPE = 804;
pub const CKM_CAST5_CBC_PAD: CK_MECHANISM_TYPE = 805;
pub const CKM_CAST128_CBC_PAD: CK_MECHANISM_TYPE = 805;
pub const CKM_RC5_KEY_GEN: CK_MECHANISM_TYPE = 816;
pub const CKM_RC5_ECB: CK_MECHANISM_TYPE = 817;
pub const CKM_RC5_CBC: CK_MECHANISM_TYPE = 818;
pub const CKM_RC5_MAC: CK_MECHANISM_TYPE = 819;
pub const CKM_RC5_MAC_GENERAL: CK_MECHANISM_TYPE = 820;
pub const CKM_RC5_CBC_PAD: CK_MECHANISM_TYPE = 821;
pub const CKM_IDEA_KEY_GEN: CK_MECHANISM_TYPE = 832;
pub const CKM_IDEA_ECB: CK_MECHANISM_TYPE = 833;
pub const CKM_IDEA_CBC: CK_MECHANISM_TYPE = 834;
pub const CKM_IDEA_MAC: CK_MECHANISM_TYPE = 835;
pub const CKM_IDEA_MAC_GENERAL: CK_MECHANISM_TYPE = 836;
pub const CKM_IDEA_CBC_PAD: CK_MECHANISM_TYPE = 837;
pub const CKM_GENERIC_SECRET_KEY_GEN: CK_MECHANISM_TYPE = 848;
pub const CKM_CONCATENATE_BASE_AND_KEY: CK_MECHANISM_TYPE = 864;
pub const CKM_CONCATENATE_BASE_AND_DATA: CK_MECHANISM_TYPE = 866;
pub const CKM_CONCATENATE_DATA_AND_BASE: CK_MECHANISM_TYPE = 867;
pub const CKM_XOR_BASE_AND_DATA: CK_MECHANISM_TYPE = 868;
pub const CKM_EXTRACT_KEY_FROM_KEY: CK_MECHANISM_TYPE = 869;
pub const CKM_SSL3_PRE_MASTER_KEY_GEN: CK_MECHANISM_TYPE = 880;
pub const CKM_SSL3_MASTER_KEY_DERIVE: CK_MECHANISM_TYPE = 881;
pub const CKM_SSL3_KEY_AND_MAC_DERIVE: CK_MECHANISM_TYPE = 882;
pub const CKM_SSL3_MASTER_KEY_DERIVE_DH: CK_MECHANISM_TYPE = 883;
pub const CKM_TLS_PRE_MASTER_KEY_GEN: CK_MECHANISM_TYPE = 884;
pub const CKM_TLS_MASTER_KEY_DERIVE: CK_MECHANISM_TYPE = 885;
pub const CKM_TLS_KEY_AND_MAC_DERIVE: CK_MECHANISM_TYPE = 886;
pub const CKM_TLS_MASTER_KEY_DERIVE_DH: CK_MECHANISM_TYPE = 887;
pub const CKM_TLS_PRF: CK_MECHANISM_TYPE = 888;
pub const CKM_SSL3_MD5_MAC: CK_MECHANISM_TYPE = 896;
pub const CKM_SSL3_SHA1_MAC: CK_MECHANISM_TYPE = 897;
pub const CKM_MD5_KEY_DERIVATION: CK_MECHANISM_TYPE = 912;
pub const CKM_MD2_KEY_DERIVATION: CK_MECHANISM_TYPE = 913;
pub const CKM_SHA1_KEY_DERIVATION: CK_MECHANISM_TYPE = 914;
pub const CKM_SHA256_KEY_DERIVATION: CK_MECHANISM_TYPE = 915;
pub const CKM_SHA384_KEY_DERIVATION: CK_MECHANISM_TYPE = 916;
pub const CKM_SHA512_KEY_DERIVATION: CK_MECHANISM_TYPE = 917;
pub const CKM_SHA224_KEY_DERIVATION: CK_MECHANISM_TYPE = 918;
pub const CKM_SHA3_256_KEY_DERIVATION: CK_MECHANISM_TYPE = 919;
pub const CKM_SHA3_224_KEY_DERIVATION: CK_MECHANISM_TYPE = 920;
pub const CKM_SHA3_384_KEY_DERIVATION: CK_MECHANISM_TYPE = 921;
pub const CKM_SHA3_512_KEY_DERIVATION: CK_MECHANISM_TYPE = 922;
pub const CKM_SHAKE_128_KEY_DERIVATION: CK_MECHANISM_TYPE = 923;
pub const CKM_SHAKE_256_KEY_DERIVATION: CK_MECHANISM_TYPE = 924;
pub const CKM_SHA3_256_KEY_DERIVE: CK_MECHANISM_TYPE = 919;
pub const CKM_SHA3_224_KEY_DERIVE: CK_MECHANISM_TYPE = 920;
pub const CKM_SHA3_384_KEY_DERIVE: CK_MECHANISM_TYPE = 921;
pub const CKM_SHA3_512_KEY_DERIVE: CK_MECHANISM_TYPE = 922;
pub const CKM_SHAKE_128_KEY_DERIVE: CK_MECHANISM_TYPE = 923;
pub const CKM_SHAKE_256_KEY_DERIVE: CK_MECHANISM_TYPE = 924;
pub const CKM_PBE_MD2_DES_CBC: CK_MECHANISM_TYPE = 928;
pub const CKM_PBE_MD5_DES_CBC: CK_MECHANISM_TYPE = 929;
pub const CKM_PBE_MD5_CAST_CBC: CK_MECHANISM_TYPE = 930;
pub const CKM_PBE_MD5_CAST3_CBC: CK_MECHANISM_TYPE = 931;
pub const CKM_PBE_MD5_CAST5_CBC: CK_MECHANISM_TYPE = 932;
pub const CKM_PBE_MD5_CAST128_CBC: CK_MECHANISM_TYPE = 932;
pub const CKM_PBE_SHA1_CAST5_CBC: CK_MECHANISM_TYPE = 933;
pub const CKM_PBE_SHA1_CAST128_CBC: CK_MECHANISM_TYPE = 933;
pub const CKM_PBE_SHA1_RC4_128: CK_MECHANISM_TYPE = 934;
pub const CKM_PBE_SHA1_RC4_40: CK_MECHANISM_TYPE = 935;
pub const CKM_PBE_SHA1_DES3_EDE_CBC: CK_MECHANISM_TYPE = 936;
pub const CKM_PBE_SHA1_DES2_EDE_CBC: CK_MECHANISM_TYPE = 937;
pub const CKM_PBE_SHA1_RC2_128_CBC: CK_MECHANISM_TYPE = 938;
pub const CKM_PBE_SHA1_RC2_40_CBC: CK_MECHANISM_TYPE = 939;
pub const CKM_PKCS5_PBKD2: CK_MECHANISM_TYPE = 944;
pub const CKM_PBA_SHA1_WITH_SHA1_HMAC: CK_MECHANISM_TYPE = 960;
pub const CKM_WTLS_PRE_MASTER_KEY_GEN: CK_MECHANISM_TYPE = 976;
pub const CKM_WTLS_MASTER_KEY_DERIVE: CK_MECHANISM_TYPE = 977;
pub const CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC: CK_MECHANISM_TYPE = 978;
pub const CKM_WTLS_PRF: CK_MECHANISM_TYPE = 979;
pub const CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE: CK_MECHANISM_TYPE = 980;
pub const CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE: CK_MECHANISM_TYPE = 981;
pub const CKM_TLS10_MAC_SERVER: CK_MECHANISM_TYPE = 982;
pub const CKM_TLS10_MAC_CLIENT: CK_MECHANISM_TYPE = 983;
pub const CKM_TLS12_MAC: CK_MECHANISM_TYPE = 984;
pub const CKM_TLS12_KDF: CK_MECHANISM_TYPE = 985;
pub const CKM_TLS12_MASTER_KEY_DERIVE: CK_MECHANISM_TYPE = 992;
pub const CKM_TLS12_KEY_AND_MAC_DERIVE: CK_MECHANISM_TYPE = 993;
pub const CKM_TLS12_MASTER_KEY_DERIVE_DH: CK_MECHANISM_TYPE = 994;
pub const CKM_TLS12_KEY_SAFE_DERIVE: CK_MECHANISM_TYPE = 995;
pub const CKM_TLS_MAC: CK_MECHANISM_TYPE = 996;
pub const CKM_TLS_KDF: CK_MECHANISM_TYPE = 997;
pub const CKM_KEY_WRAP_LYNKS: CK_MECHANISM_TYPE = 1024;
pub const CKM_KEY_WRAP_SET_OAEP: CK_MECHANISM_TYPE = 1025;
pub const CKM_CMS_SIG: CK_MECHANISM_TYPE = 1280;
pub const CKM_KIP_DERIVE: CK_MECHANISM_TYPE = 1296;
pub const CKM_KIP_WRAP: CK_MECHANISM_TYPE = 1297;
pub const CKM_KIP_MAC: CK_MECHANISM_TYPE = 1298;
pub const CKM_CAMELLIA_KEY_GEN: CK_MECHANISM_TYPE = 1360;
pub const CKM_CAMELLIA_ECB: CK_MECHANISM_TYPE = 1361;
pub const CKM_CAMELLIA_CBC: CK_MECHANISM_TYPE = 1362;
pub const CKM_CAMELLIA_MAC: CK_MECHANISM_TYPE = 1363;
pub const CKM_CAMELLIA_MAC_GENERAL: CK_MECHANISM_TYPE = 1364;
pub const CKM_CAMELLIA_CBC_PAD: CK_MECHANISM_TYPE = 1365;
pub const CKM_CAMELLIA_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1366;
pub const CKM_CAMELLIA_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1367;
pub const CKM_CAMELLIA_CTR: CK_MECHANISM_TYPE = 1368;
pub const CKM_ARIA_KEY_GEN: CK_MECHANISM_TYPE = 1376;
pub const CKM_ARIA_ECB: CK_MECHANISM_TYPE = 1377;
pub const CKM_ARIA_CBC: CK_MECHANISM_TYPE = 1378;
pub const CKM_ARIA_MAC: CK_MECHANISM_TYPE = 1379;
pub const CKM_ARIA_MAC_GENERAL: CK_MECHANISM_TYPE = 1380;
pub const CKM_ARIA_CBC_PAD: CK_MECHANISM_TYPE = 1381;
pub const CKM_ARIA_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1382;
pub const CKM_ARIA_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1383;
pub const CKM_SEED_KEY_GEN: CK_MECHANISM_TYPE = 1616;
pub const CKM_SEED_ECB: CK_MECHANISM_TYPE = 1617;
pub const CKM_SEED_CBC: CK_MECHANISM_TYPE = 1618;
pub const CKM_SEED_MAC: CK_MECHANISM_TYPE = 1619;
pub const CKM_SEED_MAC_GENERAL: CK_MECHANISM_TYPE = 1620;
pub const CKM_SEED_CBC_PAD: CK_MECHANISM_TYPE = 1621;
pub const CKM_SEED_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1622;
pub const CKM_SEED_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 1623;
pub const CKM_SKIPJACK_KEY_GEN: CK_MECHANISM_TYPE = 4096;
pub const CKM_SKIPJACK_ECB64: CK_MECHANISM_TYPE = 4097;
pub const CKM_SKIPJACK_CBC64: CK_MECHANISM_TYPE = 4098;
pub const CKM_SKIPJACK_OFB64: CK_MECHANISM_TYPE = 4099;
pub const CKM_SKIPJACK_CFB64: CK_MECHANISM_TYPE = 4100;
pub const CKM_SKIPJACK_CFB32: CK_MECHANISM_TYPE = 4101;
pub const CKM_SKIPJACK_CFB16: CK_MECHANISM_TYPE = 4102;
pub const CKM_SKIPJACK_CFB8: CK_MECHANISM_TYPE = 4103;
pub const CKM_SKIPJACK_WRAP: CK_MECHANISM_TYPE = 4104;
pub const CKM_SKIPJACK_PRIVATE_WRAP: CK_MECHANISM_TYPE = 4105;
pub const CKM_SKIPJACK_RELAYX: CK_MECHANISM_TYPE = 4106;
pub const CKM_KEA_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4112;
pub const CKM_KEA_KEY_DERIVE: CK_MECHANISM_TYPE = 4113;
pub const CKM_KEA_DERIVE: CK_MECHANISM_TYPE = 4114;
pub const CKM_FORTEZZA_TIMESTAMP: CK_MECHANISM_TYPE = 4128;
pub const CKM_BATON_KEY_GEN: CK_MECHANISM_TYPE = 4144;
pub const CKM_BATON_ECB128: CK_MECHANISM_TYPE = 4145;
pub const CKM_BATON_ECB96: CK_MECHANISM_TYPE = 4146;
pub const CKM_BATON_CBC128: CK_MECHANISM_TYPE = 4147;
pub const CKM_BATON_COUNTER: CK_MECHANISM_TYPE = 4148;
pub const CKM_BATON_SHUFFLE: CK_MECHANISM_TYPE = 4149;
pub const CKM_BATON_WRAP: CK_MECHANISM_TYPE = 4150;
pub const CKM_ECDSA_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4160;
pub const CKM_EC_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4160;
pub const CKM_ECDSA: CK_MECHANISM_TYPE = 4161;
pub const CKM_ECDSA_SHA1: CK_MECHANISM_TYPE = 4162;
pub const CKM_ECDSA_SHA224: CK_MECHANISM_TYPE = 4163;
pub const CKM_ECDSA_SHA256: CK_MECHANISM_TYPE = 4164;
pub const CKM_ECDSA_SHA384: CK_MECHANISM_TYPE = 4165;
pub const CKM_ECDSA_SHA512: CK_MECHANISM_TYPE = 4166;
pub const CKM_EC_KEY_PAIR_GEN_W_EXTRA_BITS: CK_MECHANISM_TYPE = 5131;
pub const CKM_ECDH1_DERIVE: CK_MECHANISM_TYPE = 4176;
pub const CKM_ECDH1_COFACTOR_DERIVE: CK_MECHANISM_TYPE = 4177;
pub const CKM_ECMQV_DERIVE: CK_MECHANISM_TYPE = 4178;
pub const CKM_ECDH_AES_KEY_WRAP: CK_MECHANISM_TYPE = 4179;
pub const CKM_RSA_AES_KEY_WRAP: CK_MECHANISM_TYPE = 4180;
pub const CKM_JUNIPER_KEY_GEN: CK_MECHANISM_TYPE = 4192;
pub const CKM_JUNIPER_ECB128: CK_MECHANISM_TYPE = 4193;
pub const CKM_JUNIPER_CBC128: CK_MECHANISM_TYPE = 4194;
pub const CKM_JUNIPER_COUNTER: CK_MECHANISM_TYPE = 4195;
pub const CKM_JUNIPER_SHUFFLE: CK_MECHANISM_TYPE = 4196;
pub const CKM_JUNIPER_WRAP: CK_MECHANISM_TYPE = 4197;
pub const CKM_FASTHASH: CK_MECHANISM_TYPE = 4208;
pub const CKM_AES_XTS: CK_MECHANISM_TYPE = 4209;
pub const CKM_AES_XTS_KEY_GEN: CK_MECHANISM_TYPE = 4210;
pub const CKM_AES_KEY_GEN: CK_MECHANISM_TYPE = 4224;
pub const CKM_AES_ECB: CK_MECHANISM_TYPE = 4225;
pub const CKM_AES_CBC: CK_MECHANISM_TYPE = 4226;
pub const CKM_AES_MAC: CK_MECHANISM_TYPE = 4227;
pub const CKM_AES_MAC_GENERAL: CK_MECHANISM_TYPE = 4228;
pub const CKM_AES_CBC_PAD: CK_MECHANISM_TYPE = 4229;
pub const CKM_AES_CTR: CK_MECHANISM_TYPE = 4230;
pub const CKM_AES_GCM: CK_MECHANISM_TYPE = 4231;
pub const CKM_AES_CCM: CK_MECHANISM_TYPE = 4232;
pub const CKM_AES_CTS: CK_MECHANISM_TYPE = 4233;
pub const CKM_AES_CMAC: CK_MECHANISM_TYPE = 4234;
pub const CKM_AES_CMAC_GENERAL: CK_MECHANISM_TYPE = 4235;
pub const CKM_AES_XCBC_MAC: CK_MECHANISM_TYPE = 4236;
pub const CKM_AES_XCBC_MAC_96: CK_MECHANISM_TYPE = 4237;
pub const CKM_AES_GMAC: CK_MECHANISM_TYPE = 4238;
pub const CKM_BLOWFISH_KEY_GEN: CK_MECHANISM_TYPE = 4240;
pub const CKM_BLOWFISH_CBC: CK_MECHANISM_TYPE = 4241;
pub const CKM_TWOFISH_KEY_GEN: CK_MECHANISM_TYPE = 4242;
pub const CKM_TWOFISH_CBC: CK_MECHANISM_TYPE = 4243;
pub const CKM_BLOWFISH_CBC_PAD: CK_MECHANISM_TYPE = 4244;
pub const CKM_TWOFISH_CBC_PAD: CK_MECHANISM_TYPE = 4245;
pub const CKM_DES_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4352;
pub const CKM_DES_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4353;
pub const CKM_DES3_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4354;
pub const CKM_DES3_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4355;
pub const CKM_AES_ECB_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4356;
pub const CKM_AES_CBC_ENCRYPT_DATA: CK_MECHANISM_TYPE = 4357;
pub const CKM_GOSTR3410_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4608;
pub const CKM_GOSTR3410: CK_MECHANISM_TYPE = 4609;
pub const CKM_GOSTR3410_WITH_GOSTR3411: CK_MECHANISM_TYPE = 4610;
pub const CKM_GOSTR3410_KEY_WRAP: CK_MECHANISM_TYPE = 4611;
pub const CKM_GOSTR3410_DERIVE: CK_MECHANISM_TYPE = 4612;
pub const CKM_GOSTR3411: CK_MECHANISM_TYPE = 4624;
pub const CKM_GOSTR3411_HMAC: CK_MECHANISM_TYPE = 4625;
pub const CKM_GOST28147_KEY_GEN: CK_MECHANISM_TYPE = 4640;
pub const CKM_GOST28147_ECB: CK_MECHANISM_TYPE = 4641;
pub const CKM_GOST28147: CK_MECHANISM_TYPE = 4642;
pub const CKM_GOST28147_MAC: CK_MECHANISM_TYPE = 4643;
pub const CKM_GOST28147_KEY_WRAP: CK_MECHANISM_TYPE = 4644;
pub const CKM_CHACHA20_KEY_GEN: CK_MECHANISM_TYPE = 4645;
pub const CKM_CHACHA20: CK_MECHANISM_TYPE = 4646;
pub const CKM_POLY1305_KEY_GEN: CK_MECHANISM_TYPE = 4647;
pub const CKM_POLY1305: CK_MECHANISM_TYPE = 4648;
pub const CKM_DSA_PARAMETER_GEN: CK_MECHANISM_TYPE = 8192;
pub const CKM_DH_PKCS_PARAMETER_GEN: CK_MECHANISM_TYPE = 8193;
pub const CKM_X9_42_DH_PARAMETER_GEN: CK_MECHANISM_TYPE = 8194;
pub const CKM_DSA_PROBABILISTIC_PARAMETER_GEN: CK_MECHANISM_TYPE = 8195;
pub const CKM_DSA_PROBABLISTIC_PARAMETER_GEN: CK_MECHANISM_TYPE = 8195;
pub const CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN: CK_MECHANISM_TYPE = 8196;
pub const CKM_DSA_FIPS_G_GEN: CK_MECHANISM_TYPE = 8197;
pub const CKM_AES_OFB: CK_MECHANISM_TYPE = 8452;
pub const CKM_AES_CFB64: CK_MECHANISM_TYPE = 8453;
pub const CKM_AES_CFB8: CK_MECHANISM_TYPE = 8454;
pub const CKM_AES_CFB128: CK_MECHANISM_TYPE = 8455;
pub const CKM_AES_CFB1: CK_MECHANISM_TYPE = 8456;
pub const CKM_AES_KEY_WRAP: CK_MECHANISM_TYPE = 8457;
pub const CKM_AES_KEY_WRAP_PAD: CK_MECHANISM_TYPE = 8458;
pub const CKM_AES_KEY_WRAP_KWP: CK_MECHANISM_TYPE = 8459;
pub const CKM_AES_KEY_WRAP_PKCS7: CK_MECHANISM_TYPE = 8460;
pub const CKM_RSA_PKCS_TPM_1_1: CK_MECHANISM_TYPE = 16385;
pub const CKM_RSA_PKCS_OAEP_TPM_1_1: CK_MECHANISM_TYPE = 16386;
pub const CKM_SHA_1_KEY_GEN: CK_MECHANISM_TYPE = 16387;
pub const CKM_SHA224_KEY_GEN: CK_MECHANISM_TYPE = 16388;
pub const CKM_SHA256_KEY_GEN: CK_MECHANISM_TYPE = 16389;
pub const CKM_SHA384_KEY_GEN: CK_MECHANISM_TYPE = 16390;
pub const CKM_SHA512_KEY_GEN: CK_MECHANISM_TYPE = 16391;
pub const CKM_SHA512_224_KEY_GEN: CK_MECHANISM_TYPE = 16392;
pub const CKM_SHA512_256_KEY_GEN: CK_MECHANISM_TYPE = 16393;
pub const CKM_SHA512_T_KEY_GEN: CK_MECHANISM_TYPE = 16394;
pub const CKM_NULL: CK_MECHANISM_TYPE = 16395;
pub const CKM_BLAKE2B_160: CK_MECHANISM_TYPE = 16396;
pub const CKM_BLAKE2B_160_HMAC: CK_MECHANISM_TYPE = 16397;
pub const CKM_BLAKE2B_160_HMAC_GENERAL: CK_MECHANISM_TYPE = 16398;
pub const CKM_BLAKE2B_160_KEY_DERIVE: CK_MECHANISM_TYPE = 16399;
pub const CKM_BLAKE2B_160_KEY_GEN: CK_MECHANISM_TYPE = 16400;
pub const CKM_BLAKE2B_256: CK_MECHANISM_TYPE = 16401;
pub const CKM_BLAKE2B_256_HMAC: CK_MECHANISM_TYPE = 16402;
pub const CKM_BLAKE2B_256_HMAC_GENERAL: CK_MECHANISM_TYPE = 16403;
pub const CKM_BLAKE2B_256_KEY_DERIVE: CK_MECHANISM_TYPE = 16404;
pub const CKM_BLAKE2B_256_KEY_GEN: CK_MECHANISM_TYPE = 16405;
pub const CKM_BLAKE2B_384: CK_MECHANISM_TYPE = 16406;
pub const CKM_BLAKE2B_384_HMAC: CK_MECHANISM_TYPE = 16407;
pub const CKM_BLAKE2B_384_HMAC_GENERAL: CK_MECHANISM_TYPE = 16408;
pub const CKM_BLAKE2B_384_KEY_DERIVE: CK_MECHANISM_TYPE = 16409;
pub const CKM_BLAKE2B_384_KEY_GEN: CK_MECHANISM_TYPE = 16410;
pub const CKM_BLAKE2B_512: CK_MECHANISM_TYPE = 16411;
pub const CKM_BLAKE2B_512_HMAC: CK_MECHANISM_TYPE = 16412;
pub const CKM_BLAKE2B_512_HMAC_GENERAL: CK_MECHANISM_TYPE = 16413;
pub const CKM_BLAKE2B_512_KEY_DERIVE: CK_MECHANISM_TYPE = 16414;
pub const CKM_BLAKE2B_512_KEY_GEN: CK_MECHANISM_TYPE = 16415;
pub const CKM_SALSA20: CK_MECHANISM_TYPE = 16416;
pub const CKM_CHACHA20_POLY1305: CK_MECHANISM_TYPE = 16417;
pub const CKM_SALSA20_POLY1305: CK_MECHANISM_TYPE = 16418;
pub const CKM_X3DH_INITIALIZE: CK_MECHANISM_TYPE = 16419;
pub const CKM_X3DH_RESPOND: CK_MECHANISM_TYPE = 16420;
pub const CKM_X2RATCHET_INITIALIZE: CK_MECHANISM_TYPE = 16421;
pub const CKM_X2RATCHET_RESPOND: CK_MECHANISM_TYPE = 16422;
pub const CKM_X2RATCHET_ENCRYPT: CK_MECHANISM_TYPE = 16423;
pub const CKM_X2RATCHET_DECRYPT: CK_MECHANISM_TYPE = 16424;
pub const CKM_XEDDSA: CK_MECHANISM_TYPE = 16425;
pub const CKM_HKDF_DERIVE: CK_MECHANISM_TYPE = 16426;
pub const CKM_HKDF_DATA: CK_MECHANISM_TYPE = 16427;
pub const CKM_HKDF_KEY_GEN: CK_MECHANISM_TYPE = 16428;
pub const CKM_SALSA20_KEY_GEN: CK_MECHANISM_TYPE = 16429;
pub const CKM_ECDSA_SHA3_224: CK_MECHANISM_TYPE = 4167;
pub const CKM_ECDSA_SHA3_256: CK_MECHANISM_TYPE = 4168;
pub const CKM_ECDSA_SHA3_384: CK_MECHANISM_TYPE = 4169;
pub const CKM_ECDSA_SHA3_512: CK_MECHANISM_TYPE = 4170;
pub const CKM_EC_EDWARDS_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4181;
pub const CKM_EC_MONTGOMERY_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 4182;
pub const CKM_EDDSA: CK_MECHANISM_TYPE = 4183;
pub const CKM_SP800_108_COUNTER_KDF: CK_MECHANISM_TYPE = 940;
pub const CKM_SP800_108_FEEDBACK_KDF: CK_MECHANISM_TYPE = 941;
pub const CKM_SP800_108_DOUBLE_PIPELINE_KDF: CK_MECHANISM_TYPE = 942;
pub const CKM_IKE2_PRF_PLUS_DERIVE: CK_MECHANISM_TYPE = 16430;
pub const CKM_IKE_PRF_DERIVE: CK_MECHANISM_TYPE = 16431;
pub const CKM_IKE1_PRF_DERIVE: CK_MECHANISM_TYPE = 16432;
pub const CKM_IKE1_EXTENDED_DERIVE: CK_MECHANISM_TYPE = 16433;
pub const CKM_HSS_KEY_PAIR_GEN: CK_MECHANISM_TYPE = 16434;
pub const CKM_HSS: CK_MECHANISM_TYPE = 16435;
pub const CKM_VENDOR_DEFINED: CK_MECHANISM_TYPE = 2147483648;
pub const CKF_HW: CK_FLAGS = 1;
pub const CKF_MESSAGE_ENCRYPT: CK_FLAGS = 2;
pub const CKF_MESSAGE_DECRYPT: CK_FLAGS = 4;
pub const CKF_MESSAGE_SIGN: CK_FLAGS = 8;
pub const CKF_MESSAGE_VERIFY: CK_FLAGS = 16;
pub const CKF_MULTI_MESSAGE: CK_FLAGS = 32;
pub const CKF_MULTI_MESSGE: CK_FLAGS = 32;
pub const CKF_FIND_OBJECTS: CK_FLAGS = 64;
pub const CKF_ENCRYPT: CK_FLAGS = 256;
pub const CKF_DECRYPT: CK_FLAGS = 512;
pub const CKF_DIGEST: CK_FLAGS = 1024;
pub const CKF_SIGN: CK_FLAGS = 2048;
pub const CKF_SIGN_RECOVER: CK_FLAGS = 4096;
pub const CKF_VERIFY: CK_FLAGS = 8192;
pub const CKF_VERIFY_RECOVER: CK_FLAGS = 16384;
pub const CKF_GENERATE: CK_FLAGS = 32768;
pub const CKF_GENERATE_KEY_PAIR: CK_FLAGS = 65536;
pub const CKF_WRAP: CK_FLAGS = 131072;
pub const CKF_UNWRAP: CK_FLAGS = 262144;
pub const CKF_DERIVE: CK_FLAGS = 524288;
pub const CKF_EC_F_P: CK_FLAGS = 1048576;
pub const CKF_EC_F_2M: CK_FLAGS = 2097152;
pub const CKF_EC_ECPARAMETERS: CK_FLAGS = 4194304;
pub const CKF_EC_OID: CK_FLAGS = 8388608;
pub const CKF_EC_NAMEDCURVE: CK_FLAGS = 8388608;
pub const CKF_EC_UNCOMPRESS: CK_FLAGS = 16777216;
pub const CKF_EC_COMPRESS: CK_FLAGS = 33554432;
pub const CKF_EC_CURVENAME: CK_FLAGS = 67108864;
pub const CKF_EXTENSION: CK_FLAGS = 2147483648;
pub const CKR_OK: CK_RV = 0;
pub const CKR_CANCEL: CK_RV = 1;
pub const CKR_HOST_MEMORY: CK_RV = 2;
pub const CKR_SLOT_ID_INVALID: CK_RV = 3;
pub const CKR_GENERAL_ERROR: CK_RV = 5;
pub const CKR_FUNCTION_FAILED: CK_RV = 6;
pub const CKR_ARGUMENTS_BAD: CK_RV = 7;
pub const CKR_NO_EVENT: CK_RV = 8;
pub const CKR_NEED_TO_CREATE_THREADS: CK_RV = 9;
pub const CKR_CANT_LOCK: CK_RV = 10;
pub const CKR_ATTRIBUTE_READ_ONLY: CK_RV = 16;
pub const CKR_ATTRIBUTE_SENSITIVE: CK_RV = 17;
pub const CKR_ATTRIBUTE_TYPE_INVALID: CK_RV = 18;
pub const CKR_ATTRIBUTE_VALUE_INVALID: CK_RV = 19;
pub const CKR_ACTION_PROHIBITED: CK_RV = 27;
pub const CKR_DATA_INVALID: CK_RV = 32;
pub const CKR_DATA_LEN_RANGE: CK_RV = 33;
pub const CKR_DEVICE_ERROR: CK_RV = 48;
pub const CKR_DEVICE_MEMORY: CK_RV = 49;
pub const CKR_DEVICE_REMOVED: CK_RV = 50;
pub const CKR_ENCRYPTED_DATA_INVALID: CK_RV = 64;
pub const CKR_ENCRYPTED_DATA_LEN_RANGE: CK_RV = 65;
pub const CKR_AEAD_DECRYPT_FAILED: CK_RV = 66;
pub const CKR_FUNCTION_CANCELED: CK_RV = 80;
pub const CKR_FUNCTION_NOT_PARALLEL: CK_RV = 81;
pub const CKR_FUNCTION_NOT_SUPPORTED: CK_RV = 84;
pub const CKR_KEY_HANDLE_INVALID: CK_RV = 96;
pub const CKR_KEY_SIZE_RANGE: CK_RV = 98;
pub const CKR_KEY_TYPE_INCONSISTENT: CK_RV = 99;
pub const CKR_KEY_NOT_NEEDED: CK_RV = 100;
pub const CKR_KEY_CHANGED: CK_RV = 101;
pub const CKR_KEY_NEEDED: CK_RV = 102;
pub const CKR_KEY_INDIGESTIBLE: CK_RV = 103;
pub const CKR_KEY_FUNCTION_NOT_PERMITTED: CK_RV = 104;
pub const CKR_KEY_NOT_WRAPPABLE: CK_RV = 105;
pub const CKR_KEY_UNEXTRACTABLE: CK_RV = 106;
pub const CKR_MECHANISM_INVALID: CK_RV = 112;
pub const CKR_MECHANISM_PARAM_INVALID: CK_RV = 113;
pub const CKR_OBJECT_HANDLE_INVALID: CK_RV = 130;
pub const CKR_OPERATION_ACTIVE: CK_RV = 144;
pub const CKR_OPERATION_NOT_INITIALIZED: CK_RV = 145;
pub const CKR_PIN_INCORRECT: CK_RV = 160;
pub const CKR_PIN_INVALID: CK_RV = 161;
pub const CKR_PIN_LEN_RANGE: CK_RV = 162;
pub const CKR_PIN_EXPIRED: CK_RV = 163;
pub const CKR_PIN_LOCKED: CK_RV = 164;
pub const CKR_SESSION_CLOSED: CK_RV = 176;
pub const CKR_SESSION_COUNT: CK_RV = 177;
pub const CKR_SESSION_HANDLE_INVALID: CK_RV = 179;
pub const CKR_SESSION_PARALLEL_NOT_SUPPORTED: CK_RV = 180;
pub const CKR_SESSION_READ_ONLY: CK_RV = 181;
pub const CKR_SESSION_EXISTS: CK_RV = 182;
pub const CKR_SESSION_READ_ONLY_EXISTS: CK_RV = 183;
pub const CKR_SESSION_READ_WRITE_SO_EXISTS: CK_RV = 184;
pub const CKR_SIGNATURE_INVALID: CK_RV = 192;
pub const CKR_SIGNATURE_LEN_RANGE: CK_RV = 193;
pub const CKR_TEMPLATE_INCOMPLETE: CK_RV = 208;
pub const CKR_TEMPLATE_INCONSISTENT: CK_RV = 209;
pub const CKR_TOKEN_NOT_PRESENT: CK_RV = 224;
pub const CKR_TOKEN_NOT_RECOGNIZED: CK_RV = 225;
pub const CKR_TOKEN_WRITE_PROTECTED: CK_RV = 226;
pub const CKR_UNWRAPPING_KEY_HANDLE_INVALID: CK_RV = 240;
pub const CKR_UNWRAPPING_KEY_SIZE_RANGE: CK_RV = 241;
pub const CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT: CK_RV = 242;
pub const CKR_USER_ALREADY_LOGGED_IN: CK_RV = 256;
pub const CKR_USER_NOT_LOGGED_IN: CK_RV = 257;
pub const CKR_USER_PIN_NOT_INITIALIZED: CK_RV = 258;
pub const CKR_USER_TYPE_INVALID: CK_RV = 259;
pub const CKR_USER_ANOTHER_ALREADY_LOGGED_IN: CK_RV = 260;
pub const CKR_USER_TOO_MANY_TYPES: CK_RV = 261;
pub const CKR_WRAPPED_KEY_INVALID: CK_RV = 272;
pub const CKR_WRAPPED_KEY_LEN_RANGE: CK_RV = 274;
pub const CKR_WRAPPING_KEY_HANDLE_INVALID: CK_RV = 275;
pub const CKR_WRAPPING_KEY_SIZE_RANGE: CK_RV = 276;
pub const CKR_WRAPPING_KEY_TYPE_INCONSISTENT: CK_RV = 277;
pub const CKR_RANDOM_SEED_NOT_SUPPORTED: CK_RV = 288;
pub const CKR_RANDOM_NO_RNG: CK_RV = 289;
pub const CKR_DOMAIN_PARAMS_INVALID: CK_RV = 304;
pub const CKR_CURVE_NOT_SUPPORTED: CK_RV = 320;
pub const CKR_BUFFER_TOO_SMALL: CK_RV = 336;
pub const CKR_SAVED_STATE_INVALID: CK_RV = 352;
pub const CKR_INFORMATION_SENSITIVE: CK_RV = 368;
pub const CKR_STATE_UNSAVEABLE: CK_RV = 384;
pub const CKR_CRYPTOKI_NOT_INITIALIZED: CK_RV = 400;
pub const CKR_CRYPTOKI_ALREADY_INITIALIZED: CK_RV = 401;
pub const CKR_MUTEX_BAD: CK_RV = 416;
pub const CKR_MUTEX_NOT_LOCKED: CK_RV = 417;
pub const CKR_NEW_PIN_MODE: CK_RV = 432;
pub const CKR_NEXT_OTP: CK_RV = 433;
pub const CKR_EXCEEDED_MAX_ITERATIONS: CK_RV = 437;
pub const CKR_FIPS_SELF_TEST_FAILED: CK_RV = 438;
pub const CKR_LIBRARY_LOAD_FAILED: CK_RV = 439;
pub const CKR_PIN_TOO_WEAK: CK_RV = 440;
pub const CKR_PUBLIC_KEY_INVALID: CK_RV = 441;
pub const CKR_FUNCTION_REJECTED: CK_RV = 512;
pub const CKR_TOKEN_RESOURCE_EXCEEDED: CK_RV = 513;
pub const CKR_OPERATION_CANCEL_FAILED: CK_RV = 514;
pub const CKR_KEY_EXHAUSTED: CK_RV = 515;
pub const CKR_VENDOR_DEFINED: CK_RV = 2147483648;
pub const CKF_END_OF_MESSAGE: CK_FLAGS = 1;
pub const CKF_INTERFACE_FORK_SAFE: CK_FLAGS = 1;
pub const CKF_LIBRARY_CANT_CREATE_OS_THREADS: CK_FLAGS = 1;
pub const CKF_OS_LOCKING_OK: CK_FLAGS = 2;
pub const CKF_DONT_BLOCK: CK_FLAGS = 1;
pub const CKG_MGF1_SHA1: CK_RSA_PKCS_MGF_TYPE = 1;
pub const CKG_MGF1_SHA256: CK_RSA_PKCS_MGF_TYPE = 2;
pub const CKG_MGF1_SHA384: CK_RSA_PKCS_MGF_TYPE = 3;
pub const CKG_MGF1_SHA512: CK_RSA_PKCS_MGF_TYPE = 4;
pub const CKG_MGF1_SHA224: CK_RSA_PKCS_MGF_TYPE = 5;
pub const CKG_MGF1_SHA3_224: CK_RSA_PKCS_MGF_TYPE = 6;
pub const CKG_MGF1_SHA3_256: CK_RSA_PKCS_MGF_TYPE = 7;
pub const CKG_MGF1_SHA3_384: CK_RSA_PKCS_MGF_TYPE = 8;
pub const CKG_MGF1_SHA3_512: CK_RSA_PKCS_MGF_TYPE = 9;
pub const CKZ_DATA_SPECIFIED: CK_RSA_PKCS_OAEP_SOURCE_TYPE = 1;
pub const CKD_NULL: CK_EC_KDF_TYPE = 1;
pub const CKD_SHA1_KDF: CK_EC_KDF_TYPE = 2;
pub const CKD_SHA1_KDF_ASN1: CK_EC_KDF_TYPE = 3;
pub const CKD_SHA1_KDF_CONCATENATE: CK_EC_KDF_TYPE = 4;
pub const CKD_SHA224_KDF: CK_EC_KDF_TYPE = 5;
pub const CKD_SHA256_KDF: CK_EC_KDF_TYPE = 6;
pub const CKD_SHA384_KDF: CK_EC_KDF_TYPE = 7;
pub const CKD_SHA512_KDF: CK_EC_KDF_TYPE = 8;
pub const CKD_CPDIVERSIFY_KDF: CK_EC_KDF_TYPE = 9;
pub const CKD_SHA3_224_KDF: CK_EC_KDF_TYPE = 10;
pub const CKD_SHA3_256_KDF: CK_EC_KDF_TYPE = 11;
pub const CKD_SHA3_384_KDF: CK_EC_KDF_TYPE = 12;
pub const CKD_SHA3_512_KDF: CK_EC_KDF_TYPE = 13;
pub const CKD_SHA1_KDF_SP800: CK_EC_KDF_TYPE = 14;
pub const CKD_SHA224_KDF_SP800: CK_EC_KDF_TYPE = 15;
pub const CKD_SHA256_KDF_SP800: CK_EC_KDF_TYPE = 16;
pub const CKD_SHA384_KDF_SP800: CK_EC_KDF_TYPE = 17;
pub const CKD_SHA512_KDF_SP800: CK_EC_KDF_TYPE = 18;
pub const CKD_SHA3_224_KDF_SP800: CK_EC_KDF_TYPE = 19;
pub const CKD_SHA3_256_KDF_SP800: CK_EC_KDF_TYPE = 20;
pub const CKD_SHA3_384_KDF_SP800: CK_EC_KDF_TYPE = 21;
pub const CKD_SHA3_512_KDF_SP800: CK_EC_KDF_TYPE = 22;
pub const CKD_BLAKE2B_160_KDF: CK_EC_KDF_TYPE = 23;
pub const CKD_BLAKE2B_256_KDF: CK_EC_KDF_TYPE = 24;
pub const CKD_BLAKE2B_384_KDF: CK_EC_KDF_TYPE = 25;
pub const CKD_BLAKE2B_512_KDF: CK_EC_KDF_TYPE = 26;
pub const CKP_PKCS5_PBKD2_HMAC_SHA1: CK_PROFILE_ID = 1;
pub const CKP_PKCS5_PBKD2_HMAC_GOSTR3411: CK_PROFILE_ID = 2;
pub const CKP_PKCS5_PBKD2_HMAC_SHA224: CK_PROFILE_ID = 3;
pub const CKP_PKCS5_PBKD2_HMAC_SHA256: CK_PROFILE_ID = 4;
pub const CKP_PKCS5_PBKD2_HMAC_SHA384: CK_PROFILE_ID = 5;
pub const CKP_PKCS5_PBKD2_HMAC_SHA512: CK_PROFILE_ID = 6;
pub const CKP_PKCS5_PBKD2_HMAC_SHA512_224: CK_PROFILE_ID = 7;
pub const CKP_PKCS5_PBKD2_HMAC_SHA512_256: CK_PROFILE_ID = 8;
pub const CKZ_SALT_SPECIFIED: CK_RSA_PKCS_OAEP_SOURCE_TYPE = 1;
pub const CK_OTP_VALUE: CK_ULONG = 0;
pub const CK_OTP_PIN: CK_ULONG = 1;
pub const CK_OTP_CHALLENGE: CK_ULONG = 2;
pub const CK_OTP_TIME: CK_ULONG = 3;
pub const CK_OTP_COUNTER: CK_ULONG = 4;
pub const CK_OTP_FLAGS: CK_ULONG = 5;
pub const CK_OTP_OUTPUT_LENGTH: CK_ULONG = 6;
pub const CK_OTP_OUTPUT_FORMAT: CK_ULONG = 7;
pub const CKF_NEXT_OTP: CK_FLAGS = 1;
pub const CKF_EXCLUDE_TIME: CK_FLAGS = 2;
pub const CKF_EXCLUDE_COUNTER: CK_FLAGS = 4;
pub const CKF_EXCLUDE_CHALLENGE: CK_FLAGS = 8;
pub const CKF_EXCLUDE_PIN: CK_FLAGS = 16;
pub const CKF_USER_FRIENDLY_OTP: CK_FLAGS = 32;
pub const CKG_NO_GENERATE: CK_GENERATOR_FUNCTION = 0;
pub const CKG_GENERATE: CK_GENERATOR_FUNCTION = 1;
pub const CKG_GENERATE_COUNTER: CK_GENERATOR_FUNCTION = 2;
pub const CKG_GENERATE_RANDOM: CK_GENERATOR_FUNCTION = 3;
pub const CKG_GENERATE_COUNTER_XOR: CK_GENERATOR_FUNCTION = 4;
pub const CK_SP800_108_ITERATION_VARIABLE: CK_ULONG = 1;
pub const CK_SP800_108_OPTIONAL_COUNTER: CK_ULONG = 2;
pub const CK_SP800_108_DKM_LENGTH: CK_ULONG = 3;
pub const CK_SP800_108_BYTE_ARRAY: CK_ULONG = 4;
pub const CK_SP800_108_COUNTER: CK_ULONG = 2;
pub const CK_SP800_108_DKM_LENGTH_SUM_OF_KEYS: CK_ULONG = 1;
pub const CK_SP800_108_DKM_LENGTH_SUM_OF_SEGMENTS: CK_ULONG = 2;
pub const CKF_HKDF_SALT_NULL: CK_FLAGS = 1;
pub const CKF_HKDF_SALT_DATA: CK_FLAGS = 2;
pub const CKF_HKDF_SALT_KEY: CK_FLAGS = 4;
pub const CK_NEED_ARG_LIST: CK_ULONG = 1;
pub const CK_PKCS11_2_0_ONLY: CK_ULONG = 1;
pub type CK_BYTE = ::std::os::raw::c_uchar;
pub type CK_CHAR = CK_BYTE;
pub type CK_UTF8CHAR = CK_BYTE;
pub type CK_BBOOL = CK_BYTE;
pub type CK_ULONG = ::std::os::raw::c_ulong;
pub type CK_LONG = ::std::os::raw::c_long;
pub type CK_FLAGS = CK_ULONG;
pub type CK_BYTE_PTR = *mut CK_BYTE;
pub type CK_CHAR_PTR = *mut CK_CHAR;
pub type CK_UTF8CHAR_PTR = *mut CK_UTF8CHAR;
pub type CK_ULONG_PTR = *mut CK_ULONG;
pub type CK_VOID_PTR = *mut ::std::os::raw::c_void;
pub type CK_VOID_PTR_PTR = *mut CK_VOID_PTR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_VERSION {
    pub major: CK_BYTE,
    pub minor: CK_BYTE,
}
#[test]
fn bindgen_test_layout_CK_VERSION() {
    const UNINIT: ::std::mem::MaybeUninit<CK_VERSION> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_VERSION>(),
        2usize,
        concat!("Size of: ", stringify!(CK_VERSION))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_VERSION>(),
        1usize,
        concat!("Alignment of ", stringify!(CK_VERSION))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_VERSION),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_VERSION),
            "::",
            stringify!(minor)
        )
    );
}
pub type CK_VERSION_PTR = *mut CK_VERSION;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_INFO {
    pub cryptokiVersion: CK_VERSION,
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub libraryDescription: [CK_UTF8CHAR; 32usize],
    pub libraryVersion: CK_VERSION,
}
#[test]
fn bindgen_test_layout_CK_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_INFO>(),
        88usize,
        concat!("Size of: ", stringify!(CK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cryptokiVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INFO),
            "::",
            stringify!(cryptokiVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturerID) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INFO),
            "::",
            stringify!(manufacturerID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INFO),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryDescription) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INFO),
            "::",
            stringify!(libraryDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryVersion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INFO),
            "::",
            stringify!(libraryVersion)
        )
    );
}
pub type CK_INFO_PTR = *mut CK_INFO;
pub type CK_NOTIFICATION = CK_ULONG;
pub type CK_SLOT_ID = CK_ULONG;
pub type CK_SLOT_ID_PTR = *mut CK_SLOT_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SLOT_INFO {
    pub slotDescription: [CK_UTF8CHAR; 64usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub flags: CK_FLAGS,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
}
#[test]
fn bindgen_test_layout_CK_SLOT_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SLOT_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SLOT_INFO>(),
        112usize,
        concat!("Size of: ", stringify!(CK_SLOT_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SLOT_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SLOT_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotDescription) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SLOT_INFO),
            "::",
            stringify!(slotDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturerID) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SLOT_INFO),
            "::",
            stringify!(manufacturerID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SLOT_INFO),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardwareVersion) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SLOT_INFO),
            "::",
            stringify!(hardwareVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firmwareVersion) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SLOT_INFO),
            "::",
            stringify!(firmwareVersion)
        )
    );
}
impl Default for CK_SLOT_INFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SLOT_INFO_PTR = *mut CK_SLOT_INFO;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_TOKEN_INFO {
    pub label: [CK_UTF8CHAR; 32usize],
    pub manufacturerID: [CK_UTF8CHAR; 32usize],
    pub model: [CK_UTF8CHAR; 16usize],
    pub serialNumber: [CK_CHAR; 16usize],
    pub flags: CK_FLAGS,
    pub ulMaxSessionCount: CK_ULONG,
    pub ulSessionCount: CK_ULONG,
    pub ulMaxRwSessionCount: CK_ULONG,
    pub ulRwSessionCount: CK_ULONG,
    pub ulMaxPinLen: CK_ULONG,
    pub ulMinPinLen: CK_ULONG,
    pub ulTotalPublicMemory: CK_ULONG,
    pub ulFreePublicMemory: CK_ULONG,
    pub ulTotalPrivateMemory: CK_ULONG,
    pub ulFreePrivateMemory: CK_ULONG,
    pub hardwareVersion: CK_VERSION,
    pub firmwareVersion: CK_VERSION,
    pub utcTime: [CK_CHAR; 16usize],
}
#[test]
fn bindgen_test_layout_CK_TOKEN_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TOKEN_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TOKEN_INFO>(),
        208usize,
        concat!("Size of: ", stringify!(CK_TOKEN_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TOKEN_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_TOKEN_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturerID) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(manufacturerID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialNumber) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMaxSessionCount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulMaxSessionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSessionCount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulSessionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMaxRwSessionCount) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulMaxRwSessionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRwSessionCount) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulRwSessionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMaxPinLen) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulMaxPinLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMinPinLen) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulMinPinLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulTotalPublicMemory) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulTotalPublicMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulFreePublicMemory) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulFreePublicMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulTotalPrivateMemory) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulTotalPrivateMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulFreePrivateMemory) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(ulFreePrivateMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hardwareVersion) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(hardwareVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firmwareVersion) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(firmwareVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utcTime) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TOKEN_INFO),
            "::",
            stringify!(utcTime)
        )
    );
}
pub type CK_TOKEN_INFO_PTR = *mut CK_TOKEN_INFO;
pub type CK_SESSION_HANDLE = CK_ULONG;
pub type CK_SESSION_HANDLE_PTR = *mut CK_SESSION_HANDLE;
pub type CK_USER_TYPE = CK_ULONG;
pub type CK_STATE = CK_ULONG;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_SESSION_INFO {
    pub slotID: CK_SLOT_ID,
    pub state: CK_STATE,
    pub flags: CK_FLAGS,
    pub ulDeviceError: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SESSION_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SESSION_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SESSION_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(CK_SESSION_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SESSION_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SESSION_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SESSION_INFO),
            "::",
            stringify!(slotID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SESSION_INFO),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SESSION_INFO),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulDeviceError) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SESSION_INFO),
            "::",
            stringify!(ulDeviceError)
        )
    );
}
pub type CK_SESSION_INFO_PTR = *mut CK_SESSION_INFO;
pub type CK_OBJECT_HANDLE = CK_ULONG;
pub type CK_OBJECT_HANDLE_PTR = *mut CK_OBJECT_HANDLE;
pub type CK_OBJECT_CLASS = CK_ULONG;
pub type CK_OBJECT_CLASS_PTR = *mut CK_OBJECT_CLASS;
pub type CK_HW_FEATURE_TYPE = CK_ULONG;
pub type CK_KEY_TYPE = CK_ULONG;
pub type CK_CERTIFICATE_TYPE = CK_ULONG;
pub type CK_ATTRIBUTE_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ATTRIBUTE {
    pub type_: CK_ATTRIBUTE_TYPE,
    pub pValue: CK_VOID_PTR,
    pub ulValueLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_ATTRIBUTE() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ATTRIBUTE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ATTRIBUTE>(),
        24usize,
        concat!("Size of: ", stringify!(CK_ATTRIBUTE))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ATTRIBUTE>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ATTRIBUTE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ATTRIBUTE),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ATTRIBUTE),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulValueLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ATTRIBUTE),
            "::",
            stringify!(ulValueLen)
        )
    );
}
impl Default for CK_ATTRIBUTE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ATTRIBUTE_PTR = *mut CK_ATTRIBUTE;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_DATE {
    pub year: [CK_CHAR; 4usize],
    pub month: [CK_CHAR; 2usize],
    pub day: [CK_CHAR; 2usize],
}
#[test]
fn bindgen_test_layout_CK_DATE() {
    const UNINIT: ::std::mem::MaybeUninit<CK_DATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_DATE>(),
        8usize,
        concat!("Size of: ", stringify!(CK_DATE))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_DATE>(),
        1usize,
        concat!("Alignment of ", stringify!(CK_DATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DATE),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DATE),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DATE),
            "::",
            stringify!(day)
        )
    );
}
pub type CK_MECHANISM_TYPE = CK_ULONG;
pub type CK_MECHANISM_TYPE_PTR = *mut CK_MECHANISM_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_MECHANISM {
    pub mechanism: CK_MECHANISM_TYPE,
    pub pParameter: CK_VOID_PTR,
    pub ulParameterLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_MECHANISM() {
    const UNINIT: ::std::mem::MaybeUninit<CK_MECHANISM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_MECHANISM>(),
        24usize,
        concat!("Size of: ", stringify!(CK_MECHANISM))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_MECHANISM>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_MECHANISM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM),
            "::",
            stringify!(mechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParameter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM),
            "::",
            stringify!(pParameter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulParameterLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM),
            "::",
            stringify!(ulParameterLen)
        )
    );
}
impl Default for CK_MECHANISM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_MECHANISM_PTR = *mut CK_MECHANISM;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_MECHANISM_INFO {
    pub ulMinKeySize: CK_ULONG,
    pub ulMaxKeySize: CK_ULONG,
    pub flags: CK_FLAGS,
}
#[test]
fn bindgen_test_layout_CK_MECHANISM_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_MECHANISM_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_MECHANISM_INFO>(),
        24usize,
        concat!("Size of: ", stringify!(CK_MECHANISM_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_MECHANISM_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_MECHANISM_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMinKeySize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM_INFO),
            "::",
            stringify!(ulMinKeySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMaxKeySize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM_INFO),
            "::",
            stringify!(ulMaxKeySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_MECHANISM_INFO),
            "::",
            stringify!(flags)
        )
    );
}
pub type CK_MECHANISM_INFO_PTR = *mut CK_MECHANISM_INFO;
pub type CK_RV = CK_ULONG;
pub type CK_NOTIFY = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        event: CK_NOTIFICATION,
        pApplication: CK_VOID_PTR,
    ) -> CK_RV,
>;
pub type CK_FUNCTION_LIST_PTR = *mut CK_FUNCTION_LIST;
pub type CK_FUNCTION_LIST_3_0_PTR = *mut CK_FUNCTION_LIST_3_0;
pub type CK_FUNCTION_LIST_PTR_PTR = *mut CK_FUNCTION_LIST_PTR;
pub type CK_FUNCTION_LIST_3_0_PTR_PTR = *mut CK_FUNCTION_LIST_3_0_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_INTERFACE {
    pub pInterfaceName: *mut CK_CHAR,
    pub pFunctionList: CK_VOID_PTR,
    pub flags: CK_FLAGS,
}
#[test]
fn bindgen_test_layout_CK_INTERFACE() {
    const UNINIT: ::std::mem::MaybeUninit<CK_INTERFACE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_INTERFACE>(),
        24usize,
        concat!("Size of: ", stringify!(CK_INTERFACE))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_INTERFACE>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_INTERFACE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInterfaceName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INTERFACE),
            "::",
            stringify!(pInterfaceName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFunctionList) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INTERFACE),
            "::",
            stringify!(pFunctionList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_INTERFACE),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for CK_INTERFACE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_INTERFACE_PTR = *mut CK_INTERFACE;
pub type CK_INTERFACE_PTR_PTR = *mut CK_INTERFACE_PTR;
pub type CK_CREATEMUTEX =
    ::std::option::Option<unsafe extern "C" fn(ppMutex: CK_VOID_PTR_PTR) -> CK_RV>;
pub type CK_DESTROYMUTEX =
    ::std::option::Option<unsafe extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_LOCKMUTEX = ::std::option::Option<unsafe extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
pub type CK_UNLOCKMUTEX = ::std::option::Option<unsafe extern "C" fn(pMutex: CK_VOID_PTR) -> CK_RV>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_C_INITIALIZE_ARGS {
    pub CreateMutex: CK_CREATEMUTEX,
    pub DestroyMutex: CK_DESTROYMUTEX,
    pub LockMutex: CK_LOCKMUTEX,
    pub UnlockMutex: CK_UNLOCKMUTEX,
    pub flags: CK_FLAGS,
    pub pReserved: CK_VOID_PTR,
}
#[test]
fn bindgen_test_layout_CK_C_INITIALIZE_ARGS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_C_INITIALIZE_ARGS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_C_INITIALIZE_ARGS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_C_INITIALIZE_ARGS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_C_INITIALIZE_ARGS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_C_INITIALIZE_ARGS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateMutex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(CreateMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DestroyMutex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(DestroyMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LockMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(LockMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnlockMutex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(UnlockMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_C_INITIALIZE_ARGS),
            "::",
            stringify!(pReserved)
        )
    );
}
impl Default for CK_C_INITIALIZE_ARGS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_C_INITIALIZE_ARGS_PTR = *mut CK_C_INITIALIZE_ARGS;
pub type CK_RSA_PKCS_MGF_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_MGF_TYPE_PTR = *mut CK_RSA_PKCS_MGF_TYPE;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE = CK_ULONG;
pub type CK_RSA_PKCS_OAEP_SOURCE_TYPE_PTR = *mut CK_RSA_PKCS_OAEP_SOURCE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_RSA_PKCS_OAEP_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub source: CK_RSA_PKCS_OAEP_SOURCE_TYPE,
    pub pSourceData: CK_VOID_PTR,
    pub ulSourceDataLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RSA_PKCS_OAEP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RSA_PKCS_OAEP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RSA_PKCS_OAEP_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_RSA_PKCS_OAEP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RSA_PKCS_OAEP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RSA_PKCS_OAEP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashAlg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_OAEP_PARAMS),
            "::",
            stringify!(hashAlg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_OAEP_PARAMS),
            "::",
            stringify!(mgf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_OAEP_PARAMS),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSourceData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_OAEP_PARAMS),
            "::",
            stringify!(pSourceData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSourceDataLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_OAEP_PARAMS),
            "::",
            stringify!(ulSourceDataLen)
        )
    );
}
impl Default for CK_RSA_PKCS_OAEP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_RSA_PKCS_OAEP_PARAMS_PTR = *mut CK_RSA_PKCS_OAEP_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_RSA_PKCS_PSS_PARAMS {
    pub hashAlg: CK_MECHANISM_TYPE,
    pub mgf: CK_RSA_PKCS_MGF_TYPE,
    pub sLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RSA_PKCS_PSS_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RSA_PKCS_PSS_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RSA_PKCS_PSS_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_RSA_PKCS_PSS_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RSA_PKCS_PSS_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RSA_PKCS_PSS_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashAlg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_PSS_PARAMS),
            "::",
            stringify!(hashAlg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_PSS_PARAMS),
            "::",
            stringify!(mgf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_PKCS_PSS_PARAMS),
            "::",
            stringify!(sLen)
        )
    );
}
pub type CK_RSA_PKCS_PSS_PARAMS_PTR = *mut CK_RSA_PKCS_PSS_PARAMS;
pub type CK_EC_KDF_TYPE = CK_ULONG;
pub type CK_EC_KDF_TYPE_PTR = *mut CK_EC_KDF_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ECDH1_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_ECDH1_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ECDH1_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ECDH1_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_ECDH1_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ECDH1_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ECDH1_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH1_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSharedDataLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH1_DERIVE_PARAMS),
            "::",
            stringify!(ulSharedDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSharedData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH1_DERIVE_PARAMS),
            "::",
            stringify!(pSharedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH1_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH1_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
}
impl Default for CK_ECDH1_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ECDH1_DERIVE_PARAMS_PTR = *mut CK_ECDH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ECDH2_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_ECDH2_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ECDH2_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ECDH2_DERIVE_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_ECDH2_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ECDH2_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ECDH2_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSharedDataLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(ulSharedDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSharedData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(pSharedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrivateDataLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPrivateDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPrivateData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(hPrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH2_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData2)
        )
    );
}
impl Default for CK_ECDH2_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ECDH2_DERIVE_PARAMS_PTR = *mut CK_ECDH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ECMQV_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
#[test]
fn bindgen_test_layout_CK_ECMQV_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ECMQV_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ECMQV_DERIVE_PARAMS>(),
        80usize,
        concat!("Size of: ", stringify!(CK_ECMQV_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ECMQV_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ECMQV_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSharedDataLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(ulSharedDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSharedData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(pSharedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrivateDataLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPrivateDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPrivateData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(hPrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publicKey) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECMQV_DERIVE_PARAMS),
            "::",
            stringify!(publicKey)
        )
    );
}
impl Default for CK_ECMQV_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ECMQV_DERIVE_PARAMS_PTR = *mut CK_ECMQV_DERIVE_PARAMS;
pub type CK_X9_42_DH_KDF_TYPE = CK_ULONG;
pub type CK_X9_42_DH_KDF_TYPE_PTR = *mut CK_X9_42_DH_KDF_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X9_42_DH1_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_X9_42_DH1_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X9_42_DH1_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X9_42_DH1_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_X9_42_DH1_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X9_42_DH1_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X9_42_DH1_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH1_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOtherInfoLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH1_DERIVE_PARAMS),
            "::",
            stringify!(ulOtherInfoLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOtherInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH1_DERIVE_PARAMS),
            "::",
            stringify!(pOtherInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH1_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH1_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
}
impl Default for CK_X9_42_DH1_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X9_42_DH1_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH1_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X9_42_DH2_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_X9_42_DH2_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X9_42_DH2_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X9_42_DH2_DERIVE_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_X9_42_DH2_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X9_42_DH2_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X9_42_DH2_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOtherInfoLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(ulOtherInfoLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOtherInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(pOtherInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrivateDataLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPrivateDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPrivateData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(hPrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_DH2_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData2)
        )
    );
}
impl Default for CK_X9_42_DH2_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X9_42_DH2_DERIVE_PARAMS_PTR = *mut CK_X9_42_DH2_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X9_42_MQV_DERIVE_PARAMS {
    pub kdf: CK_X9_42_DH_KDF_TYPE,
    pub ulOtherInfoLen: CK_ULONG,
    pub pOtherInfo: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPrivateDataLen: CK_ULONG,
    pub hPrivateData: CK_OBJECT_HANDLE,
    pub ulPublicDataLen2: CK_ULONG,
    pub pPublicData2: CK_BYTE_PTR,
    pub publicKey: CK_OBJECT_HANDLE,
}
#[test]
fn bindgen_test_layout_CK_X9_42_MQV_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X9_42_MQV_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X9_42_MQV_DERIVE_PARAMS>(),
        80usize,
        concat!("Size of: ", stringify!(CK_X9_42_MQV_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X9_42_MQV_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X9_42_MQV_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOtherInfoLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(ulOtherInfoLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOtherInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(pOtherInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrivateDataLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPrivateDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPrivateData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(hPrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publicKey) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X9_42_MQV_DERIVE_PARAMS),
            "::",
            stringify!(publicKey)
        )
    );
}
impl Default for CK_X9_42_MQV_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X9_42_MQV_DERIVE_PARAMS_PTR = *mut CK_X9_42_MQV_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_KEA_DERIVE_PARAMS {
    pub isSender: CK_BBOOL,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pRandomB: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_KEA_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_KEA_DERIVE_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_KEA_DERIVE_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_KEA_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_KEA_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_KEA_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSender) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(isSender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRandomLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(ulRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRandomA) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(pRandomA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRandomB) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(pRandomB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEA_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
}
impl Default for CK_KEA_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_KEA_DERIVE_PARAMS_PTR = *mut CK_KEA_DERIVE_PARAMS;
pub type CK_RC2_PARAMS = CK_ULONG;
pub type CK_RC2_PARAMS_PTR = *mut CK_RC2_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_RC2_CBC_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub iv: [CK_BYTE; 8usize],
}
#[test]
fn bindgen_test_layout_CK_RC2_CBC_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RC2_CBC_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RC2_CBC_PARAMS>(),
        16usize,
        concat!("Size of: ", stringify!(CK_RC2_CBC_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RC2_CBC_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RC2_CBC_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulEffectiveBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC2_CBC_PARAMS),
            "::",
            stringify!(ulEffectiveBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC2_CBC_PARAMS),
            "::",
            stringify!(iv)
        )
    );
}
pub type CK_RC2_CBC_PARAMS_PTR = *mut CK_RC2_CBC_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_RC2_MAC_GENERAL_PARAMS {
    pub ulEffectiveBits: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RC2_MAC_GENERAL_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RC2_MAC_GENERAL_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RC2_MAC_GENERAL_PARAMS>(),
        16usize,
        concat!("Size of: ", stringify!(CK_RC2_MAC_GENERAL_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RC2_MAC_GENERAL_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RC2_MAC_GENERAL_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulEffectiveBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC2_MAC_GENERAL_PARAMS),
            "::",
            stringify!(ulEffectiveBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC2_MAC_GENERAL_PARAMS),
            "::",
            stringify!(ulMacLength)
        )
    );
}
pub type CK_RC2_MAC_GENERAL_PARAMS_PTR = *mut CK_RC2_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_RC5_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RC5_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RC5_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RC5_PARAMS>(),
        16usize,
        concat!("Size of: ", stringify!(CK_RC5_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RC5_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RC5_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWordsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_PARAMS),
            "::",
            stringify!(ulWordsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_PARAMS),
            "::",
            stringify!(ulRounds)
        )
    );
}
pub type CK_RC5_PARAMS_PTR = *mut CK_RC5_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_RC5_CBC_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RC5_CBC_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RC5_CBC_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RC5_CBC_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_RC5_CBC_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RC5_CBC_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RC5_CBC_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWordsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_CBC_PARAMS),
            "::",
            stringify!(ulWordsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_CBC_PARAMS),
            "::",
            stringify!(ulRounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_CBC_PARAMS),
            "::",
            stringify!(pIv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_CBC_PARAMS),
            "::",
            stringify!(ulIvLen)
        )
    );
}
impl Default for CK_RC5_CBC_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_RC5_CBC_PARAMS_PTR = *mut CK_RC5_CBC_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_RC5_MAC_GENERAL_PARAMS {
    pub ulWordsize: CK_ULONG,
    pub ulRounds: CK_ULONG,
    pub ulMacLength: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_RC5_MAC_GENERAL_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RC5_MAC_GENERAL_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RC5_MAC_GENERAL_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_RC5_MAC_GENERAL_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RC5_MAC_GENERAL_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RC5_MAC_GENERAL_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWordsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_MAC_GENERAL_PARAMS),
            "::",
            stringify!(ulWordsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_MAC_GENERAL_PARAMS),
            "::",
            stringify!(ulRounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacLength) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RC5_MAC_GENERAL_PARAMS),
            "::",
            stringify!(ulMacLength)
        )
    );
}
pub type CK_RC5_MAC_GENERAL_PARAMS_PTR = *mut CK_RC5_MAC_GENERAL_PARAMS;
pub type CK_MAC_GENERAL_PARAMS = CK_ULONG;
pub type CK_MAC_GENERAL_PARAMS_PTR = *mut CK_MAC_GENERAL_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 8usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_DES_CBC_ENCRYPT_DATA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_DES_CBC_ENCRYPT_DATA_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_DES_CBC_ENCRYPT_DATA_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_DES_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_DES_CBC_ENCRYPT_DATA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_DES_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(length)
        )
    );
}
impl Default for CK_DES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_DES_CBC_ENCRYPT_DATA_PARAMS_PTR = *mut CK_DES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_AES_CBC_ENCRYPT_DATA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_AES_CBC_ENCRYPT_DATA_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_AES_CBC_ENCRYPT_DATA_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_AES_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_AES_CBC_ENCRYPT_DATA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_AES_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(length)
        )
    );
}
impl Default for CK_AES_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_AES_CBC_ENCRYPT_DATA_PARAMS_PTR = *mut CK_AES_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    pub ulPasswordLen: CK_ULONG,
    pub pPassword: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPAndGLen: CK_ULONG,
    pub ulQLen: CK_ULONG,
    pub ulRandomLen: CK_ULONG,
    pub pRandomA: CK_BYTE_PTR,
    pub pPrimeP: CK_BYTE_PTR,
    pub pBaseG: CK_BYTE_PTR,
    pub pSubprimeQ: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_SKIPJACK_PRIVATE_WRAP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SKIPJACK_PRIVATE_WRAP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SKIPJACK_PRIVATE_WRAP_PARAMS>(),
        88usize,
        concat!("Size of: ", stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SKIPJACK_PRIVATE_WRAP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPasswordLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(ulPasswordLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPassword) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPAndGLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(ulPAndGLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulQLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(ulQLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRandomLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(ulRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRandomA) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pRandomA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrimeP) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pPrimeP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBaseG) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pBaseG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubprimeQ) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_PRIVATE_WRAP_PARAMS),
            "::",
            stringify!(pSubprimeQ)
        )
    );
}
impl Default for CK_SKIPJACK_PRIVATE_WRAP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SKIPJACK_PRIVATE_WRAP_PARAMS_PTR = *mut CK_SKIPJACK_PRIVATE_WRAP_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SKIPJACK_RELAYX_PARAMS {
    pub ulOldWrappedXLen: CK_ULONG,
    pub pOldWrappedX: CK_BYTE_PTR,
    pub ulOldPasswordLen: CK_ULONG,
    pub pOldPassword: CK_BYTE_PTR,
    pub ulOldPublicDataLen: CK_ULONG,
    pub pOldPublicData: CK_BYTE_PTR,
    pub ulOldRandomLen: CK_ULONG,
    pub pOldRandomA: CK_BYTE_PTR,
    pub ulNewPasswordLen: CK_ULONG,
    pub pNewPassword: CK_BYTE_PTR,
    pub ulNewPublicDataLen: CK_ULONG,
    pub pNewPublicData: CK_BYTE_PTR,
    pub ulNewRandomLen: CK_ULONG,
    pub pNewRandomA: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_SKIPJACK_RELAYX_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SKIPJACK_RELAYX_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SKIPJACK_RELAYX_PARAMS>(),
        112usize,
        concat!("Size of: ", stringify!(CK_SKIPJACK_RELAYX_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SKIPJACK_RELAYX_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SKIPJACK_RELAYX_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOldWrappedXLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulOldWrappedXLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOldWrappedX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pOldWrappedX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOldPasswordLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulOldPasswordLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOldPassword) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pOldPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOldPublicDataLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulOldPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOldPublicData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pOldPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulOldRandomLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulOldRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOldRandomA) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pOldRandomA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNewPasswordLen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulNewPasswordLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNewPassword) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pNewPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNewPublicDataLen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulNewPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNewPublicData) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pNewPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNewRandomLen) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(ulNewRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNewRandomA) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SKIPJACK_RELAYX_PARAMS),
            "::",
            stringify!(pNewRandomA)
        )
    );
}
impl Default for CK_SKIPJACK_RELAYX_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SKIPJACK_RELAYX_PARAMS_PTR = *mut CK_SKIPJACK_RELAYX_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_PBE_PARAMS {
    pub pInitVector: CK_BYTE_PTR,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub ulIteration: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_PBE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_PBE_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_PBE_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_PBE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_PBE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_PBE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitVector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(pInitVector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPassword) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(pPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPasswordLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(ulPasswordLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSalt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(pSalt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSaltLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(ulSaltLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIteration) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PBE_PARAMS),
            "::",
            stringify!(ulIteration)
        )
    );
}
impl Default for CK_PBE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_PBE_PARAMS_PTR = *mut CK_PBE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_KEY_WRAP_SET_OAEP_PARAMS {
    pub bBC: CK_BYTE,
    pub pX: CK_BYTE_PTR,
    pub ulXLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_KEY_WRAP_SET_OAEP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_KEY_WRAP_SET_OAEP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_KEY_WRAP_SET_OAEP_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_KEY_WRAP_SET_OAEP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_KEY_WRAP_SET_OAEP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_KEY_WRAP_SET_OAEP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEY_WRAP_SET_OAEP_PARAMS),
            "::",
            stringify!(bBC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEY_WRAP_SET_OAEP_PARAMS),
            "::",
            stringify!(pX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulXLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEY_WRAP_SET_OAEP_PARAMS),
            "::",
            stringify!(ulXLen)
        )
    );
}
impl Default for CK_KEY_WRAP_SET_OAEP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_KEY_WRAP_SET_OAEP_PARAMS_PTR = *mut CK_KEY_WRAP_SET_OAEP_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SSL3_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SSL3_RANDOM_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SSL3_RANDOM_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SSL3_RANDOM_DATA>(),
        32usize,
        concat!("Size of: ", stringify!(CK_SSL3_RANDOM_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SSL3_RANDOM_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SSL3_RANDOM_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClientRandom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_RANDOM_DATA),
            "::",
            stringify!(pClientRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulClientRandomLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_RANDOM_DATA),
            "::",
            stringify!(ulClientRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pServerRandom) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_RANDOM_DATA),
            "::",
            stringify!(pServerRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulServerRandomLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_RANDOM_DATA),
            "::",
            stringify!(ulServerRandomLen)
        )
    );
}
impl Default for CK_SSL3_RANDOM_DATA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
}
#[test]
fn bindgen_test_layout_CK_SSL3_MASTER_KEY_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SSL3_MASTER_KEY_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SSL3_MASTER_KEY_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_SSL3_MASTER_KEY_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SSL3_MASTER_KEY_DERIVE_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_SSL3_MASTER_KEY_DERIVE_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(pVersion)
        )
    );
}
impl Default for CK_SSL3_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SSL3_MASTER_KEY_DERIVE_PARAMS_PTR = *mut CK_SSL3_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SSL3_KEY_MAT_OUT {
    pub hClientMacSecret: CK_OBJECT_HANDLE,
    pub hServerMacSecret: CK_OBJECT_HANDLE,
    pub hClientKey: CK_OBJECT_HANDLE,
    pub hServerKey: CK_OBJECT_HANDLE,
    pub pIVClient: CK_BYTE_PTR,
    pub pIVServer: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_SSL3_KEY_MAT_OUT() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SSL3_KEY_MAT_OUT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SSL3_KEY_MAT_OUT>(),
        48usize,
        concat!("Size of: ", stringify!(CK_SSL3_KEY_MAT_OUT))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SSL3_KEY_MAT_OUT>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SSL3_KEY_MAT_OUT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hClientMacSecret) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(hClientMacSecret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hServerMacSecret) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(hServerMacSecret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hClientKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(hClientKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hServerKey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(hServerKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIVClient) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(pIVClient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIVServer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_OUT),
            "::",
            stringify!(pIVServer)
        )
    );
}
impl Default for CK_SSL3_KEY_MAT_OUT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SSL3_KEY_MAT_OUT_PTR = *mut CK_SSL3_KEY_MAT_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SSL3_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
}
#[test]
fn bindgen_test_layout_CK_SSL3_KEY_MAT_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SSL3_KEY_MAT_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SSL3_KEY_MAT_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_SSL3_KEY_MAT_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SSL3_KEY_MAT_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SSL3_KEY_MAT_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacSizeInBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(ulMacSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulKeySizeInBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(ulKeySizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIVSizeInBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(ulIVSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIsExport) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(bIsExport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReturnedKeyMaterial) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SSL3_KEY_MAT_PARAMS),
            "::",
            stringify!(pReturnedKeyMaterial)
        )
    );
}
impl Default for CK_SSL3_KEY_MAT_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SSL3_KEY_MAT_PARAMS_PTR = *mut CK_SSL3_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_TLS_PRF_PARAMS {
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
#[test]
fn bindgen_test_layout_CK_TLS_PRF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TLS_PRF_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TLS_PRF_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_TLS_PRF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TLS_PRF_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_TLS_PRF_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSeed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(pSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSeedLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(ulSeedLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLabel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(pLabel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulLabelLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(ulLabelLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOutput) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(pOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulOutputLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_PRF_PARAMS),
            "::",
            stringify!(pulOutputLen)
        )
    );
}
impl Default for CK_TLS_PRF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_TLS_PRF_PARAMS_PTR = *mut CK_TLS_PRF_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_WTLS_RANDOM_DATA {
    pub pClientRandom: CK_BYTE_PTR,
    pub ulClientRandomLen: CK_ULONG,
    pub pServerRandom: CK_BYTE_PTR,
    pub ulServerRandomLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_WTLS_RANDOM_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<CK_WTLS_RANDOM_DATA> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_WTLS_RANDOM_DATA>(),
        32usize,
        concat!("Size of: ", stringify!(CK_WTLS_RANDOM_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_WTLS_RANDOM_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_WTLS_RANDOM_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClientRandom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_RANDOM_DATA),
            "::",
            stringify!(pClientRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulClientRandomLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_RANDOM_DATA),
            "::",
            stringify!(ulClientRandomLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pServerRandom) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_RANDOM_DATA),
            "::",
            stringify!(pServerRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulServerRandomLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_RANDOM_DATA),
            "::",
            stringify!(ulServerRandomLen)
        )
    );
}
impl Default for CK_WTLS_RANDOM_DATA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_WTLS_RANDOM_DATA_PTR = *mut CK_WTLS_RANDOM_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pVersion: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_WTLS_MASTER_KEY_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_WTLS_MASTER_KEY_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_WTLS_MASTER_KEY_DERIVE_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_WTLS_MASTER_KEY_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_WTLS_MASTER_KEY_DERIVE_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_WTLS_MASTER_KEY_DERIVE_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigestMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(DigestMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(pVersion)
        )
    );
}
impl Default for CK_WTLS_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_WTLS_MASTER_KEY_DERIVE_PARAMS_PTR = *mut CK_WTLS_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_WTLS_PRF_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLen: CK_ULONG,
    pub pOutput: CK_BYTE_PTR,
    pub pulOutputLen: CK_ULONG_PTR,
}
#[test]
fn bindgen_test_layout_CK_WTLS_PRF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_WTLS_PRF_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_WTLS_PRF_PARAMS>(),
        56usize,
        concat!("Size of: ", stringify!(CK_WTLS_PRF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_WTLS_PRF_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_WTLS_PRF_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigestMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(DigestMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSeed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(pSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSeedLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(ulSeedLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLabel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(pLabel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulLabelLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(ulLabelLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOutput) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(pOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulOutputLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_PRF_PARAMS),
            "::",
            stringify!(pulOutputLen)
        )
    );
}
impl Default for CK_WTLS_PRF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_WTLS_PRF_PARAMS_PTR = *mut CK_WTLS_PRF_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_WTLS_KEY_MAT_OUT {
    pub hMacSecret: CK_OBJECT_HANDLE,
    pub hKey: CK_OBJECT_HANDLE,
    pub pIV: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_WTLS_KEY_MAT_OUT() {
    const UNINIT: ::std::mem::MaybeUninit<CK_WTLS_KEY_MAT_OUT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_WTLS_KEY_MAT_OUT>(),
        24usize,
        concat!("Size of: ", stringify!(CK_WTLS_KEY_MAT_OUT))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_WTLS_KEY_MAT_OUT>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_WTLS_KEY_MAT_OUT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hMacSecret) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_OUT),
            "::",
            stringify!(hMacSecret)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_OUT),
            "::",
            stringify!(hKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIV) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_OUT),
            "::",
            stringify!(pIV)
        )
    );
}
impl Default for CK_WTLS_KEY_MAT_OUT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_WTLS_KEY_MAT_OUT_PTR = *mut CK_WTLS_KEY_MAT_OUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_WTLS_KEY_MAT_PARAMS {
    pub DigestMechanism: CK_MECHANISM_TYPE,
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub ulSequenceNumber: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_WTLS_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_WTLS_KEY_MAT_OUT_PTR,
}
#[test]
fn bindgen_test_layout_CK_WTLS_KEY_MAT_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_WTLS_KEY_MAT_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_WTLS_KEY_MAT_PARAMS>(),
        88usize,
        concat!("Size of: ", stringify!(CK_WTLS_KEY_MAT_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_WTLS_KEY_MAT_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_WTLS_KEY_MAT_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigestMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(DigestMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacSizeInBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(ulMacSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulKeySizeInBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(ulKeySizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIVSizeInBits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(ulIVSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSequenceNumber) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(ulSequenceNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIsExport) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(bIsExport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReturnedKeyMaterial) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_WTLS_KEY_MAT_PARAMS),
            "::",
            stringify!(pReturnedKeyMaterial)
        )
    );
}
impl Default for CK_WTLS_KEY_MAT_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_WTLS_KEY_MAT_PARAMS_PTR = *mut CK_WTLS_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_CMS_SIG_PARAMS {
    pub certificateHandle: CK_OBJECT_HANDLE,
    pub pSigningMechanism: CK_MECHANISM_PTR,
    pub pDigestMechanism: CK_MECHANISM_PTR,
    pub pContentType: CK_UTF8CHAR_PTR,
    pub pRequestedAttributes: CK_BYTE_PTR,
    pub ulRequestedAttributesLen: CK_ULONG,
    pub pRequiredAttributes: CK_BYTE_PTR,
    pub ulRequiredAttributesLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_CMS_SIG_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CMS_SIG_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CMS_SIG_PARAMS>(),
        64usize,
        concat!("Size of: ", stringify!(CK_CMS_SIG_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CMS_SIG_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_CMS_SIG_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).certificateHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(certificateHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSigningMechanism) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(pSigningMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDigestMechanism) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(pDigestMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pContentType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(pContentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRequestedAttributes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(pRequestedAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRequestedAttributesLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(ulRequestedAttributesLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRequiredAttributes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(pRequiredAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulRequiredAttributesLen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CMS_SIG_PARAMS),
            "::",
            stringify!(ulRequiredAttributesLen)
        )
    );
}
impl Default for CK_CMS_SIG_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_CMS_SIG_PARAMS_PTR = *mut CK_CMS_SIG_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_KEY_DERIVATION_STRING_DATA {
    pub pData: CK_BYTE_PTR,
    pub ulLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_KEY_DERIVATION_STRING_DATA() {
    const UNINIT: ::std::mem::MaybeUninit<CK_KEY_DERIVATION_STRING_DATA> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_KEY_DERIVATION_STRING_DATA>(),
        16usize,
        concat!("Size of: ", stringify!(CK_KEY_DERIVATION_STRING_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_KEY_DERIVATION_STRING_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_KEY_DERIVATION_STRING_DATA))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEY_DERIVATION_STRING_DATA),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KEY_DERIVATION_STRING_DATA),
            "::",
            stringify!(ulLen)
        )
    );
}
impl Default for CK_KEY_DERIVATION_STRING_DATA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_KEY_DERIVATION_STRING_DATA_PTR = *mut CK_KEY_DERIVATION_STRING_DATA;
pub type CK_EXTRACT_PARAMS = CK_ULONG;
pub type CK_EXTRACT_PARAMS_PTR = *mut CK_EXTRACT_PARAMS;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE_PTR =
    *mut CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE = CK_ULONG;
pub type CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE_PTR = *mut CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_PKCS5_PBKD2_PARAMS {
    pub saltSource: CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE,
    pub pSaltSourceData: CK_VOID_PTR,
    pub ulSaltSourceDataLen: CK_ULONG,
    pub iterations: CK_ULONG,
    pub prf: CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE,
    pub pPrfData: CK_VOID_PTR,
    pub ulPrfDataLen: CK_ULONG,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG_PTR,
}
#[test]
fn bindgen_test_layout_CK_PKCS5_PBKD2_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_PKCS5_PBKD2_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_PKCS5_PBKD2_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_PKCS5_PBKD2_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_PKCS5_PBKD2_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_PKCS5_PBKD2_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saltSource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(saltSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSaltSourceData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(pSaltSourceData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSaltSourceDataLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(ulSaltSourceDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(iterations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(prf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrfData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(pPrfData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrfDataLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(ulPrfDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPassword) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(pPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPasswordLen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS),
            "::",
            stringify!(ulPasswordLen)
        )
    );
}
impl Default for CK_PKCS5_PBKD2_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_PKCS5_PBKD2_PARAMS_PTR = *mut CK_PKCS5_PBKD2_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_PKCS5_PBKD2_PARAMS2 {
    pub saltSource: CK_PKCS5_PBKDF2_SALT_SOURCE_TYPE,
    pub pSaltSourceData: CK_VOID_PTR,
    pub ulSaltSourceDataLen: CK_ULONG,
    pub iterations: CK_ULONG,
    pub prf: CK_PKCS5_PBKD2_PSEUDO_RANDOM_FUNCTION_TYPE,
    pub pPrfData: CK_VOID_PTR,
    pub ulPrfDataLen: CK_ULONG,
    pub pPassword: CK_UTF8CHAR_PTR,
    pub ulPasswordLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_PKCS5_PBKD2_PARAMS2() {
    const UNINIT: ::std::mem::MaybeUninit<CK_PKCS5_PBKD2_PARAMS2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_PKCS5_PBKD2_PARAMS2>(),
        72usize,
        concat!("Size of: ", stringify!(CK_PKCS5_PBKD2_PARAMS2))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_PKCS5_PBKD2_PARAMS2>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_PKCS5_PBKD2_PARAMS2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saltSource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(saltSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSaltSourceData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(pSaltSourceData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSaltSourceDataLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(ulSaltSourceDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(iterations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(prf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrfData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(pPrfData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPrfDataLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(ulPrfDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPassword) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(pPassword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPasswordLen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PKCS5_PBKD2_PARAMS2),
            "::",
            stringify!(ulPasswordLen)
        )
    );
}
impl Default for CK_PKCS5_PBKD2_PARAMS2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_PKCS5_PBKD2_PARAMS2_PTR = *mut CK_PKCS5_PBKD2_PARAMS2;
pub type CK_OTP_PARAM_TYPE = CK_ULONG;
pub type CK_PARAM_TYPE = CK_OTP_PARAM_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_OTP_PARAM {
    pub type_: CK_OTP_PARAM_TYPE,
    pub pValue: CK_VOID_PTR,
    pub ulValueLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_OTP_PARAM() {
    const UNINIT: ::std::mem::MaybeUninit<CK_OTP_PARAM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_OTP_PARAM>(),
        24usize,
        concat!("Size of: ", stringify!(CK_OTP_PARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_OTP_PARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_OTP_PARAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_PARAM),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_PARAM),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulValueLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_PARAM),
            "::",
            stringify!(ulValueLen)
        )
    );
}
impl Default for CK_OTP_PARAM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_OTP_PARAM_PTR = *mut CK_OTP_PARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_OTP_PARAMS {
    pub pParams: CK_OTP_PARAM_PTR,
    pub ulCount: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_OTP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_OTP_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_OTP_PARAMS>(),
        16usize,
        concat!("Size of: ", stringify!(CK_OTP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_OTP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_OTP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParams) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_PARAMS),
            "::",
            stringify!(pParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_PARAMS),
            "::",
            stringify!(ulCount)
        )
    );
}
impl Default for CK_OTP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_OTP_PARAMS_PTR = *mut CK_OTP_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_OTP_SIGNATURE_INFO {
    pub pParams: CK_OTP_PARAM_PTR,
    pub ulCount: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_OTP_SIGNATURE_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<CK_OTP_SIGNATURE_INFO> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_OTP_SIGNATURE_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(CK_OTP_SIGNATURE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_OTP_SIGNATURE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_OTP_SIGNATURE_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParams) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_SIGNATURE_INFO),
            "::",
            stringify!(pParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_OTP_SIGNATURE_INFO),
            "::",
            stringify!(ulCount)
        )
    );
}
impl Default for CK_OTP_SIGNATURE_INFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_OTP_SIGNATURE_INFO_PTR = *mut CK_OTP_SIGNATURE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_KIP_PARAMS {
    pub pMechanism: CK_MECHANISM_PTR,
    pub hKey: CK_OBJECT_HANDLE,
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_KIP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_KIP_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_KIP_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_KIP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_KIP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_KIP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KIP_PARAMS),
            "::",
            stringify!(pMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KIP_PARAMS),
            "::",
            stringify!(hKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSeed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KIP_PARAMS),
            "::",
            stringify!(pSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSeedLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_KIP_PARAMS),
            "::",
            stringify!(ulSeedLen)
        )
    );
}
impl Default for CK_KIP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_KIP_PARAMS_PTR = *mut CK_KIP_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_AES_CTR_PARAMS {
    pub ulCounterBits: CK_ULONG,
    pub cb: [CK_BYTE; 16usize],
}
#[test]
fn bindgen_test_layout_CK_AES_CTR_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_AES_CTR_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_AES_CTR_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_AES_CTR_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_AES_CTR_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_AES_CTR_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCounterBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CTR_PARAMS),
            "::",
            stringify!(ulCounterBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CTR_PARAMS),
            "::",
            stringify!(cb)
        )
    );
}
pub type CK_AES_CTR_PARAMS_PTR = *mut CK_AES_CTR_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_GCM_PARAMS {
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
    pub ulIvBits: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_GCM_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_GCM_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_GCM_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_GCM_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_GCM_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_GCM_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(pIv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(ulIvLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(ulIvBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAAD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(pAAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAADLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(ulAADLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulTagBits) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_PARAMS),
            "::",
            stringify!(ulTagBits)
        )
    );
}
impl Default for CK_GCM_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_GCM_PARAMS_PTR = *mut CK_GCM_PARAMS;
pub type CK_GENERATOR_FUNCTION = CK_ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_GCM_MESSAGE_PARAMS {
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
    pub ulIvFixedBits: CK_ULONG,
    pub ivGenerator: CK_GENERATOR_FUNCTION,
    pub pTag: CK_BYTE_PTR,
    pub ulTagBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_GCM_MESSAGE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_GCM_MESSAGE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_GCM_MESSAGE_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_GCM_MESSAGE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_GCM_MESSAGE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_GCM_MESSAGE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(pIv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulIvLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvFixedBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulIvFixedBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ivGenerator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(ivGenerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(pTag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulTagBits) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulTagBits)
        )
    );
}
impl Default for CK_GCM_MESSAGE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_GCM_MESSAGE_PARAMS_PTR = *mut CK_GCM_MESSAGE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_CCM_PARAMS {
    pub ulDataLen: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulMACLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_CCM_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CCM_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CCM_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_CCM_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CCM_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_CCM_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulDataLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(ulDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(ulNonceLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAAD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(pAAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAADLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(ulAADLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMACLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_PARAMS),
            "::",
            stringify!(ulMACLen)
        )
    );
}
impl Default for CK_CCM_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_CCM_PARAMS_PTR = *mut CK_CCM_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_CCM_MESSAGE_PARAMS {
    pub ulDataLen: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub ulNonceFixedBits: CK_ULONG,
    pub nonceGenerator: CK_GENERATOR_FUNCTION,
    pub pMAC: CK_BYTE_PTR,
    pub ulMACLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_CCM_MESSAGE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CCM_MESSAGE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CCM_MESSAGE_PARAMS>(),
        56usize,
        concat!("Size of: ", stringify!(CK_CCM_MESSAGE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CCM_MESSAGE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_CCM_MESSAGE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulDataLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulNonceLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceFixedBits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulNonceFixedBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonceGenerator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(nonceGenerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMAC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(pMAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMACLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CCM_MESSAGE_PARAMS),
            "::",
            stringify!(ulMACLen)
        )
    );
}
impl Default for CK_CCM_MESSAGE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_CCM_MESSAGE_PARAMS_PTR = *mut CK_CCM_MESSAGE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_AES_GCM_PARAMS {
    pub pIv: CK_BYTE_PTR,
    pub ulIvLen: CK_ULONG,
    pub ulIvBits: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulTagBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_AES_GCM_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_AES_GCM_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_AES_GCM_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_AES_GCM_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_AES_GCM_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_AES_GCM_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(pIv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(ulIvLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIvBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(ulIvBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAAD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(pAAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAADLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(ulAADLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulTagBits) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_GCM_PARAMS),
            "::",
            stringify!(ulTagBits)
        )
    );
}
impl Default for CK_AES_GCM_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_AES_GCM_PARAMS_PTR = *mut CK_AES_GCM_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_AES_CCM_PARAMS {
    pub ulDataLen: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
    pub ulMACLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_AES_CCM_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_AES_CCM_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_AES_CCM_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_AES_CCM_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_AES_CCM_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_AES_CCM_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulDataLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(ulDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(ulNonceLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAAD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(pAAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAADLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(ulAADLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMACLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_AES_CCM_PARAMS),
            "::",
            stringify!(ulMACLen)
        )
    );
}
impl Default for CK_AES_CCM_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_AES_CCM_PARAMS_PTR = *mut CK_AES_CCM_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_CAMELLIA_CTR_PARAMS {
    pub ulCounterBits: CK_ULONG,
    pub cb: [CK_BYTE; 16usize],
}
#[test]
fn bindgen_test_layout_CK_CAMELLIA_CTR_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CAMELLIA_CTR_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CAMELLIA_CTR_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_CAMELLIA_CTR_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CAMELLIA_CTR_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_CAMELLIA_CTR_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCounterBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CAMELLIA_CTR_PARAMS),
            "::",
            stringify!(ulCounterBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CAMELLIA_CTR_PARAMS),
            "::",
            stringify!(cb)
        )
    );
}
pub type CK_CAMELLIA_CTR_PARAMS_PTR = *mut CK_CAMELLIA_CTR_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(length)
        )
    );
}
impl Default for CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS_PTR = *mut CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ARIA_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_ARIA_CBC_ENCRYPT_DATA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ARIA_CBC_ENCRYPT_DATA_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ARIA_CBC_ENCRYPT_DATA_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_ARIA_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ARIA_CBC_ENCRYPT_DATA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ARIA_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ARIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ARIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ARIA_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(length)
        )
    );
}
impl Default for CK_ARIA_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ARIA_CBC_ENCRYPT_DATA_PARAMS_PTR = *mut CK_ARIA_CBC_ENCRYPT_DATA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_DSA_PARAMETER_GEN_PARAM {
    pub hash: CK_MECHANISM_TYPE,
    pub pSeed: CK_BYTE_PTR,
    pub ulSeedLen: CK_ULONG,
    pub ulIndex: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_DSA_PARAMETER_GEN_PARAM() {
    const UNINIT: ::std::mem::MaybeUninit<CK_DSA_PARAMETER_GEN_PARAM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_DSA_PARAMETER_GEN_PARAM>(),
        32usize,
        concat!("Size of: ", stringify!(CK_DSA_PARAMETER_GEN_PARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_DSA_PARAMETER_GEN_PARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_DSA_PARAMETER_GEN_PARAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DSA_PARAMETER_GEN_PARAM),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSeed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DSA_PARAMETER_GEN_PARAM),
            "::",
            stringify!(pSeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSeedLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DSA_PARAMETER_GEN_PARAM),
            "::",
            stringify!(ulSeedLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DSA_PARAMETER_GEN_PARAM),
            "::",
            stringify!(ulIndex)
        )
    );
}
impl Default for CK_DSA_PARAMETER_GEN_PARAM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_DSA_PARAMETER_GEN_PARAM_PTR = *mut CK_DSA_PARAMETER_GEN_PARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_ECDH_AES_KEY_WRAP_PARAMS {
    pub ulAESKeyBits: CK_ULONG,
    pub kdf: CK_EC_KDF_TYPE,
    pub ulSharedDataLen: CK_ULONG,
    pub pSharedData: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_ECDH_AES_KEY_WRAP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_ECDH_AES_KEY_WRAP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_ECDH_AES_KEY_WRAP_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_ECDH_AES_KEY_WRAP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAESKeyBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(ulAESKeyBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSharedDataLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(ulSharedDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSharedData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_ECDH_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(pSharedData)
        )
    );
}
impl Default for CK_ECDH_AES_KEY_WRAP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_ECDH_AES_KEY_WRAP_PARAMS_PTR = *mut CK_ECDH_AES_KEY_WRAP_PARAMS;
pub type CK_JAVA_MIDP_SECURITY_DOMAIN = CK_ULONG;
pub type CK_CERTIFICATE_CATEGORY = CK_ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_RSA_AES_KEY_WRAP_PARAMS {
    pub ulAESKeyBits: CK_ULONG,
    pub pOAEPParams: CK_RSA_PKCS_OAEP_PARAMS_PTR,
}
#[test]
fn bindgen_test_layout_CK_RSA_AES_KEY_WRAP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_RSA_AES_KEY_WRAP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_RSA_AES_KEY_WRAP_PARAMS>(),
        16usize,
        concat!("Size of: ", stringify!(CK_RSA_AES_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_RSA_AES_KEY_WRAP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_RSA_AES_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAESKeyBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(ulAESKeyBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOAEPParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_RSA_AES_KEY_WRAP_PARAMS),
            "::",
            stringify!(pOAEPParams)
        )
    );
}
impl Default for CK_RSA_AES_KEY_WRAP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_RSA_AES_KEY_WRAP_PARAMS_PTR = *mut CK_RSA_AES_KEY_WRAP_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pVersion: CK_VERSION_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
#[test]
fn bindgen_test_layout_CK_TLS12_MASTER_KEY_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TLS12_MASTER_KEY_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TLS12_MASTER_KEY_DERIVE_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_TLS12_MASTER_KEY_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TLS12_MASTER_KEY_DERIVE_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_TLS12_MASTER_KEY_DERIVE_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(pVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfHashMechanism) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_MASTER_KEY_DERIVE_PARAMS),
            "::",
            stringify!(prfHashMechanism)
        )
    );
}
impl Default for CK_TLS12_MASTER_KEY_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_TLS12_MASTER_KEY_DERIVE_PARAMS_PTR = *mut CK_TLS12_MASTER_KEY_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_TLS12_KEY_MAT_PARAMS {
    pub ulMacSizeInBits: CK_ULONG,
    pub ulKeySizeInBits: CK_ULONG,
    pub ulIVSizeInBits: CK_ULONG,
    pub bIsExport: CK_BBOOL,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pReturnedKeyMaterial: CK_SSL3_KEY_MAT_OUT_PTR,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
}
#[test]
fn bindgen_test_layout_CK_TLS12_KEY_MAT_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TLS12_KEY_MAT_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TLS12_KEY_MAT_PARAMS>(),
        80usize,
        concat!("Size of: ", stringify!(CK_TLS12_KEY_MAT_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TLS12_KEY_MAT_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_TLS12_KEY_MAT_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacSizeInBits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(ulMacSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulKeySizeInBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(ulKeySizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIVSizeInBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(ulIVSizeInBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIsExport) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(bIsExport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReturnedKeyMaterial) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(pReturnedKeyMaterial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfHashMechanism) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS12_KEY_MAT_PARAMS),
            "::",
            stringify!(prfHashMechanism)
        )
    );
}
impl Default for CK_TLS12_KEY_MAT_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_TLS12_KEY_MAT_PARAMS_PTR = *mut CK_TLS12_KEY_MAT_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_TLS_KDF_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub pLabel: CK_BYTE_PTR,
    pub ulLabelLength: CK_ULONG,
    pub RandomInfo: CK_SSL3_RANDOM_DATA,
    pub pContextData: CK_BYTE_PTR,
    pub ulContextDataLength: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_TLS_KDF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TLS_KDF_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TLS_KDF_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_TLS_KDF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TLS_KDF_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_TLS_KDF_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(prfMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLabel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(pLabel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulLabelLength) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(ulLabelLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RandomInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(RandomInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pContextData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(pContextData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulContextDataLength) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_KDF_PARAMS),
            "::",
            stringify!(ulContextDataLength)
        )
    );
}
impl Default for CK_TLS_KDF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_TLS_KDF_PARAMS_PTR = *mut CK_TLS_KDF_PARAMS;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_TLS_MAC_PARAMS {
    pub prfHashMechanism: CK_MECHANISM_TYPE,
    pub ulMacLength: CK_ULONG,
    pub ulServerOrClient: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_TLS_MAC_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_TLS_MAC_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_TLS_MAC_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_TLS_MAC_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_TLS_MAC_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_TLS_MAC_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfHashMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_MAC_PARAMS),
            "::",
            stringify!(prfHashMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulMacLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_MAC_PARAMS),
            "::",
            stringify!(ulMacLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulServerOrClient) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_TLS_MAC_PARAMS),
            "::",
            stringify!(ulServerOrClient)
        )
    );
}
pub type CK_TLS_MAC_PARAMS_PTR = *mut CK_TLS_MAC_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_GOSTR3410_DERIVE_PARAMS {
    pub kdf: CK_EC_KDF_TYPE,
    pub pPublicData: CK_BYTE_PTR,
    pub ulPublicDataLen: CK_ULONG,
    pub pUKM: CK_BYTE_PTR,
    pub ulUKMLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_GOSTR3410_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_GOSTR3410_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_GOSTR3410_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_GOSTR3410_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_GOSTR3410_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_GOSTR3410_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_DERIVE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPublicData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_DERIVE_PARAMS),
            "::",
            stringify!(pPublicData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulPublicDataLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_DERIVE_PARAMS),
            "::",
            stringify!(ulPublicDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUKM) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_DERIVE_PARAMS),
            "::",
            stringify!(pUKM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulUKMLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_DERIVE_PARAMS),
            "::",
            stringify!(ulUKMLen)
        )
    );
}
impl Default for CK_GOSTR3410_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_GOSTR3410_DERIVE_PARAMS_PTR = *mut CK_GOSTR3410_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_GOSTR3410_KEY_WRAP_PARAMS {
    pub pWrapOID: CK_BYTE_PTR,
    pub ulWrapOIDLen: CK_ULONG,
    pub pUKM: CK_BYTE_PTR,
    pub ulUKMLen: CK_ULONG,
    pub hKey: CK_OBJECT_HANDLE,
}
#[test]
fn bindgen_test_layout_CK_GOSTR3410_KEY_WRAP_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_GOSTR3410_KEY_WRAP_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_GOSTR3410_KEY_WRAP_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_GOSTR3410_KEY_WRAP_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWrapOID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS),
            "::",
            stringify!(pWrapOID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWrapOIDLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS),
            "::",
            stringify!(ulWrapOIDLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUKM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS),
            "::",
            stringify!(pUKM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulUKMLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS),
            "::",
            stringify!(ulUKMLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hKey) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_GOSTR3410_KEY_WRAP_PARAMS),
            "::",
            stringify!(hKey)
        )
    );
}
impl Default for CK_GOSTR3410_KEY_WRAP_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_GOSTR3410_KEY_WRAP_PARAMS_PTR = *mut CK_GOSTR3410_KEY_WRAP_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SEED_CBC_ENCRYPT_DATA_PARAMS {
    pub iv: [CK_BYTE; 16usize],
    pub pData: CK_BYTE_PTR,
    pub length: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SEED_CBC_ENCRYPT_DATA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SEED_CBC_ENCRYPT_DATA_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SEED_CBC_ENCRYPT_DATA_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_SEED_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SEED_CBC_ENCRYPT_DATA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SEED_CBC_ENCRYPT_DATA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SEED_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SEED_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SEED_CBC_ENCRYPT_DATA_PARAMS),
            "::",
            stringify!(length)
        )
    );
}
impl Default for CK_SEED_CBC_ENCRYPT_DATA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SEED_CBC_ENCRYPT_DATA_PARAMS_PTR = *mut CK_SEED_CBC_ENCRYPT_DATA_PARAMS;
pub type CK_PROFILE_ID = CK_ULONG;
pub type CK_PROFILE_ID_PTR = *mut CK_PROFILE_ID;
pub type CK_PRF_DATA_TYPE = CK_ULONG;
pub type CK_SP800_108_PRF_TYPE = CK_MECHANISM_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_PRF_DATA_PARAM {
    pub type_: CK_PRF_DATA_TYPE,
    pub pValue: CK_VOID_PTR,
    pub ulValueLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_PRF_DATA_PARAM() {
    const UNINIT: ::std::mem::MaybeUninit<CK_PRF_DATA_PARAM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_PRF_DATA_PARAM>(),
        24usize,
        concat!("Size of: ", stringify!(CK_PRF_DATA_PARAM))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_PRF_DATA_PARAM>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_PRF_DATA_PARAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PRF_DATA_PARAM),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PRF_DATA_PARAM),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulValueLen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_PRF_DATA_PARAM),
            "::",
            stringify!(ulValueLen)
        )
    );
}
impl Default for CK_PRF_DATA_PARAM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_PRF_DATA_PARAM_PTR = *mut CK_PRF_DATA_PARAM;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_SP800_108_COUNTER_FORMAT {
    pub bLittleEndian: CK_BBOOL,
    pub ulWidthInBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SP800_108_COUNTER_FORMAT() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SP800_108_COUNTER_FORMAT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SP800_108_COUNTER_FORMAT>(),
        16usize,
        concat!("Size of: ", stringify!(CK_SP800_108_COUNTER_FORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SP800_108_COUNTER_FORMAT>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SP800_108_COUNTER_FORMAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLittleEndian) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_COUNTER_FORMAT),
            "::",
            stringify!(bLittleEndian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWidthInBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_COUNTER_FORMAT),
            "::",
            stringify!(ulWidthInBits)
        )
    );
}
pub type CK_SP800_108_COUNTER_FORMAT_PTR = *mut CK_SP800_108_COUNTER_FORMAT;
pub type CK_SP800_108_DKM_LENGTH_METHOD = CK_ULONG;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_SP800_108_DKM_LENGTH_FORMAT {
    pub dkmLengthMethod: CK_SP800_108_DKM_LENGTH_METHOD,
    pub bLittleEndian: CK_BBOOL,
    pub ulWidthInBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SP800_108_DKM_LENGTH_FORMAT() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SP800_108_DKM_LENGTH_FORMAT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SP800_108_DKM_LENGTH_FORMAT>(),
        24usize,
        concat!("Size of: ", stringify!(CK_SP800_108_DKM_LENGTH_FORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SP800_108_DKM_LENGTH_FORMAT>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SP800_108_DKM_LENGTH_FORMAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dkmLengthMethod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_DKM_LENGTH_FORMAT),
            "::",
            stringify!(dkmLengthMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLittleEndian) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_DKM_LENGTH_FORMAT),
            "::",
            stringify!(bLittleEndian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulWidthInBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_DKM_LENGTH_FORMAT),
            "::",
            stringify!(ulWidthInBits)
        )
    );
}
pub type CK_SP800_108_DKM_LENGTH_FORMAT_PTR = *mut CK_SP800_108_DKM_LENGTH_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_DERIVED_KEY {
    pub pTemplate: CK_ATTRIBUTE_PTR,
    pub ulAttributeCount: CK_ULONG,
    pub phKey: CK_OBJECT_HANDLE_PTR,
}
#[test]
fn bindgen_test_layout_CK_DERIVED_KEY() {
    const UNINIT: ::std::mem::MaybeUninit<CK_DERIVED_KEY> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_DERIVED_KEY>(),
        24usize,
        concat!("Size of: ", stringify!(CK_DERIVED_KEY))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_DERIVED_KEY>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_DERIVED_KEY))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTemplate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DERIVED_KEY),
            "::",
            stringify!(pTemplate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAttributeCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DERIVED_KEY),
            "::",
            stringify!(ulAttributeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_DERIVED_KEY),
            "::",
            stringify!(phKey)
        )
    );
}
impl Default for CK_DERIVED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_DERIVED_KEY_PTR = *mut CK_DERIVED_KEY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SP800_108_KDF_PARAMS {
    pub prfType: CK_SP800_108_PRF_TYPE,
    pub ulNumberOfDataParams: CK_ULONG,
    pub pDataParams: CK_PRF_DATA_PARAM_PTR,
    pub ulAdditionalDerivedKeys: CK_ULONG,
    pub pAdditionalDerivedKeys: CK_DERIVED_KEY_PTR,
}
#[test]
fn bindgen_test_layout_CK_SP800_108_KDF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SP800_108_KDF_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SP800_108_KDF_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_SP800_108_KDF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SP800_108_KDF_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SP800_108_KDF_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_KDF_PARAMS),
            "::",
            stringify!(prfType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNumberOfDataParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_KDF_PARAMS),
            "::",
            stringify!(ulNumberOfDataParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_KDF_PARAMS),
            "::",
            stringify!(pDataParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAdditionalDerivedKeys) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_KDF_PARAMS),
            "::",
            stringify!(ulAdditionalDerivedKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAdditionalDerivedKeys) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_KDF_PARAMS),
            "::",
            stringify!(pAdditionalDerivedKeys)
        )
    );
}
impl Default for CK_SP800_108_KDF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SP800_108_KDF_PARAMS_PTR = *mut CK_SP800_108_KDF_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SP800_108_FEEDBACK_KDF_PARAMS {
    pub prfType: CK_SP800_108_PRF_TYPE,
    pub ulNumberOfDataParams: CK_ULONG,
    pub pDataParams: CK_PRF_DATA_PARAM_PTR,
    pub ulIVLen: CK_ULONG,
    pub pIV: CK_BYTE_PTR,
    pub ulAdditionalDerivedKeys: CK_ULONG,
    pub pAdditionalDerivedKeys: CK_DERIVED_KEY_PTR,
}
#[test]
fn bindgen_test_layout_CK_SP800_108_FEEDBACK_KDF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SP800_108_FEEDBACK_KDF_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SP800_108_FEEDBACK_KDF_PARAMS>(),
        56usize,
        concat!("Size of: ", stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SP800_108_FEEDBACK_KDF_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(prfType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNumberOfDataParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(ulNumberOfDataParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDataParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(pDataParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulIVLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(ulIVLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIV) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(pIV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAdditionalDerivedKeys) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(ulAdditionalDerivedKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAdditionalDerivedKeys) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SP800_108_FEEDBACK_KDF_PARAMS),
            "::",
            stringify!(pAdditionalDerivedKeys)
        )
    );
}
impl Default for CK_SP800_108_FEEDBACK_KDF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SP800_108_FEEDBACK_KDF_PARAMS_PTR = *mut CK_SP800_108_FEEDBACK_KDF_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_EDDSA_PARAMS {
    pub phFlag: CK_BBOOL,
    pub ulContextDataLen: CK_ULONG,
    pub pContextData: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_EDDSA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_EDDSA_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_EDDSA_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_EDDSA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_EDDSA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_EDDSA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phFlag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_EDDSA_PARAMS),
            "::",
            stringify!(phFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulContextDataLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_EDDSA_PARAMS),
            "::",
            stringify!(ulContextDataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pContextData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_EDDSA_PARAMS),
            "::",
            stringify!(pContextData)
        )
    );
}
impl Default for CK_EDDSA_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_EDDSA_PARAMS_PTR = *mut CK_EDDSA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_CHACHA20_PARAMS {
    pub pBlockCounter: CK_BYTE_PTR,
    pub blockCounterBits: CK_ULONG,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_CHACHA20_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_CHACHA20_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_CHACHA20_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_CHACHA20_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_CHACHA20_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_CHACHA20_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBlockCounter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CHACHA20_PARAMS),
            "::",
            stringify!(pBlockCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockCounterBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CHACHA20_PARAMS),
            "::",
            stringify!(blockCounterBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CHACHA20_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceBits) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_CHACHA20_PARAMS),
            "::",
            stringify!(ulNonceBits)
        )
    );
}
impl Default for CK_CHACHA20_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_CHACHA20_PARAMS_PTR = *mut CK_CHACHA20_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SALSA20_PARAMS {
    pub pBlockCounter: CK_BYTE_PTR,
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceBits: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SALSA20_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SALSA20_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SALSA20_PARAMS>(),
        24usize,
        concat!("Size of: ", stringify!(CK_SALSA20_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SALSA20_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_SALSA20_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBlockCounter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_PARAMS),
            "::",
            stringify!(pBlockCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_PARAMS),
            "::",
            stringify!(ulNonceBits)
        )
    );
}
impl Default for CK_SALSA20_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SALSA20_PARAMS_PTR = *mut CK_SALSA20_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SALSA20_CHACHA20_POLY1305_PARAMS {
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pAAD: CK_BYTE_PTR,
    pub ulAADLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_SALSA20_CHACHA20_POLY1305_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SALSA20_CHACHA20_POLY1305_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SALSA20_CHACHA20_POLY1305_PARAMS>(),
        32usize,
        concat!("Size of: ", stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SALSA20_CHACHA20_POLY1305_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS),
            "::",
            stringify!(ulNonceLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAAD) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS),
            "::",
            stringify!(pAAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulAADLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_PARAMS),
            "::",
            stringify!(ulAADLen)
        )
    );
}
impl Default for CK_SALSA20_CHACHA20_POLY1305_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SALSA20_CHACHA20_POLY1305_PARAMS_PTR = *mut CK_SALSA20_CHACHA20_POLY1305_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS {
    pub pNonce: CK_BYTE_PTR,
    pub ulNonceLen: CK_ULONG,
    pub pTag: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNonce) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS),
            "::",
            stringify!(pNonce)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNonceLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS),
            "::",
            stringify!(ulNonceLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS),
            "::",
            stringify!(pTag)
        )
    );
}
impl Default for CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS_PTR = *mut CK_SALSA20_CHACHA20_POLY1305_MSG_PARAMS;
pub type CK_X3DH_KDF_TYPE = CK_ULONG;
pub type CK_X3DH_KDF_TYPE_PTR = *mut CK_X3DH_KDF_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X3DH_INITIATE_PARAMS {
    pub kdf: CK_X3DH_KDF_TYPE,
    pub pPeer_identity: CK_OBJECT_HANDLE,
    pub pPeer_prekey: CK_OBJECT_HANDLE,
    pub pPrekey_signature: CK_BYTE_PTR,
    pub pOnetime_key: CK_BYTE_PTR,
    pub pOwn_identity: CK_OBJECT_HANDLE,
    pub pOwn_ephemeral: CK_OBJECT_HANDLE,
}
#[test]
fn bindgen_test_layout_CK_X3DH_INITIATE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X3DH_INITIATE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X3DH_INITIATE_PARAMS>(),
        56usize,
        concat!("Size of: ", stringify!(CK_X3DH_INITIATE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X3DH_INITIATE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X3DH_INITIATE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPeer_identity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pPeer_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPeer_prekey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pPeer_prekey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrekey_signature) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pPrekey_signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOnetime_key) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pOnetime_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOwn_identity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pOwn_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOwn_ephemeral) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_INITIATE_PARAMS),
            "::",
            stringify!(pOwn_ephemeral)
        )
    );
}
impl Default for CK_X3DH_INITIATE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X3DH_RESPOND_PARAMS {
    pub kdf: CK_X3DH_KDF_TYPE,
    pub pIdentity_id: CK_BYTE_PTR,
    pub pPrekey_id: CK_BYTE_PTR,
    pub pOnetime_id: CK_BYTE_PTR,
    pub pInitiator_identity: CK_OBJECT_HANDLE,
    pub pInitiator_ephemeral: CK_BYTE_PTR,
}
#[test]
fn bindgen_test_layout_CK_X3DH_RESPOND_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X3DH_RESPOND_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X3DH_RESPOND_PARAMS>(),
        48usize,
        concat!("Size of: ", stringify!(CK_X3DH_RESPOND_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X3DH_RESPOND_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X3DH_RESPOND_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(kdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIdentity_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(pIdentity_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrekey_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(pPrekey_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOnetime_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(pOnetime_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitiator_identity) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(pInitiator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitiator_ephemeral) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X3DH_RESPOND_PARAMS),
            "::",
            stringify!(pInitiator_ephemeral)
        )
    );
}
impl Default for CK_X3DH_RESPOND_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X2RATCHET_KDF_TYPE = CK_ULONG;
pub type CK_X2RATCHET_KDF_TYPE_PTR = *mut CK_X2RATCHET_KDF_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X2RATCHET_INITIALIZE_PARAMS {
    pub sk: CK_BYTE_PTR,
    pub peer_public_prekey: CK_OBJECT_HANDLE,
    pub peer_public_identity: CK_OBJECT_HANDLE,
    pub own_public_identity: CK_OBJECT_HANDLE,
    pub bEncryptedHeader: CK_BBOOL,
    pub eCurve: CK_ULONG,
    pub aeadMechanism: CK_MECHANISM_TYPE,
    pub kdfMechanism: CK_X2RATCHET_KDF_TYPE,
}
#[test]
fn bindgen_test_layout_CK_X2RATCHET_INITIALIZE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X2RATCHET_INITIALIZE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X2RATCHET_INITIALIZE_PARAMS>(),
        64usize,
        concat!("Size of: ", stringify!(CK_X2RATCHET_INITIALIZE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X2RATCHET_INITIALIZE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X2RATCHET_INITIALIZE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(sk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer_public_prekey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(peer_public_prekey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peer_public_identity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(peer_public_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own_public_identity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(own_public_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEncryptedHeader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(bEncryptedHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eCurve) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(eCurve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aeadMechanism) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(aeadMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdfMechanism) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_INITIALIZE_PARAMS),
            "::",
            stringify!(kdfMechanism)
        )
    );
}
impl Default for CK_X2RATCHET_INITIALIZE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X2RATCHET_INITIALIZE_PARAMS_PTR = *mut CK_X2RATCHET_INITIALIZE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_X2RATCHET_RESPOND_PARAMS {
    pub sk: CK_BYTE_PTR,
    pub own_prekey: CK_OBJECT_HANDLE,
    pub initiator_identity: CK_OBJECT_HANDLE,
    pub own_public_identity: CK_OBJECT_HANDLE,
    pub bEncryptedHeader: CK_BBOOL,
    pub eCurve: CK_ULONG,
    pub aeadMechanism: CK_MECHANISM_TYPE,
    pub kdfMechanism: CK_X2RATCHET_KDF_TYPE,
}
#[test]
fn bindgen_test_layout_CK_X2RATCHET_RESPOND_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_X2RATCHET_RESPOND_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_X2RATCHET_RESPOND_PARAMS>(),
        64usize,
        concat!("Size of: ", stringify!(CK_X2RATCHET_RESPOND_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_X2RATCHET_RESPOND_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_X2RATCHET_RESPOND_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(sk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own_prekey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(own_prekey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initiator_identity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(initiator_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).own_public_identity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(own_public_identity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEncryptedHeader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(bEncryptedHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eCurve) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(eCurve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aeadMechanism) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(aeadMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kdfMechanism) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_X2RATCHET_RESPOND_PARAMS),
            "::",
            stringify!(kdfMechanism)
        )
    );
}
impl Default for CK_X2RATCHET_RESPOND_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_X2RATCHET_RESPOND_PARAMS_PTR = *mut CK_X2RATCHET_RESPOND_PARAMS;
pub type CK_XEDDSA_HASH_TYPE = CK_ULONG;
pub type CK_XEDDSA_HASH_TYPE_PTR = *mut CK_XEDDSA_HASH_TYPE;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_XEDDSA_PARAMS {
    pub hash: CK_XEDDSA_HASH_TYPE,
}
#[test]
fn bindgen_test_layout_CK_XEDDSA_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_XEDDSA_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_XEDDSA_PARAMS>(),
        8usize,
        concat!("Size of: ", stringify!(CK_XEDDSA_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_XEDDSA_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_XEDDSA_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_XEDDSA_PARAMS),
            "::",
            stringify!(hash)
        )
    );
}
pub type CK_XEDDSA_PARAMS_PTR = *mut CK_XEDDSA_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_HKDF_PARAMS {
    pub bExtract: CK_BBOOL,
    pub bExpand: CK_BBOOL,
    pub prfHashMechanism: CK_MECHANISM_TYPE,
    pub ulSaltType: CK_ULONG,
    pub pSalt: CK_BYTE_PTR,
    pub ulSaltLen: CK_ULONG,
    pub hSaltKey: CK_OBJECT_HANDLE,
    pub pInfo: CK_BYTE_PTR,
    pub ulInfoLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_HKDF_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_HKDF_PARAMS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_HKDF_PARAMS>(),
        64usize,
        concat!("Size of: ", stringify!(CK_HKDF_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_HKDF_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_HKDF_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bExtract) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(bExtract)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bExpand) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(bExpand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfHashMechanism) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(prfHashMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSaltType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(ulSaltType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSalt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(pSalt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSaltLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(ulSaltLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSaltKey) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(hSaltKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(pInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulInfoLen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_HKDF_PARAMS),
            "::",
            stringify!(ulInfoLen)
        )
    );
}
impl Default for CK_HKDF_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_HKDF_PARAMS_PTR = *mut CK_HKDF_PARAMS;
pub type CK_HSS_LEVELS = CK_ULONG;
pub type CK_LMS_TYPE = CK_ULONG;
pub type CK_LMOTS_TYPE = CK_ULONG;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct specifiedParams {
    pub levels: CK_HSS_LEVELS,
    pub lm_type: [CK_LMS_TYPE; 8usize],
    pub lm_ots_type: [CK_LMOTS_TYPE; 8usize],
}
#[test]
fn bindgen_test_layout_specifiedParams() {
    const UNINIT: ::std::mem::MaybeUninit<specifiedParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<specifiedParams>(),
        136usize,
        concat!("Size of: ", stringify!(specifiedParams))
    );
    assert_eq!(
        ::std::mem::align_of::<specifiedParams>(),
        8usize,
        concat!("Alignment of ", stringify!(specifiedParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).levels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(specifiedParams),
            "::",
            stringify!(levels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(specifiedParams),
            "::",
            stringify!(lm_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_ots_type) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(specifiedParams),
            "::",
            stringify!(lm_ots_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_IKE2_PRF_PLUS_DERIVE_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub bHasSeedKey: CK_BBOOL,
    pub hSeedKey: CK_OBJECT_HANDLE,
    pub pSeedData: CK_BYTE_PTR,
    pub ulSeedDataLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_IKE2_PRF_PLUS_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_IKE2_PRF_PLUS_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_IKE2_PRF_PLUS_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_IKE2_PRF_PLUS_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS),
            "::",
            stringify!(prfMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHasSeedKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS),
            "::",
            stringify!(bHasSeedKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSeedKey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS),
            "::",
            stringify!(hSeedKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSeedData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS),
            "::",
            stringify!(pSeedData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulSeedDataLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE2_PRF_PLUS_DERIVE_PARAMS),
            "::",
            stringify!(ulSeedDataLen)
        )
    );
}
impl Default for CK_IKE2_PRF_PLUS_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_IKE2_PRF_PLUS_DERIVE_PARAMS_PTR = *mut CK_IKE2_PRF_PLUS_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_IKE_PRF_DERIVE_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub bDataAsKey: CK_BBOOL,
    pub bRekey: CK_BBOOL,
    pub pNi: CK_BYTE_PTR,
    pub ulNiLen: CK_ULONG,
    pub pNr: CK_BYTE_PTR,
    pub ulNrLen: CK_ULONG,
    pub hNewKey: CK_OBJECT_HANDLE,
}
#[test]
fn bindgen_test_layout_CK_IKE_PRF_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_IKE_PRF_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_IKE_PRF_DERIVE_PARAMS>(),
        56usize,
        concat!("Size of: ", stringify!(CK_IKE_PRF_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_IKE_PRF_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_IKE_PRF_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(prfMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDataAsKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(bDataAsKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRekey) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(bRekey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(pNi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNiLen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(ulNiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(pNr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulNrLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(ulNrLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNewKey) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE_PRF_DERIVE_PARAMS),
            "::",
            stringify!(hNewKey)
        )
    );
}
impl Default for CK_IKE_PRF_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_IKE_PRF_DERIVE_PARAMS_PTR = *mut CK_IKE_PRF_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_IKE1_PRF_DERIVE_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub bHasPrevKey: CK_BBOOL,
    pub hKeygxy: CK_OBJECT_HANDLE,
    pub hPrevKey: CK_OBJECT_HANDLE,
    pub pCKYi: CK_BYTE_PTR,
    pub ulCKYiLen: CK_ULONG,
    pub pCKYr: CK_BYTE_PTR,
    pub ulCKYrLen: CK_ULONG,
    pub keyNumber: CK_BYTE,
}
#[test]
fn bindgen_test_layout_CK_IKE1_PRF_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_IKE1_PRF_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_IKE1_PRF_DERIVE_PARAMS>(),
        72usize,
        concat!("Size of: ", stringify!(CK_IKE1_PRF_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_IKE1_PRF_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_IKE1_PRF_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(prfMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHasPrevKey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(bHasPrevKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hKeygxy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(hKeygxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hPrevKey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(hPrevKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCKYi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(pCKYi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCKYiLen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(ulCKYiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCKYr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(pCKYr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulCKYrLen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(ulCKYrLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyNumber) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_PRF_DERIVE_PARAMS),
            "::",
            stringify!(keyNumber)
        )
    );
}
impl Default for CK_IKE1_PRF_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_IKE1_PRF_DERIVE_PARAMS_PTR = *mut CK_IKE1_PRF_DERIVE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CK_IKE1_EXTENDED_DERIVE_PARAMS {
    pub prfMechanism: CK_MECHANISM_TYPE,
    pub bHasKeygxy: CK_BBOOL,
    pub hKeygxy: CK_OBJECT_HANDLE,
    pub pExtraData: CK_BYTE_PTR,
    pub ulExtraDataLen: CK_ULONG,
}
#[test]
fn bindgen_test_layout_CK_IKE1_EXTENDED_DERIVE_PARAMS() {
    const UNINIT: ::std::mem::MaybeUninit<CK_IKE1_EXTENDED_DERIVE_PARAMS> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_IKE1_EXTENDED_DERIVE_PARAMS>(),
        40usize,
        concat!("Size of: ", stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_IKE1_EXTENDED_DERIVE_PARAMS>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prfMechanism) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS),
            "::",
            stringify!(prfMechanism)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHasKeygxy) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS),
            "::",
            stringify!(bHasKeygxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hKeygxy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS),
            "::",
            stringify!(hKeygxy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExtraData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS),
            "::",
            stringify!(pExtraData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ulExtraDataLen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_IKE1_EXTENDED_DERIVE_PARAMS),
            "::",
            stringify!(ulExtraDataLen)
        )
    );
}
impl Default for CK_IKE1_EXTENDED_DERIVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CK_IKE1_EXTENDED_DERIVE_PARAMS_PTR = *mut CK_IKE1_EXTENDED_DERIVE_PARAMS;
extern "C" {
    pub fn C_Initialize(pInitArgs: CK_VOID_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_Finalize(pReserved: CK_VOID_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetInfo(pInfo: CK_INFO_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetFunctionList(ppFunctionList: CK_FUNCTION_LIST_PTR_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetSlotList(
        tokenPresent: CK_BBOOL,
        pSlotList: CK_SLOT_ID_PTR,
        pulCount: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GetSlotInfo(slotID: CK_SLOT_ID, pInfo: CK_SLOT_INFO_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetTokenInfo(slotID: CK_SLOT_ID, pInfo: CK_TOKEN_INFO_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetMechanismList(
        slotID: CK_SLOT_ID,
        pMechanismList: CK_MECHANISM_TYPE_PTR,
        pulCount: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GetMechanismInfo(
        slotID: CK_SLOT_ID,
        type_: CK_MECHANISM_TYPE,
        pInfo: CK_MECHANISM_INFO_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_InitToken(
        slotID: CK_SLOT_ID,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
        pLabel: CK_UTF8CHAR_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_InitPIN(
        hSession: CK_SESSION_HANDLE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SetPIN(
        hSession: CK_SESSION_HANDLE,
        pOldPin: CK_UTF8CHAR_PTR,
        ulOldLen: CK_ULONG,
        pNewPin: CK_UTF8CHAR_PTR,
        ulNewLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_OpenSession(
        slotID: CK_SLOT_ID,
        flags: CK_FLAGS,
        pApplication: CK_VOID_PTR,
        Notify: CK_NOTIFY,
        phSession: CK_SESSION_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_CloseSession(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_CloseAllSessions(slotID: CK_SLOT_ID) -> CK_RV;
}
extern "C" {
    pub fn C_GetSessionInfo(hSession: CK_SESSION_HANDLE, pInfo: CK_SESSION_INFO_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetOperationState(
        hSession: CK_SESSION_HANDLE,
        pOperationState: CK_BYTE_PTR,
        pulOperationStateLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SetOperationState(
        hSession: CK_SESSION_HANDLE,
        pOperationState: CK_BYTE_PTR,
        ulOperationStateLen: CK_ULONG,
        hEncryptionKey: CK_OBJECT_HANDLE,
        hAuthenticationKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Login(
        hSession: CK_SESSION_HANDLE,
        userType: CK_USER_TYPE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Logout(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_CreateObject(
        hSession: CK_SESSION_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phObject: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_CopyObject(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phNewObject: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DestroyObject(hSession: CK_SESSION_HANDLE, hObject: CK_OBJECT_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_GetObjectSize(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pulSize: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GetAttributeValue(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SetAttributeValue(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_FindObjectsInit(
        hSession: CK_SESSION_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_FindObjects(
        hSession: CK_SESSION_HANDLE,
        phObject: CK_OBJECT_HANDLE_PTR,
        ulMaxObjectCount: CK_ULONG,
        pulObjectCount: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_FindObjectsFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Encrypt(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pEncryptedData: CK_BYTE_PTR,
        pulEncryptedDataLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptFinal(
        hSession: CK_SESSION_HANDLE,
        pLastEncryptedPart: CK_BYTE_PTR,
        pulLastEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Decrypt(
        hSession: CK_SESSION_HANDLE,
        pEncryptedData: CK_BYTE_PTR,
        ulEncryptedDataLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        pulDataLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptUpdate(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptFinal(
        hSession: CK_SESSION_HANDLE,
        pLastPart: CK_BYTE_PTR,
        pulLastPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DigestInit(hSession: CK_SESSION_HANDLE, pMechanism: CK_MECHANISM_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_Digest(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pDigest: CK_BYTE_PTR,
        pulDigestLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DigestUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DigestKey(hSession: CK_SESSION_HANDLE, hKey: CK_OBJECT_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_DigestFinal(
        hSession: CK_SESSION_HANDLE,
        pDigest: CK_BYTE_PTR,
        pulDigestLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Sign(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignFinal(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignRecoverInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignRecover(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_Verify(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyFinal(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyRecoverInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyRecover(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        pulDataLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DigestEncryptUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptDigestUpdate(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignEncryptUpdate(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptVerifyUpdate(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GenerateKey(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GenerateKeyPair(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        pPublicKeyTemplate: CK_ATTRIBUTE_PTR,
        ulPublicKeyAttributeCount: CK_ULONG,
        pPrivateKeyTemplate: CK_ATTRIBUTE_PTR,
        ulPrivateKeyAttributeCount: CK_ULONG,
        phPublicKey: CK_OBJECT_HANDLE_PTR,
        phPrivateKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_WrapKey(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hWrappingKey: CK_OBJECT_HANDLE,
        hKey: CK_OBJECT_HANDLE,
        pWrappedKey: CK_BYTE_PTR,
        pulWrappedKeyLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_UnwrapKey(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hUnwrappingKey: CK_OBJECT_HANDLE,
        pWrappedKey: CK_BYTE_PTR,
        ulWrappedKeyLen: CK_ULONG,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulAttributeCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DeriveKey(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hBaseKey: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulAttributeCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SeedRandom(
        hSession: CK_SESSION_HANDLE,
        pSeed: CK_BYTE_PTR,
        ulSeedLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GenerateRandom(
        hSession: CK_SESSION_HANDLE,
        RandomData: CK_BYTE_PTR,
        ulRandomLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GetFunctionStatus(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_CancelFunction(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_WaitForSlotEvent(
        flags: CK_FLAGS,
        pSlot: CK_SLOT_ID_PTR,
        pRserved: CK_VOID_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_GetInterfaceList(pInterfacesList: CK_INTERFACE_PTR, pulCount: CK_ULONG_PTR) -> CK_RV;
}
extern "C" {
    pub fn C_GetInterface(
        pInterfaceName: CK_UTF8CHAR_PTR,
        pVersion: CK_VERSION_PTR,
        ppInterface: CK_INTERFACE_PTR_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_LoginUser(
        hSession: CK_SESSION_HANDLE,
        userType: CK_USER_TYPE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
        pUsername: CK_UTF8CHAR_PTR,
        ulUsernameLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SessionCancel(hSession: CK_SESSION_HANDLE, flags: CK_FLAGS) -> CK_RV;
}
extern "C" {
    pub fn C_MessageEncryptInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptMessage(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
        pPlaintext: CK_BYTE_PTR,
        ulPlaintextLen: CK_ULONG,
        pCiphertext: CK_BYTE_PTR,
        pulCiphertextLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptMessageBegin(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_EncryptMessageNext(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pPlaintextPart: CK_BYTE_PTR,
        ulPlaintextPartLen: CK_ULONG,
        pCiphertextPart: CK_BYTE_PTR,
        pulCiphertextPartLen: CK_ULONG_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_MessageEncryptFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_MessageDecryptInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptMessage(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
        pCiphertext: CK_BYTE_PTR,
        ulCiphertextLen: CK_ULONG,
        pPlaintext: CK_BYTE_PTR,
        pulPlaintextLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptMessageBegin(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_DecryptMessageNext(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pCiphertextPart: CK_BYTE_PTR,
        ulCiphertextPartLen: CK_ULONG,
        pPlaintextPart: CK_BYTE_PTR,
        pulPlaintextPartLen: CK_ULONG_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_MessageDecryptFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_MessageSignInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignMessage(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignMessageBegin(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_SignMessageNext(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_MessageSignFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
extern "C" {
    pub fn C_MessageVerifyInit(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyMessage(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyMessageBegin(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_VerifyMessageNext(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV;
}
extern "C" {
    pub fn C_MessageVerifyFinal(hSession: CK_SESSION_HANDLE) -> CK_RV;
}
pub type CK_C_Initialize =
    ::std::option::Option<unsafe extern "C" fn(pInitArgs: CK_VOID_PTR) -> CK_RV>;
pub type CK_C_Finalize =
    ::std::option::Option<unsafe extern "C" fn(pReserved: CK_VOID_PTR) -> CK_RV>;
pub type CK_C_GetInfo = ::std::option::Option<unsafe extern "C" fn(pInfo: CK_INFO_PTR) -> CK_RV>;
pub type CK_C_GetFunctionList =
    ::std::option::Option<unsafe extern "C" fn(ppFunctionList: CK_FUNCTION_LIST_PTR_PTR) -> CK_RV>;
pub type CK_C_GetSlotList = ::std::option::Option<
    unsafe extern "C" fn(
        tokenPresent: CK_BBOOL,
        pSlotList: CK_SLOT_ID_PTR,
        pulCount: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_GetSlotInfo = ::std::option::Option<
    unsafe extern "C" fn(slotID: CK_SLOT_ID, pInfo: CK_SLOT_INFO_PTR) -> CK_RV,
>;
pub type CK_C_GetTokenInfo = ::std::option::Option<
    unsafe extern "C" fn(slotID: CK_SLOT_ID, pInfo: CK_TOKEN_INFO_PTR) -> CK_RV,
>;
pub type CK_C_GetMechanismList = ::std::option::Option<
    unsafe extern "C" fn(
        slotID: CK_SLOT_ID,
        pMechanismList: CK_MECHANISM_TYPE_PTR,
        pulCount: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_GetMechanismInfo = ::std::option::Option<
    unsafe extern "C" fn(
        slotID: CK_SLOT_ID,
        type_: CK_MECHANISM_TYPE,
        pInfo: CK_MECHANISM_INFO_PTR,
    ) -> CK_RV,
>;
pub type CK_C_InitToken = ::std::option::Option<
    unsafe extern "C" fn(
        slotID: CK_SLOT_ID,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
        pLabel: CK_UTF8CHAR_PTR,
    ) -> CK_RV,
>;
pub type CK_C_InitPIN = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_SetPIN = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pOldPin: CK_UTF8CHAR_PTR,
        ulOldLen: CK_ULONG,
        pNewPin: CK_UTF8CHAR_PTR,
        ulNewLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_OpenSession = ::std::option::Option<
    unsafe extern "C" fn(
        slotID: CK_SLOT_ID,
        flags: CK_FLAGS,
        pApplication: CK_VOID_PTR,
        Notify: CK_NOTIFY,
        phSession: CK_SESSION_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_CloseSession =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_CloseAllSessions =
    ::std::option::Option<unsafe extern "C" fn(slotID: CK_SLOT_ID) -> CK_RV>;
pub type CK_C_GetSessionInfo = ::std::option::Option<
    unsafe extern "C" fn(hSession: CK_SESSION_HANDLE, pInfo: CK_SESSION_INFO_PTR) -> CK_RV,
>;
pub type CK_C_GetOperationState = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pOperationState: CK_BYTE_PTR,
        pulOperationStateLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SetOperationState = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pOperationState: CK_BYTE_PTR,
        ulOperationStateLen: CK_ULONG,
        hEncryptionKey: CK_OBJECT_HANDLE,
        hAuthenticationKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_Login = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        userType: CK_USER_TYPE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_Logout =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_CreateObject = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phObject: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_CopyObject = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phNewObject: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DestroyObject = ::std::option::Option<
    unsafe extern "C" fn(hSession: CK_SESSION_HANDLE, hObject: CK_OBJECT_HANDLE) -> CK_RV,
>;
pub type CK_C_GetObjectSize = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pulSize: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_GetAttributeValue = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_SetAttributeValue = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        hObject: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_FindObjectsInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_FindObjects = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        phObject: CK_OBJECT_HANDLE_PTR,
        ulMaxObjectCount: CK_ULONG,
        pulObjectCount: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_FindObjectsFinal =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_EncryptInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_Encrypt = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pEncryptedData: CK_BYTE_PTR,
        pulEncryptedDataLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_EncryptUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_EncryptFinal = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pLastEncryptedPart: CK_BYTE_PTR,
        pulLastEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_Decrypt = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pEncryptedData: CK_BYTE_PTR,
        ulEncryptedDataLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        pulDataLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptFinal = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pLastPart: CK_BYTE_PTR,
        pulLastPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DigestInit = ::std::option::Option<
    unsafe extern "C" fn(hSession: CK_SESSION_HANDLE, pMechanism: CK_MECHANISM_PTR) -> CK_RV,
>;
pub type CK_C_Digest = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pDigest: CK_BYTE_PTR,
        pulDigestLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DigestUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_DigestKey = ::std::option::Option<
    unsafe extern "C" fn(hSession: CK_SESSION_HANDLE, hKey: CK_OBJECT_HANDLE) -> CK_RV,
>;
pub type CK_C_DigestFinal = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pDigest: CK_BYTE_PTR,
        pulDigestLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SignInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_Sign = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SignUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_SignFinal = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SignRecoverInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_SignRecover = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_VerifyInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_Verify = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_VerifyUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_VerifyFinal = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_VerifyRecoverInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_VerifyRecover = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        pulDataLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DigestEncryptUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptDigestUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SignEncryptUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pPart: CK_BYTE_PTR,
        ulPartLen: CK_ULONG,
        pEncryptedPart: CK_BYTE_PTR,
        pulEncryptedPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptVerifyUpdate = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pEncryptedPart: CK_BYTE_PTR,
        ulEncryptedPartLen: CK_ULONG,
        pPart: CK_BYTE_PTR,
        pulPartLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_GenerateKey = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_GenerateKeyPair = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        pPublicKeyTemplate: CK_ATTRIBUTE_PTR,
        ulPublicKeyAttributeCount: CK_ULONG,
        pPrivateKeyTemplate: CK_ATTRIBUTE_PTR,
        ulPrivateKeyAttributeCount: CK_ULONG,
        phPublicKey: CK_OBJECT_HANDLE_PTR,
        phPrivateKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_WrapKey = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hWrappingKey: CK_OBJECT_HANDLE,
        hKey: CK_OBJECT_HANDLE,
        pWrappedKey: CK_BYTE_PTR,
        pulWrappedKeyLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_UnwrapKey = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hUnwrappingKey: CK_OBJECT_HANDLE,
        pWrappedKey: CK_BYTE_PTR,
        ulWrappedKeyLen: CK_ULONG,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulAttributeCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DeriveKey = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hBaseKey: CK_OBJECT_HANDLE,
        pTemplate: CK_ATTRIBUTE_PTR,
        ulAttributeCount: CK_ULONG,
        phKey: CK_OBJECT_HANDLE_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SeedRandom = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pSeed: CK_BYTE_PTR,
        ulSeedLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_GenerateRandom = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        RandomData: CK_BYTE_PTR,
        ulRandomLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_GetFunctionStatus =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_CancelFunction =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_WaitForSlotEvent = ::std::option::Option<
    unsafe extern "C" fn(flags: CK_FLAGS, pSlot: CK_SLOT_ID_PTR, pRserved: CK_VOID_PTR) -> CK_RV,
>;
pub type CK_C_GetInterfaceList = ::std::option::Option<
    unsafe extern "C" fn(pInterfacesList: CK_INTERFACE_PTR, pulCount: CK_ULONG_PTR) -> CK_RV,
>;
pub type CK_C_GetInterface = ::std::option::Option<
    unsafe extern "C" fn(
        pInterfaceName: CK_UTF8CHAR_PTR,
        pVersion: CK_VERSION_PTR,
        ppInterface: CK_INTERFACE_PTR_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV,
>;
pub type CK_C_LoginUser = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        userType: CK_USER_TYPE,
        pPin: CK_UTF8CHAR_PTR,
        ulPinLen: CK_ULONG,
        pUsername: CK_UTF8CHAR_PTR,
        ulUsernameLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_SessionCancel = ::std::option::Option<
    unsafe extern "C" fn(hSession: CK_SESSION_HANDLE, flags: CK_FLAGS) -> CK_RV,
>;
pub type CK_C_MessageEncryptInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_EncryptMessage = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
        pPlaintext: CK_BYTE_PTR,
        ulPlaintextLen: CK_ULONG,
        pCiphertext: CK_BYTE_PTR,
        pulCiphertextLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_EncryptMessageBegin = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_EncryptMessageNext = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pPlaintextPart: CK_BYTE_PTR,
        ulPlaintextPartLen: CK_ULONG,
        pCiphertextPart: CK_BYTE_PTR,
        pulCiphertextPartLen: CK_ULONG_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV,
>;
pub type CK_C_MessageEncryptFinal =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_MessageDecryptInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_DecryptMessage = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
        pCiphertext: CK_BYTE_PTR,
        ulCiphertextLen: CK_ULONG,
        pPlaintext: CK_BYTE_PTR,
        pulPlaintextLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_DecryptMessageBegin = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pAssociatedData: CK_BYTE_PTR,
        ulAssociatedDataLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_DecryptMessageNext = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pCiphertextPart: CK_BYTE_PTR,
        ulCiphertextPartLen: CK_ULONG,
        pPlaintextPart: CK_BYTE_PTR,
        pulPlaintextPartLen: CK_ULONG_PTR,
        flags: CK_FLAGS,
    ) -> CK_RV,
>;
pub type CK_C_MessageDecryptFinal =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_MessageSignInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_SignMessage = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_SignMessageBegin = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_SignMessageNext = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        pulSignatureLen: CK_ULONG_PTR,
    ) -> CK_RV,
>;
pub type CK_C_MessageSignFinal =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
pub type CK_C_MessageVerifyInit = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pMechanism: CK_MECHANISM_PTR,
        hKey: CK_OBJECT_HANDLE,
    ) -> CK_RV,
>;
pub type CK_C_VerifyMessage = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_VerifyMessageBegin = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_VerifyMessageNext = ::std::option::Option<
    unsafe extern "C" fn(
        hSession: CK_SESSION_HANDLE,
        pParameter: CK_VOID_PTR,
        ulParameterLen: CK_ULONG,
        pData: CK_BYTE_PTR,
        ulDataLen: CK_ULONG,
        pSignature: CK_BYTE_PTR,
        ulSignatureLen: CK_ULONG,
    ) -> CK_RV,
>;
pub type CK_C_MessageVerifyFinal =
    ::std::option::Option<unsafe extern "C" fn(hSession: CK_SESSION_HANDLE) -> CK_RV>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_FUNCTION_LIST_3_0 {
    pub version: CK_VERSION,
    pub C_Initialize: CK_C_Initialize,
    pub C_Finalize: CK_C_Finalize,
    pub C_GetInfo: CK_C_GetInfo,
    pub C_GetFunctionList: CK_C_GetFunctionList,
    pub C_GetSlotList: CK_C_GetSlotList,
    pub C_GetSlotInfo: CK_C_GetSlotInfo,
    pub C_GetTokenInfo: CK_C_GetTokenInfo,
    pub C_GetMechanismList: CK_C_GetMechanismList,
    pub C_GetMechanismInfo: CK_C_GetMechanismInfo,
    pub C_InitToken: CK_C_InitToken,
    pub C_InitPIN: CK_C_InitPIN,
    pub C_SetPIN: CK_C_SetPIN,
    pub C_OpenSession: CK_C_OpenSession,
    pub C_CloseSession: CK_C_CloseSession,
    pub C_CloseAllSessions: CK_C_CloseAllSessions,
    pub C_GetSessionInfo: CK_C_GetSessionInfo,
    pub C_GetOperationState: CK_C_GetOperationState,
    pub C_SetOperationState: CK_C_SetOperationState,
    pub C_Login: CK_C_Login,
    pub C_Logout: CK_C_Logout,
    pub C_CreateObject: CK_C_CreateObject,
    pub C_CopyObject: CK_C_CopyObject,
    pub C_DestroyObject: CK_C_DestroyObject,
    pub C_GetObjectSize: CK_C_GetObjectSize,
    pub C_GetAttributeValue: CK_C_GetAttributeValue,
    pub C_SetAttributeValue: CK_C_SetAttributeValue,
    pub C_FindObjectsInit: CK_C_FindObjectsInit,
    pub C_FindObjects: CK_C_FindObjects,
    pub C_FindObjectsFinal: CK_C_FindObjectsFinal,
    pub C_EncryptInit: CK_C_EncryptInit,
    pub C_Encrypt: CK_C_Encrypt,
    pub C_EncryptUpdate: CK_C_EncryptUpdate,
    pub C_EncryptFinal: CK_C_EncryptFinal,
    pub C_DecryptInit: CK_C_DecryptInit,
    pub C_Decrypt: CK_C_Decrypt,
    pub C_DecryptUpdate: CK_C_DecryptUpdate,
    pub C_DecryptFinal: CK_C_DecryptFinal,
    pub C_DigestInit: CK_C_DigestInit,
    pub C_Digest: CK_C_Digest,
    pub C_DigestUpdate: CK_C_DigestUpdate,
    pub C_DigestKey: CK_C_DigestKey,
    pub C_DigestFinal: CK_C_DigestFinal,
    pub C_SignInit: CK_C_SignInit,
    pub C_Sign: CK_C_Sign,
    pub C_SignUpdate: CK_C_SignUpdate,
    pub C_SignFinal: CK_C_SignFinal,
    pub C_SignRecoverInit: CK_C_SignRecoverInit,
    pub C_SignRecover: CK_C_SignRecover,
    pub C_VerifyInit: CK_C_VerifyInit,
    pub C_Verify: CK_C_Verify,
    pub C_VerifyUpdate: CK_C_VerifyUpdate,
    pub C_VerifyFinal: CK_C_VerifyFinal,
    pub C_VerifyRecoverInit: CK_C_VerifyRecoverInit,
    pub C_VerifyRecover: CK_C_VerifyRecover,
    pub C_DigestEncryptUpdate: CK_C_DigestEncryptUpdate,
    pub C_DecryptDigestUpdate: CK_C_DecryptDigestUpdate,
    pub C_SignEncryptUpdate: CK_C_SignEncryptUpdate,
    pub C_DecryptVerifyUpdate: CK_C_DecryptVerifyUpdate,
    pub C_GenerateKey: CK_C_GenerateKey,
    pub C_GenerateKeyPair: CK_C_GenerateKeyPair,
    pub C_WrapKey: CK_C_WrapKey,
    pub C_UnwrapKey: CK_C_UnwrapKey,
    pub C_DeriveKey: CK_C_DeriveKey,
    pub C_SeedRandom: CK_C_SeedRandom,
    pub C_GenerateRandom: CK_C_GenerateRandom,
    pub C_GetFunctionStatus: CK_C_GetFunctionStatus,
    pub C_CancelFunction: CK_C_CancelFunction,
    pub C_WaitForSlotEvent: CK_C_WaitForSlotEvent,
    pub C_GetInterfaceList: CK_C_GetInterfaceList,
    pub C_GetInterface: CK_C_GetInterface,
    pub C_LoginUser: CK_C_LoginUser,
    pub C_SessionCancel: CK_C_SessionCancel,
    pub C_MessageEncryptInit: CK_C_MessageEncryptInit,
    pub C_EncryptMessage: CK_C_EncryptMessage,
    pub C_EncryptMessageBegin: CK_C_EncryptMessageBegin,
    pub C_EncryptMessageNext: CK_C_EncryptMessageNext,
    pub C_MessageEncryptFinal: CK_C_MessageEncryptFinal,
    pub C_MessageDecryptInit: CK_C_MessageDecryptInit,
    pub C_DecryptMessage: CK_C_DecryptMessage,
    pub C_DecryptMessageBegin: CK_C_DecryptMessageBegin,
    pub C_DecryptMessageNext: CK_C_DecryptMessageNext,
    pub C_MessageDecryptFinal: CK_C_MessageDecryptFinal,
    pub C_MessageSignInit: CK_C_MessageSignInit,
    pub C_SignMessage: CK_C_SignMessage,
    pub C_SignMessageBegin: CK_C_SignMessageBegin,
    pub C_SignMessageNext: CK_C_SignMessageNext,
    pub C_MessageSignFinal: CK_C_MessageSignFinal,
    pub C_MessageVerifyInit: CK_C_MessageVerifyInit,
    pub C_VerifyMessage: CK_C_VerifyMessage,
    pub C_VerifyMessageBegin: CK_C_VerifyMessageBegin,
    pub C_VerifyMessageNext: CK_C_VerifyMessageNext,
    pub C_MessageVerifyFinal: CK_C_MessageVerifyFinal,
}
#[test]
fn bindgen_test_layout_CK_FUNCTION_LIST_3_0() {
    const UNINIT: ::std::mem::MaybeUninit<CK_FUNCTION_LIST_3_0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_FUNCTION_LIST_3_0>(),
        744usize,
        concat!("Size of: ", stringify!(CK_FUNCTION_LIST_3_0))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_FUNCTION_LIST_3_0>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_FUNCTION_LIST_3_0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Initialize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Finalize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Finalize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetFunctionList) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetFunctionList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSlotList) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetSlotList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSlotInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetSlotInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetTokenInfo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetTokenInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetMechanismList) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetMechanismList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetMechanismInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetMechanismInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_InitToken) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_InitToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_InitPIN) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_InitPIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetPIN) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SetPIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_OpenSession) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_OpenSession)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CloseSession) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_CloseSession)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CloseAllSessions) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_CloseAllSessions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSessionInfo) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetSessionInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetOperationState) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetOperationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetOperationState) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SetOperationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Login) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Login)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Logout) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Logout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CreateObject) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_CreateObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CopyObject) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_CopyObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DestroyObject) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DestroyObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetObjectSize) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetObjectSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetAttributeValue) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetAttributeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetAttributeValue) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SetAttributeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjectsInit) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_FindObjectsInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjects) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_FindObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjectsFinal) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_FindObjectsFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptInit) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Encrypt) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Encrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptUpdate) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptFinal) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptInit) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Decrypt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Decrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptUpdate) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptFinal) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestInit) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DigestInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Digest) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestUpdate) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DigestUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestKey) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DigestKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestFinal) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DigestFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignInit) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Sign) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignUpdate) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignFinal) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignRecoverInit) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignRecoverInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignRecover) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignRecover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyInit) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Verify) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_Verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyUpdate) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyFinal) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyRecoverInit) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyRecoverInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyRecover) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyRecover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestEncryptUpdate) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DigestEncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptDigestUpdate) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptDigestUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignEncryptUpdate) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignEncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptVerifyUpdate) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptVerifyUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateKey) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GenerateKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateKeyPair) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GenerateKeyPair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_WrapKey) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_WrapKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_UnwrapKey) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_UnwrapKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DeriveKey) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DeriveKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SeedRandom) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SeedRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateRandom) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GenerateRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetFunctionStatus) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetFunctionStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CancelFunction) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_CancelFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_WaitForSlotEvent) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_WaitForSlotEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetInterfaceList) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetInterfaceList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetInterface) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_GetInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_LoginUser) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_LoginUser)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SessionCancel) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SessionCancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageEncryptInit) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageEncryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptMessage) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptMessageBegin) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptMessageBegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptMessageNext) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_EncryptMessageNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageEncryptFinal) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageEncryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageDecryptInit) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageDecryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptMessage) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptMessageBegin) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptMessageBegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptMessageNext) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_DecryptMessageNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageDecryptFinal) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageDecryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageSignInit) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageSignInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignMessage) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignMessageBegin) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignMessageBegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignMessageNext) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_SignMessageNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageSignFinal) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageSignFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageVerifyInit) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageVerifyInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyMessage) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyMessageBegin) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyMessageBegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyMessageNext) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_VerifyMessageNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_MessageVerifyFinal) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST_3_0),
            "::",
            stringify!(C_MessageVerifyFinal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CK_FUNCTION_LIST {
    pub version: CK_VERSION,
    pub C_Initialize: CK_C_Initialize,
    pub C_Finalize: CK_C_Finalize,
    pub C_GetInfo: CK_C_GetInfo,
    pub C_GetFunctionList: CK_C_GetFunctionList,
    pub C_GetSlotList: CK_C_GetSlotList,
    pub C_GetSlotInfo: CK_C_GetSlotInfo,
    pub C_GetTokenInfo: CK_C_GetTokenInfo,
    pub C_GetMechanismList: CK_C_GetMechanismList,
    pub C_GetMechanismInfo: CK_C_GetMechanismInfo,
    pub C_InitToken: CK_C_InitToken,
    pub C_InitPIN: CK_C_InitPIN,
    pub C_SetPIN: CK_C_SetPIN,
    pub C_OpenSession: CK_C_OpenSession,
    pub C_CloseSession: CK_C_CloseSession,
    pub C_CloseAllSessions: CK_C_CloseAllSessions,
    pub C_GetSessionInfo: CK_C_GetSessionInfo,
    pub C_GetOperationState: CK_C_GetOperationState,
    pub C_SetOperationState: CK_C_SetOperationState,
    pub C_Login: CK_C_Login,
    pub C_Logout: CK_C_Logout,
    pub C_CreateObject: CK_C_CreateObject,
    pub C_CopyObject: CK_C_CopyObject,
    pub C_DestroyObject: CK_C_DestroyObject,
    pub C_GetObjectSize: CK_C_GetObjectSize,
    pub C_GetAttributeValue: CK_C_GetAttributeValue,
    pub C_SetAttributeValue: CK_C_SetAttributeValue,
    pub C_FindObjectsInit: CK_C_FindObjectsInit,
    pub C_FindObjects: CK_C_FindObjects,
    pub C_FindObjectsFinal: CK_C_FindObjectsFinal,
    pub C_EncryptInit: CK_C_EncryptInit,
    pub C_Encrypt: CK_C_Encrypt,
    pub C_EncryptUpdate: CK_C_EncryptUpdate,
    pub C_EncryptFinal: CK_C_EncryptFinal,
    pub C_DecryptInit: CK_C_DecryptInit,
    pub C_Decrypt: CK_C_Decrypt,
    pub C_DecryptUpdate: CK_C_DecryptUpdate,
    pub C_DecryptFinal: CK_C_DecryptFinal,
    pub C_DigestInit: CK_C_DigestInit,
    pub C_Digest: CK_C_Digest,
    pub C_DigestUpdate: CK_C_DigestUpdate,
    pub C_DigestKey: CK_C_DigestKey,
    pub C_DigestFinal: CK_C_DigestFinal,
    pub C_SignInit: CK_C_SignInit,
    pub C_Sign: CK_C_Sign,
    pub C_SignUpdate: CK_C_SignUpdate,
    pub C_SignFinal: CK_C_SignFinal,
    pub C_SignRecoverInit: CK_C_SignRecoverInit,
    pub C_SignRecover: CK_C_SignRecover,
    pub C_VerifyInit: CK_C_VerifyInit,
    pub C_Verify: CK_C_Verify,
    pub C_VerifyUpdate: CK_C_VerifyUpdate,
    pub C_VerifyFinal: CK_C_VerifyFinal,
    pub C_VerifyRecoverInit: CK_C_VerifyRecoverInit,
    pub C_VerifyRecover: CK_C_VerifyRecover,
    pub C_DigestEncryptUpdate: CK_C_DigestEncryptUpdate,
    pub C_DecryptDigestUpdate: CK_C_DecryptDigestUpdate,
    pub C_SignEncryptUpdate: CK_C_SignEncryptUpdate,
    pub C_DecryptVerifyUpdate: CK_C_DecryptVerifyUpdate,
    pub C_GenerateKey: CK_C_GenerateKey,
    pub C_GenerateKeyPair: CK_C_GenerateKeyPair,
    pub C_WrapKey: CK_C_WrapKey,
    pub C_UnwrapKey: CK_C_UnwrapKey,
    pub C_DeriveKey: CK_C_DeriveKey,
    pub C_SeedRandom: CK_C_SeedRandom,
    pub C_GenerateRandom: CK_C_GenerateRandom,
    pub C_GetFunctionStatus: CK_C_GetFunctionStatus,
    pub C_CancelFunction: CK_C_CancelFunction,
    pub C_WaitForSlotEvent: CK_C_WaitForSlotEvent,
}
#[test]
fn bindgen_test_layout_CK_FUNCTION_LIST() {
    const UNINIT: ::std::mem::MaybeUninit<CK_FUNCTION_LIST> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CK_FUNCTION_LIST>(),
        552usize,
        concat!("Size of: ", stringify!(CK_FUNCTION_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<CK_FUNCTION_LIST>(),
        8usize,
        concat!("Alignment of ", stringify!(CK_FUNCTION_LIST))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Initialize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Finalize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Finalize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetFunctionList) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetFunctionList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSlotList) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetSlotList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSlotInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetSlotInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetTokenInfo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetTokenInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetMechanismList) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetMechanismList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetMechanismInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetMechanismInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_InitToken) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_InitToken)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_InitPIN) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_InitPIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetPIN) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SetPIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_OpenSession) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_OpenSession)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CloseSession) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_CloseSession)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CloseAllSessions) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_CloseAllSessions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetSessionInfo) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetSessionInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetOperationState) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetOperationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetOperationState) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SetOperationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Login) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Login)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Logout) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Logout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CreateObject) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_CreateObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CopyObject) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_CopyObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DestroyObject) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DestroyObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetObjectSize) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetObjectSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetAttributeValue) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetAttributeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SetAttributeValue) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SetAttributeValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjectsInit) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_FindObjectsInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjects) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_FindObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_FindObjectsFinal) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_FindObjectsFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptInit) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_EncryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Encrypt) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Encrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptUpdate) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_EncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_EncryptFinal) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_EncryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptInit) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DecryptInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Decrypt) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Decrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptUpdate) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DecryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptFinal) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DecryptFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestInit) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DigestInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Digest) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestUpdate) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DigestUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestKey) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DigestKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestFinal) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DigestFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignInit) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Sign) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignUpdate) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignFinal) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignRecoverInit) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignRecoverInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignRecover) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignRecover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyInit) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_VerifyInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_Verify) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_Verify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyUpdate) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_VerifyUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyFinal) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_VerifyFinal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyRecoverInit) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_VerifyRecoverInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_VerifyRecover) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_VerifyRecover)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DigestEncryptUpdate) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DigestEncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptDigestUpdate) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DecryptDigestUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SignEncryptUpdate) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SignEncryptUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DecryptVerifyUpdate) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DecryptVerifyUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateKey) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GenerateKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateKeyPair) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GenerateKeyPair)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_WrapKey) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_WrapKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_UnwrapKey) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_UnwrapKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_DeriveKey) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_DeriveKey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_SeedRandom) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_SeedRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GenerateRandom) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GenerateRandom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_GetFunctionStatus) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_GetFunctionStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_CancelFunction) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_CancelFunction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C_WaitForSlotEvent) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CK_FUNCTION_LIST),
            "::",
            stringify!(C_WaitForSlotEvent)
        )
    );
}
