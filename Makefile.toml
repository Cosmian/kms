[config]
default_to_workspace = false

[tasks.ci-format]
category = "dev"
description = "Run Rustfmt on base code"
script = "cargo format"

[tasks.ci-clippy-all]
category = "dev"
description = "Run Clippy on base code"
script = "cargo clippy-all"

[tasks.ci-build]
category = "dev"
description = "Build all"
script = '''
#!/bin/bash
set -ex
cargo check --all-targets --no-default-features
cargo check --all-targets --no-default-features --features insecure
cargo check --all-targets --no-default-features --features https
cargo check --all-targets --no-default-features --features auth
cargo check --all-targets --no-default-features --features timeout
cargo check --all-targets --no-default-features --features enclave
cargo build --all-targets --all-features
'''

[tasks.ci-cli]
category = "dev"
description = "Build CLI"
script = '''
#!/bin/bash
set -ex
rustup target add x86_64-pc-windows-gnu
cargo build --bin cosmian_kms_cli --target x86_64-pc-windows-gnu
cargo build --bin cosmian_kms_cli
'''

[tasks.ci-rust-tests]
category = "dev"
description = "Run Rust tests"
script = '''
#!/bin/bash
set -ex
cargo test --workspace --features auth,insecure --no-default-features -- --nocapture
cargo test --bins -- --nocapture
'''

[tasks.ci]
dependencies = [
  "ci-format",
  "ci-clippy-all",
  "ci-build",
  "ci-cli",
  "ci-rust-tests",
]

[tasks.ci-enclave-tests]
category = "dev"
description = "Run Rust tests"
script = '''
cargo build --bin cosmian_kms_cli
cargo test --features staging --no-default-features -p cosmian_kms_cli
'''

#
# Local tests
#
[tasks.rust-tests]
env = { TEST_DB = "kms", TEST_USER = "kms", TEST_PASSWORD = "kms", TEST_HOST_AUTH_METHOD = "trust", TEST_HOST = "localhost" }
script.pre = '''
#!/bin/bash
set -ex

ssl_version=`apt show libssl-dev 2>/dev/null | grep Version | cut -d : -f 2 | tr -d " " | cut -d. -f 1`
data_path="data/data-ssl"
if [ $ssl_version -eq 3 ] ; then
    data_path="data/data-ssl3"
fi

echo `apt list libssl-dev`
echo $data_path

# delete existing database
rm -f /tmp/kms.db

sudo docker stop postgre || true
# sudo docker stop mariadb || true
sudo docker stop my-edb || true
sudo docker run -d --rm --network=host --name postgre -e POSTGRES_DB=$TEST_DB -e POSTGRES_USER=$TEST_USER -e POSTGRES_PASSWORD=$TEST_PASSWORD postgres:latest

# MySQL connector using `sqlx` crate
# sudo docker run -d --rm --network=host --name mariadb -e MYSQL_DATABASE=$TEST_DB -e MYSQL_ROOT_PASSWORD=$TEST_PASSWORD mariadb:latest

# MySQL connector using `mysql` crate (for EdgelessDB usage)
sudo docker run -d --rm --name my-edb -p3306:3306 -p8080:8080 -e OE_SIMULATION=1 -t ghcr.io/edgelesssys/edgelessdb-sgx-1gb@sha256:668d43866609e7a93cec56cfa68c8ef5835e36244c8cecc57766b265e687f688
# inject manifest into EdgelessDB
sleep 20
pushd "$data_path"
curl -k --data-binary @manifest.json https://localhost:8080/manifest
popd
'''
script.main = '''
#!/bin/bash
set -ex
export KMS_POSTGRES_URL="postgres://$TEST_USER:$TEST_PASSWORD@$TEST_HOST/$TEST_DB"
# export KMS_MYSQL_URL="mysql://root:$TEST_PASSWORD@$TEST_HOST/$TEST_DB"
export KMS_MYSQL_URL="mysql://root@$TEST_HOST/$TEST_DB"
export KMS_USER_CERT_PATH="$(pwd)/$data_path/cert.p12"
export KMS_DELEGATED_AUTHORITY_DOMAIN="dev-1mbsbmin.us.auth0.com"
export KMS_PUBLIC_PATH="data/public"
export KMS_SHARED_PATH="data/shared"
export KMS_PRIVATE_PATH="data/private"

cargo build --bin cosmian_kms_cli

cargo test --workspace --features auth,insecure --no-default-features -- --nocapture
cargo test --bins -- --nocapture
'''
script.post = '''
#!/bin/bash
sudo docker stop postgre || true
# sudo docker stop mariadb || true
sudo docker stop my-edb || true
'''
