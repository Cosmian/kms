loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ entrypoint }}/server"

# We don't use argv, therefore we have to set argv[0]
loader.argv0_override = "kms_server"
# loader.argv_src_file = "file:scripts/args"

loader.log_level = "{{ log_level }}"

# Currently required for Tokio (eventfd is done by the host not the enclave, so less secure)
sys.insecure__allow_eventfd = true 
# This specifies the stack size of each thread in each Gramine process
# Note: if you remove that, the KMS won't work. Errors you can get: 
# - "thread panicked while processing panic. aborting."
# - "The futex facility returned an unexpected error code."
sys.stack.size = "1G"

loader.env.LD_LIBRARY_PATH = "/lib:/lib64:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.env.KMS_POSTGRES_URL = "postgres://kms:kms@localhost/kms"
loader.env.KMS_DELEGATED_AUTHORITY_DOMAIN = "dev-1mbsbmin.us.auth0.com"
loader.env.KMS_EMAIL = "tech@cosmian.com"
loader.env.KMS_DOMAIN_NAME = "testsgx.cosmian.com"
loader.env.KMS_DAYS_THRESHOLD_BEFORE_RENEW = "15"
loader.env.KMS_KEYS_PATH = "data/"
loader.env.KMS_HTTP_ROOT_PATH = "/tmp/html"
loader.env.KMS_MANIFEST_PATH = "public_data/kms.manifest.sgx"
loader.env.RUST_BACKTRACE="0"
# loader.env.RUST_LOG="debug"

sgx.nonpie_binary = true
sgx.remote_attestation = true
sgx.enclave_size = "16G"
sgx.thread_num = 256
sgx.debug = false

# File to mount into the enclave
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ gramine.runtimedir() }}"

fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr/{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr/{{ arch_libdir }}"

fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

fs.mount.kms.type = "chroot"
fs.mount.kms.path = "{{ entrypoint }}"
fs.mount.kms.uri = "file:{{ entrypoint }}"

fs.mount.tmp.type = "tmpfs"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = ""

# Files to hash at build time and allowed to be accessed in runtime if hashes match
sgx.trusted_files = [
  "file:{{ entrypoint }}/server",
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
#  "file:/lib64/",
#  "file:/lib64/ld-linux-x86-64.so.2",
#  "file:/lib/x86_64-linux-gnu/libc.so.6",
#  "file:/usr/{{ arch_libdir }}/",
#  "file:/etc/apt/apt.conf.d/",
  "file:/etc/nsswitch.conf",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/host.conf",
  "file:/etc/hosts",
  "file:/etc/gai.conf",
  "file:/etc/resolv.conf",
#  "file:/etc/fstab",
  "file:/etc/localtime",
#  "file:/usr/share/dpkg/cputable",
#  "file:/usr/share/dpkg/tupletable",
#  "file:/usr/bin/gcc",
#  "file:/usr/bin/ld",
#  "file:/usr/bin/as",
#  "file:/usr/bin/objdump",
#  "file:/usr/bin/uname",
  "file:/usr/lib/ssl/certs/",
#  "file:/usr/lib/ssl/openssl.cnf",
#  "file:/usr/share/zoneinfo/UTC",
  "file:/etc/ssl/certs/ca-certificates.crt",
]

# Let's encrypt the private keys to prevent the host to know it
sgx.protected_mrenclave_files = [
  "file:data/"
]

sgx.allowed_files = [
  "file:public_data/kms.manifest.sgx"
]
