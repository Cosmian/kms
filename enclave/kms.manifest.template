# This is a general manifest template for running SQLite.

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ entrypoint }}/server"

# We don't use argv, therefore we have to set argv[0]
loader.argv0_override = "kms_server"
# loader.argv_src_file = "file:scripts/args"

loader.log_level = "{{ log_level }}"

# Currently required for Tokio (eventfd is done by the host not the enclave, so less secure)
sys.insecure__allow_eventfd = true 
# This specifies the stack size of each thread in each Gramine process
# Note: if you remove that, the KMS won't work. Errors you can get: 
# - "thread panicked while processing panic. aborting."
# - "The futex facility returned an unexpected error code."
sys.stack.size = "1G"

loader.env.LD_LIBRARY_PATH = "/lib:/lib64:{{ arch_libdir }}:/usr/{{ arch_libdir }}"
loader.env.KMS_DELEGATED_AUTHORITY_DOMAIN = "dev-1mbsbmin.us.auth0.com"
loader.env.KMS_SSL_EMAIL = "tech@cosmian.com"
loader.env.KMS_SSL_DOMAIN_NAME = "testsgx.cosmian.com"
loader.env.KMS_MANIFEST_FILENAME = "kms.manifest.sgx"
loader.env.KMS_PRIVATE_PATH = "private_data"
loader.env.KMS_PUBLIC_PATH = "public_data"
loader.env.KMS_SHARED_PATH = "shared_data"
loader.env.KMS_KEYS_PATH = "data/"
loader.env.KMS_SQLCIPHER="1"
loader.env.RUST_BACKTRACE="0"
# loader.env.RUST_LOG="debug"

sgx.nonpie_binary = true
sgx.remote_attestation = true
sgx.enclave_size = "16G"
sgx.thread_num = 256
sgx.debug = false

sgx.isvprodid = 1
sgx.isvsvn    = 10

# File to mount into the enclave
fs.mounts = [
	{ type = "chroot", uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
	{ type = "chroot", uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
	{ type = "chroot", uri = "file:/usr/{{ arch_libdir }}", path = "/usr/{{ arch_libdir }}" },
	{ type = "chroot", uri = "file:/etc", path = "/etc" },
	{ type = "chroot", uri = "file:{{ entrypoint_abs }}", path = "{{ entrypoint }}" },
	{ type = "tmpfs", path = "/tmp" },
	{ type = "encrypted", uri = "file:private_data", path = "/private_data",  key_name = "_sgx_mrenclave" },
	{ type = "encrypted", uri = "file:shared_data", path = "/shared_data",  key_name = "_sgx_mrsigner" },
]


# Public path
sgx.allowed_files = [
  "file:public_data/kms.manifest.sgx",
  "file:public_data"
]


# Files to hash at build time and allowed to be accessed in runtime if hashes match
sgx.trusted_files = [
  "file:{{ entrypoint_abs }}/server",
  "file:{{ gramine.libos }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
#  "file:/lib64/",
#  "file:/lib64/ld-linux-x86-64.so.2",
#  "file:/lib/x86_64-linux-gnu/libc.so.6",
#  "file:/usr/{{ arch_libdir }}/",
#  "file:/etc/apt/apt.conf.d/",
  "file:/etc/nsswitch.conf",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/host.conf",
  "file:/etc/hosts",
  "file:/etc/gai.conf",
  "file:/etc/resolv.conf",
#  "file:/etc/fstab",
  "file:/etc/localtime",
#  "file:/usr/share/dpkg/cputable",
#  "file:/usr/share/dpkg/tupletable",
#  "file:/usr/bin/gcc",
#  "file:/usr/bin/ld",
#  "file:/usr/bin/as",
#  "file:/usr/bin/objdump",
#  "file:/usr/bin/uname",
  "file:/usr/lib/ssl/certs/",
#  "file:/usr/lib/ssl/openssl.cnf",
#  "file:/usr/share/zoneinfo/UTC",
  "file:/etc/ssl/certs/ca-certificates.crt",
]


