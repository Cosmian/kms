image: gitlab.cosmian.com:5000/core/cosmian_server:build-latest

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo/
  SCCACHE_DIR: ${CI_PROJECT_DIR}/.cache/sccache
  POSTGRES_DB: orchestrator_test
  POSTGRES_USER: orchestrator
  POSTGRES_PASSWORD: orchestrator
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_HOST: gitlab-runner-1.cosmian.com
  DATABASE_URL_TEST: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  KMS_POSTGRES_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  MYSQL_DB: kms
  MYSQL_ROOT_PASSWORD: kms
  MYSQL_HOST: gitlab-runner-1.cosmian.com
#  KMS_MYSQL_URL: mysql://root:$MYSQL_ROOT_PASSWORD@$MYSQL_HOST/$MYSQL_DB
  KMS_MYSQL_URL: mysql://root@$MYSQL_HOST/$MYSQL_DB
  KMS_USER_CERT_PATH: ${CI_PROJECT_DIR}/data/data-ssl/cert.p12

stages:
  - prebuild
  - build
  - build_docker
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'

#
# Prebuild
#
# Test Postgre connection and cleanup db
test_db_postgre_connect:
  image: postgres
  only: [master, develop, merge_requests]
  stage: prebuild
  script:
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - echo $POSTGRES_DB
    - echo $POSTGRES_USER
    - echo $POSTGRES_PASSWORD
    - echo $POSTGRES_HOST
    - echo $POSTGRES_HOST_AUTH_METHOD
    - echo $DATABASE_URL_TEST
    - echo $KMS_POSTGRES_URL
    - psql $DATABASE_URL_TEST -c "SELECT 'OK' AS status;"
    - dropdb -h $POSTGRES_HOST -U $POSTGRES_USER --if-exists $POSTGRES_DB
    - createdb -h $POSTGRES_HOST -U $POSTGRES_USER --owner=$POSTGRES_USER $POSTGRES_DB

# Test Maria connection and cleanup db
test_db_mariadb_connect:
  image: mariadb
  only: [master, develop, merge_requests]
  stage: prebuild
  script:
    - echo $MYSQL_DB
#    - echo $MYSQL_ROOT_PASSWORD
    - echo $KMS_MYSQL_URL
#    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "SHOW DATABASES"
#    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "DROP DATABASE IF EXISTS kms"
#    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "CREATE DATABASE kms"
    - mysql -h "$MYSQL_HOST" -uroot -e "SHOW DATABASES" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"
    - mysql -h "$MYSQL_HOST" -uroot -e "DROP DATABASE IF EXISTS kms" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"
    - mysql -h "$MYSQL_HOST" -uroot -e "CREATE DATABASE kms" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"

# Security check
cargo_audit:
  stage: prebuild
  only: [master, develop, merge_requests]
  cache: {}
  before_script:
    - source /root/bashrc
  script:
    - cargo audit
  allow_failure: true

#
# Coverage
#
#
# Coverage
#
# coverage:
#  stage: prebuild
#  artifacts:
#    paths:
#      - cobertura.xml
#    expire_in: 3 mos
#  retry: 1
#  allow_failure: true
#  only:
#    refs:
#      - main
#  cache:
#    key: "${CI_COMMIT_REF_SLUG}"
#    policy: pull
#    paths:
#      - $CARGO_HOME
#      - $SCCACHE_DIR
#  before_script:
#    - source /root/bashrc
#    - sccache -s
#    - cargo tarpaulin --version
#  script:
#    - cargo coverage
#    - sccache -s
#  coverage: /^\d+.\d+% coverage/

#
# Build and tests everything on demand
#
compile_and_test:
  stage: build
  only: [master, develop, merge_requests]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - source /root/bashrc
    - export RUST_BACKTRACE=1 CARGO_INCREMENTAL=0
    - cargo clippy -V
    - sccache -s
    - echo "$KMS_USER_CERT_PATH"
    - ls -alh /builds/core/kms/data/data-ssl
  script:
    - cat /proc/meminfo
    - /usr/bin/time -v cargo make ci
    - sccache -s

#
# Check for unused deps
#
unused_deps:
  stage: build
  only: [master, develop, merge_requests]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - source /root/bashrc
    - cargo udeps -V
    - sccache -s
  allow_failure: false
  script:
    - cargo deps
    - sccache -s

docker_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/'
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  before_script:
    - echo "10.0.0.7     gitlab.cosmian.com" >> /etc/hosts
  script:
    - echo $IMAGE_TAG
    - docker build . --network=host -t $CI_REGISTRY_IMAGE -t $IMAGE_TAG
    - docker push $IMAGE_TAG

docker_timeout_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/'
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}_timeout
  before_script:
    - echo "10.0.0.7     gitlab.cosmian.com" >> /etc/hosts
  script:
    - echo $IMAGE_TAG
    - docker build . --build-arg FEATURES="--features timeout" --network=host -t $IMAGE_TAG
    - docker push $IMAGE_TAG

# This image is used by the CI of projects using the KMS. For example cosmian_java_lib.
docker_lib_ci_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/'
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}_ci
  before_script:
    - echo "10.0.0.7     gitlab.cosmian.com" >> /etc/hosts
  script:
    - echo $IMAGE_TAG
    - docker build . --build-arg FEATURES="--no-default-features" --network=host -t $IMAGE_TAG
    - docker push $IMAGE_TAG

docker_lib_ci_build_and_push:
  image: docker:19.03.15
  stage: build_docker
#   rules:
#    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/'
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}/ci:${CI_COMMIT_REF_NAME}
  before_script:
    - echo "10.0.0.7     gitlab.cosmian.com" >> /etc/hosts
  script:
    - echo $IMAGE_TAG
    - docker build . --build-arg TIMEOUT="--no-default-features" --network=host -t $IMAGE_TAG
    - docker push $IMAGE_TAG

doc:
  image: gitlab.cosmian.com:5000/core/docker_doc_ci_image:latest
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/'
  script:
    - pushd documentation
    - mkdocs build
    # remove any previous KMS doc with same current tag
    - ssh cosmian@ui.prod.sc.cosmian.com "rm -fr /var/www/documentation_root/kms/${CI_COMMIT_TAG}"
    - scp -r site cosmian@ui.prod.sc.cosmian.com:/var/www/documentation_root/kms/"${CI_COMMIT_TAG}"
    # Update the link to the latest doc
    - ssh cosmian@ui.prod.sc.cosmian.com "unlink /var/www/documentation_root/kms/2.0 || true"
    - ssh cosmian@ui.prod.sc.cosmian.com "ln -s /var/www/documentation_root/kms/${CI_COMMIT_TAG} /var/www/documentation_root/kms/2.0"

doc-test:
  image: gitlab.cosmian.com:5000/core/docker_doc_ci_image:latest
  stage: deploy
  only: [develop]
  script:
    - pushd documentation
    - mkdocs build
    # remove any previous KMS doc with same current tag
    - ssh cosmian@ui.test.sc.cosmian.com "rm -fr /var/www/documentation_root/kms/dev"
    - scp -r site cosmian@ui.test.sc.cosmian.com:/var/www/documentation_root/kms/dev
    # Update the link to the latest doc
    - ssh cosmian@ui.test.sc.cosmian.com "unlink /var/www/documentation_root/kms/2.0 || true"
    - ssh cosmian@ui.test.sc.cosmian.com "ln -s /var/www/documentation_root/kms/dev /var/www/documentation_root/kms/2.0"
