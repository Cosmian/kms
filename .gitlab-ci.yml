---
image: gitlab.cosmian.com:5000/core/ci-rust:latest

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo/
  SCCACHE_DIR: ${CI_PROJECT_DIR}/.cache/sccache
  POSTGRES_DB: orchestrator_test
  POSTGRES_USER: orchestrator
  POSTGRES_PASSWORD: orchestrator
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_HOST: gitlab-runner-1.ovh.cosmian.com
  DATABASE_URL_TEST: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  KMS_POSTGRES_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  MYSQL_DB: kms
  MYSQL_ROOT_PASSWORD: kms
  MYSQL_HOST: gitlab-runner-1.ovh.cosmian.com
  #  KMS_MYSQL_URL: mysql://root:$MYSQL_ROOT_PASSWORD@$MYSQL_HOST/$MYSQL_DB
  KMS_MYSQL_URL: mysql://root@$MYSQL_HOST/$MYSQL_DB
  KMS_USER_CERT_PATH: ${CI_PROJECT_DIR}/data/data-ssl/cert.p12

stages:
  - prebuild
  - build
  - pretest
  - test
  - build_docker
  - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push"

#
# Prebuild
#
# Test Postgre connection and cleanup db
test_db_postgre_connect:
  image: postgres
  only: [master, develop, merge_requests]
  stage: prebuild
  script:
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - echo $POSTGRES_DB
    - echo $POSTGRES_USER
    - echo $POSTGRES_PASSWORD
    - echo $POSTGRES_HOST
    - echo $POSTGRES_HOST_AUTH_METHOD
    - echo $DATABASE_URL_TEST
    - echo $KMS_POSTGRES_URL
    - psql $DATABASE_URL_TEST -c "SELECT 'OK' AS status;"
    - dropdb -h $POSTGRES_HOST -U $POSTGRES_USER --if-exists $POSTGRES_DB
    - createdb -h $POSTGRES_HOST -U $POSTGRES_USER --owner=$POSTGRES_USER $POSTGRES_DB

# Test Maria connection and cleanup db
test_db_mariadb_connect:
  image: mariadb
  only: [master, develop, merge_requests]
  stage: prebuild
  script:
    - echo $MYSQL_DB
    #    - echo $MYSQL_ROOT_PASSWORD
    - echo $KMS_MYSQL_URL
    #    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "SHOW DATABASES"
    #    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "DROP DATABASE IF EXISTS kms"
    #    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "CREATE DATABASE kms"
    - mysql -h "$MYSQL_HOST" -uroot -e "SHOW DATABASES" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"
    - mysql -h "$MYSQL_HOST" -uroot -e "DROP DATABASE IF EXISTS kms" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"
    - mysql -h "$MYSQL_HOST" -uroot -e "CREATE DATABASE kms" --ssl-cert "${CI_PROJECT_DIR}/data/data-ssl/cert.pem" --ssl-key "${CI_PROJECT_DIR}/data/data-ssl/key.pem"

# Security check
# Failing because mysql has some dependencies with problems but cannot be upgraded
# because new versions of bitvec/funty are incompatible with some of our crypto dependencies.
cargo_audit:
  stage: prebuild
  only: [master, develop, merge_requests]
  cache: {}
  script:
    - cargo audit --ignore RUSTSEC-2020-0071

#
# Coverage
#
# coverage:
#   stage: prebuild
#   artifacts:
#     paths:
#       - cobertura.xml
#     expire_in: 3 mos
#   retry: 1
#   allow_failure: true
#   only:
#     refs:
#       - main
#   cache:
#     key: "${CI_COMMIT_REF_SLUG}"
#     policy: pull
#     paths:
#       - $CARGO_HOME
#       - $SCCACHE_DIR
#   before_script:
#     - sccache -s
#     - cargo tarpaulin --version
#   script:
#     - cargo coverage
#     - sccache -s
#   coverage: /^\d+.\d+% coverage/

#
# Build and tests everything on demand
#
compile_and_test:
  stage: build
  only: [master, develop, merge_requests]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - export RUST_BACKTRACE=1 CARGO_INCREMENTAL=0
    - cargo clippy -V
    - sccache -s
    - echo "$KMS_USER_CERT_PATH"
    - ls -alh /builds/core/kms/data/data-ssl
    - apt-get update
    - TZ=Europe/Paris apt-get install --no-install-recommends -qq libsodium-dev libclang-dev
  script:
    - cat /proc/meminfo
    - /usr/bin/time -v cargo make ci
    - sccache -s

#
# Check for unused deps
#
unused_deps:
  stage: build
  only: [master, develop, merge_requests]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - sccache -s
    - apt-get update
    - TZ=Europe/Paris apt-get install --no-install-recommends -qq libsodium-dev libclang-dev
  allow_failure: false
  script:
    - cargo deps
    - sccache -s

#
# Build a docker to test the staging feature and start it remotely
#
# Note: this step is hidden because the kms can't run RA with OVH yet
.docker_test_build_and_deploy:
  image: docker:19.03.15
  stage: pretest
  only: [master, develop, merge_requests]
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:test
    SHORT_IMAGE_NAME: kms_enclave
    SGX_REMOTE: cosmian@sgx2-1.sc.ci.cosmian.com
    KMS_DOMAIN: testsgx.cosmian.com
  script:
    - echo $IMAGE_TAG
    - echo $SGX_REMOTE
    - docker build --network=host -f enclave/Dockerfile.sgx --build-arg FEATURES="--features=staging" --build-arg KMS_DOMAIN="$KMS_DOMAIN" -t $IMAGE_TAG
      .
    - docker push $IMAGE_TAG
    - ./scripts/deploy_sgx.sh

#
# Test staging on the enclave
#
# Note: this step is hidden because the kms can't run RA with OVH yet
.test-enclave:
  stage: test
  only: [master, develop, merge_requests]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - export RUST_BACKTRACE=1 CARGO_INCREMENTAL=0
    - cargo clippy -V
    - sccache -s
    - apt-get update
    - TZ=Europe/Paris apt-get install --no-install-recommends -qq libsodium-dev libclang-dev
  script:
    - cat /proc/meminfo
    - /usr/bin/time -v cargo make ci-enclave-tests
    - sccache -s

#
# Build a docker and deploy it (for demo)
#
# Note: this step is hidden because kms.demo.cosmian.com doesn't exist yet
.docker_demo_build_and_deploy:
  image: docker:19.03.15
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}_staging
    SHORT_IMAGE_NAME: kms_enclave
    KMS_DOMAIN: kms.demo.cosmian.com
    SGX_REMOTE: cosmian@${KMS_DOMAIN}
  script:
    - echo $IMAGE_TAG
    - echo $SGX_REMOTE
    - docker build --network=host --build-arg FEATURES="--features=staging" --build-arg KMS_DOMAIN="$KMS_DOMAIN" -f enclave/Dockerfile.sgx  -t $IMAGE_TAG
      .
    - docker push $IMAGE_TAG
    - ./scripts/deploy_sgx.sh

#
# Build and push a docker with prod feature but no enclave
#
docker_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  script:
    - echo $IMAGE_TAG
    - docker build . --network=host --build-arg FEATURES="--features=auth,https" -t $CI_REGISTRY_IMAGE -t $IMAGE_TAG
    - docker push $IMAGE_TAG

#
# Build and push a docker with timeout feature (no enclave)
#
docker_timeout_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}_timeout
  script:
    - echo $IMAGE_TAG
    - docker build . --build-arg FEATURES="--features=auth,https,timeout" --network=host -t $IMAGE_TAG
    - docker push $IMAGE_TAG

#
# This image is used by the CI of projects using the KMS. For example cloudproof_java.
#
docker_lib_ci_build_and_push:
  image: docker:19.03.15
  stage: build_docker
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
    - if: $CI_COMMIT_REF_NAME == "develop"
  variables:
    IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}_ci
  script:
    - echo $IMAGE_TAG
    - docker build . --network=host -t $IMAGE_TAG
    - docker push $IMAGE_TAG

#
# Build a delivery archive as a Gitlab artifact.
# This artifact contains:
# - a KMS Docker container (no authentication support, no HTTPS support)
# - a Postgres Docker container
# - a Docker Compose script
# - a HOW-TO guide
#
build_standalone_delivery:
  image: docker:19.03.15
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  script:
    - docker build . -f delivery/Dockerfile.standalone --network=host -t cosmian/kms:${CI_COMMIT_TAG}
    - docker save cosmian/kms:${CI_COMMIT_TAG} > kms.tar
    - docker save postgres > postgres.tar
    # Docker hub deployment
    - docker login -u cosmian -p "${DOCKER_HUB_PWD}"
    - docker tag cosmian/kms:${CI_COMMIT_TAG} cosmian/kms:latest
    - docker push cosmian/kms:${CI_COMMIT_TAG}
    - docker push cosmian/kms:latest

  artifacts:
    name: kms_server_${CI_COMMIT_TAG}_$(date +"%Y%m%d")
    paths:
      - kms.tar
      - postgres.tar
      - delivery/HOW-TO.md
      - delivery/docker-compose.yml

#
# Build CLI for Windows and Linux
#
build_cli_windows_linux:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  before_script:
    - rustup target add x86_64-pc-windows-gnu
  script:
    - cargo build --release --bin cosmian_kms_cli --target x86_64-pc-windows-gnu
    - apt-get update
    - TZ=Europe/Paris apt-get install --no-install-recommends -qq libsodium-dev libclang-dev
    - cargo build --release --bin cosmian_kms_cli
  artifacts:
    name: kms_cli_${CI_COMMIT_TAG}_$(date +"%Y%m%d")
    paths:
      - target/x86_64-pc-windows-gnu/release/cosmian_kms_cli.exe
      - target/release/cosmian_kms_cli

# Triggers public_documentation to rebuild the doc
documentation:
  image: alpine:3.16
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
  before_script:
    - apk add --update curl
  script:
    - curl --request POST --form token=${CI_JOB_TOKEN} --form ref=${CI_COMMIT_BRANCH} http://gitlab.cosmian.com/api/v4/projects/10/trigger/pipeline
