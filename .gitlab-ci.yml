image: gitlab.cosmian.com:5000/core/cosmian_server:build-latest

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo/
  SCCACHE_DIR: ${CI_PROJECT_DIR}/.cache/sccache
  POSTGRES_DB: orchestrator_test
  POSTGRES_USER: orchestrator
  POSTGRES_PASSWORD: orchestrator
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRES_HOST: gitlab-runner-1.cosmian.com
  DATABASE_URL_TEST: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  KMS_POSTGRES_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB
  MYSQL_DB: kms
  MYSQL_ROOT_PASSWORD: kms
  MYSQL_HOST: gitlab-runner-1.cosmian.com
  KMS_MYSQL_URL: mysql://root:$MYSQL_ROOT_PASSWORD@$MYSQL_HOST/$MYSQL_DB

stages:
  - prebuild
  - build

#
# Prebuild
#
# Test Postgre connection and cleanup db
test_db_postgre_connect:
  image: postgres
  stage: prebuild
  script:
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - echo $POSTGRES_DB
    - echo $POSTGRES_USER
    - echo $POSTGRES_PASSWORD
    - echo $POSTGRES_HOST
    - echo $POSTGRES_HOST_AUTH_METHOD
    - echo $DATABASE_URL_TEST
    - echo $KMS_POSTGRES_URL
    - psql $DATABASE_URL_TEST -c "SELECT 'OK' AS status;"
    - dropdb -h $POSTGRES_HOST -U $POSTGRES_USER --if-exists $POSTGRES_DB
    - createdb -h $POSTGRES_HOST -U $POSTGRES_USER --owner=$POSTGRES_USER $POSTGRES_DB

# Test Maria connection and cleanup db
test_db_mariadb_connect:
  image: mariadb
  stage: prebuild
  script:
    - echo $MYSQL_DB
    - echo $MYSQL_ROOT_PASSWORD
    - echo $KMS_MYSQL_URL
    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "SHOW DATABASES"
    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "DROP DATABASE IF EXISTS kms"
    - mysql -h "$MYSQL_HOST" -uroot -pkms -e "CREATE DATABASE kms"

# Security check
cargo_audit:
  stage: prebuild
  cache: {}
  before_script:
    - source /root/bashrc
  script:
    - cargo audit
  allow_failure: true

#
# Coverage
#
coverage:
  stage: prebuild
  artifacts:
    paths:
      - cobertura.xml
    expire_in: 3 mos
  retry: 1
  allow_failure: true
  only:
    refs:
      - main
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - source /root/bashrc
    - sccache -s
    - cargo tarpaulin --version
  script:
    - cargo coverage
    - sccache -s
  coverage: /^\d+.\d+% coverage/

#
# Build and tests everything on demand
#
compile: 
  stage: build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - source /root/bashrc
    - export RUST_BACKTRACE=1 CARGO_INCREMENTAL=0
    - cargo clippy -V
    - sccache -s
  script:
    - cat /proc/meminfo
    - /usr/bin/time -v cargo make ci
    - sccache -s
  artifacts:
    paths:
      - target/release/kms
    expire_in: 3 mos

#
# Check for unused deps
#
unused_deps:
  stage: build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    policy: pull
    paths:
      - $CARGO_HOME
      - $SCCACHE_DIR
  before_script:
    - source /root/bashrc
    - cargo udeps -V
    - sccache -s
  allow_failure: false
  script:
    - cargo deps
    - sccache -s

docker_kms_server:
  stage: build
  tags: [shell]
  only: [tags, main, develop, merge_requests]
  script:
    - docker build . -t cosmian/kms_server
#    - docker save cosmian/kms_server | pigz > cosmian_kms_server.tar.gz
#  artifacts:
#    paths:
#      - cosmian_kms_server.tar.gz
#    expire_in: 3 mos